{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nombre de instancia de Data Factory",
			"defaultValue": "adf-metrodoralakehouse-pro"
		},
		"HttpSharepointMetrodora_password": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"password\"de \"HttpSharepointMetrodora\""
		},
		"ls_PostgreSql_connectionString": {
			"type": "secureString",
			"metadata": "Cadena protegida para \"connectionString\"de \"ls_PostgreSql\"",
			"defaultValue": "Host=psql-metrodoralakehouse-pro.postgres.database.azure.com;Port=5432;Database=lakehouse;UID=sqladminuser;EncryptionMethod=1;ValidateServerCertificate=0"
		},
		"HttpSharepointMetrodora_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://metrodorasl.sharepoint.com/"
		},
		"HttpSharepointMetrodora_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sergio.correal@es.logicalis.com"
		},
		"ls_Aircall_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.aircall.io/"
		},
		"ls_Aircall_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "c668cd9a3a86775ddb72333278d0b7bb"
		},
		"ls_AzureDatabricks_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "1216-171311-yqwga0m4"
		},
		"ls_Classlife_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.classlife.io/api/v1"
		},
		"ls_Clientify_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.clientify.net/"
		},
		"ls_KeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kvmetrodoralakehousepro.vault.azure.net/"
		},
		"ls_Odoo_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://odoo.isep.es/jsonrpc/"
		},
		"ls_Zoho_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://accounts.zoho.eu"
		},
		"ls_adsl_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stmetrodoralakehousepro.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/p_AircallCallsBronze')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataAircallToBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetVariableDateToLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:50",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.meta.next_page_link"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Aircall",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/calls?per_page=50&from=',variables('unix'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/aircall/calls/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))\n\n\n\n",
										"type": "Expression"
									},
									"filename": "aircallcalls.json"
								}
							}
						]
					},
					{
						"name": "SetVariableDateToLoad",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "unix",
							"value": {
								"value": "@{div(sub(ticks(addDays(utcnow(),int(concat('-',string(pipeline().parameters.dayToLoad))))), ticks('1970-01-01')),10000000)}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"variables": {
					"unix": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Old"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Aircall')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_AircallCallsBronzeF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataAircallToBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetVariableDateToLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.meta.next_page_link"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Aircall",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/calls?per_page=50&from=',variables('unix'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehousef0/aircall/calls/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))\n\n\n\n",
										"type": "Expression"
									},
									"filename": "aircallcalls.json"
								}
							}
						]
					},
					{
						"name": "SetVariableDateToLoad",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "unix",
							"value": {
								"value": "@{div(sub(ticks(addDays(utcnow(),int(concat('-',string(pipeline().parameters.dayToLoad))))), ticks('1970-01-01')),10000000)}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"variables": {
					"unix": {
						"type": "String"
					}
				},
				"folder": {
					"name": "LakehouseF0/BronzeF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Aircall')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_AircallCallsBronzeF0_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataAircallToBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetVariableDateToLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.meta.next_page_link"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Aircall",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/calls?per_page=50&from=',variables('unix'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehousef0/aircall/calls/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))\n\n\n\n",
										"type": "Expression"
									},
									"filename": "aircallcalls.json"
								}
							}
						]
					},
					{
						"name": "SetVariableDateToLoad",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "unix",
							"value": {
								"value": "@{div(sub(ticks('2024-09-01'), ticks('1970-01-01')),10000000)}\t",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"unix": {
						"type": "String"
					}
				},
				"folder": {
					"name": "LakehouseF0/BronzeF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Aircall')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_AircallCallsBronzeSilver_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('startdate'),string(formatDateTime(utcnow(),'yyyy-MM-dd')))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyDataAircallToBronze",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetVariableDateToLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"AbsoluteUrl": "$.meta.next_page_link"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Aircall",
											"type": "DatasetReference",
											"parameters": {
												"relativeurl": {
													"value": "@concat('v1/calls?per_page=50&from=',variables('unix'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/aircall/calls/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))\n\n\n\n",
													"type": "Expression"
												},
												"filename": "aircallcalls.json"
											}
										}
									]
								},
								{
									"name": "SetVariableDateToLoad",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "unix",
										"value": {
											"value": "@{div(sub(ticks(variables('startdate')), ticks('1970-01-01')),10000000)}\t",
											"type": "Expression"
										}
									}
								},
								{
									"name": "NotebookAircallCallsSilver",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "CopyDataAircallToBronze",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Lakehouse/Silver/AircallCallsSilver"
									},
									"linkedServiceName": {
										"referenceName": "ls_AzureDatabricks",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "NotebookAircallMaxDate",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "NotebookAircallCallsSilver",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Lakehouse/Silver/AircallMaxDate"
									},
									"linkedServiceName": {
										"referenceName": "ls_AzureDatabricks",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SetVariableMaxDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "NotebookAircallMaxDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "startdate",
										"value": {
											"value": "@activity('NotebookAircallMaxDate').output.runOutput",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"unix": {
						"type": "String"
					},
					"startdate": {
						"type": "String",
						"defaultValue": "2024-09-01"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Old"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Aircall')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_AircallCallsGoldF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowAircallCallsGoldF0",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_AircallCallsGoldF0",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceAircallCallsSilver": {},
									"sourceCallsGoldF0": {},
									"sinkCallsGoldF0": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/GoldF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_AircallCallsGoldF0')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_AircallCallsSilverF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowAircallSilverF0",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_AircallCallsSilverF0",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceAircallBronze": {
										"container": "bronze",
										"folder": {
											"value": "@concat('lakehousef0/aircall/calls/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
											"type": "Expression"
										},
										"filename": "aircallcalls.json"
									},
									"sinkAircallSilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/SilverF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_AircallCallsSilverF0')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Auxiliar_periodificacion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "aux periodificacion gold",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'aux_periodificacion_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "aux periodificacion DWH",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "DELETE FROM auxiliar_periodificacion",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.dwh_storage_databricks, 'auxiliar_periodificacion')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DELETE FROM auxiliar_periodificacion",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "aux periodificacion gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "DELETE FROM public.auxiliar_periodificacion;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_PostgreSql",
								"type": "DatasetReference",
								"parameters": {
									"schema": "public",
									"table": "auxiliar_periodificacion"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"gold_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Gold/"
					},
					"dwh_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/DWH/"
					}
				},
				"folder": {
					"name": "Lakehouse/Gold"
				},
				"annotations": [],
				"lastPublishTime": "2025-04-24T20:17:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]",
				"[concat(variables('factoryId'), '/datasets/ds_PostgreSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_BudgetBronze')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataBudgetBronze",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adsl_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": "master",
									"folder": "Budget",
									"filename": "masterbudget.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/budget/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "masterbudget.parquet"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_BudgetBronzeF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataBudgetBronzeF0",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adsl_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": "master",
									"folder": "Budget",
									"filename": "masterbudget.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehousef0/budget/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "masterbudget.parquet"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/BronzeF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_BudgetDWHF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowBudgetDWHF0",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_BudgetDWHF0",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceBudgetGoldF0": {},
									"sink1": {
										"schema": "public",
										"table": "f0budget"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/DWHF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_BudgetDWHF0')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_BudgetDWH_old')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "NotebookBudgetDWH_dim_escenario",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.dwh_storage_databricks, 'dim_escenario_budget')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "NotebookBudgetDWH_dim_titulacion",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.dwh_storage_databricks, 'dim_titulacion_budget')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "NotebookBudgetDWH_fct",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.dwh_storage_databricks, 'fct_budget')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dwh_storage_databricks": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Lakehouse/DWH"
				},
				"annotations": [],
				"lastPublishTime": "2025-05-14T10:11:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_BudgetGoldF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowBudgetGoldF0",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_BudgetGoldF0",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceBudgetBronzeF0": {
										"container": "bronze",
										"folder": {
											"value": "@concat('lakehousef0/budget/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
											"type": "Expression"
										},
										"filename": "masterbudget.parquet"
									},
									"sinkBudgetGoldF0": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/GoldF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_BudgetGoldF0')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_BudgetGold_dim_old')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dim_escenario_budget_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'fct_budget_ff_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_titulacion_budget_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_titulacion_budget_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"gold_storage_databricks": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Lakehouse/DWH"
				},
				"annotations": [],
				"lastPublishTime": "2025-05-14T10:11:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_CallsDWHF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowCallsDWHF0",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_CallsDWHF0",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCallsGoldF0": {},
									"sink1": {
										"schema": "public",
										"table": "f0calls"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/DWHF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_CallsDWHF0')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_CallsSalesBronzeSilver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineSalesBronze_Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_SalesBronze",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dayToLoad": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipelineClienitfyOdooSilver",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineSalesBronze_Full",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClienitfyOdooSilver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipelineSalesSilver",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineClienitfyOdooSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_SalesSilver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipelineAircallCallsBronze",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_AircallCallsBronze",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dayToLoad": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "AircallCallsSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExecutePipelineAircallCallsBronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks,'AircallCallsSilver')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					},
					"silver_storage_databricks": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Old"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T18:43:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_SalesBronze')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClienitfyOdooSilver')]",
				"[concat(variables('factoryId'), '/pipelines/p_SalesSilver')]",
				"[concat(variables('factoryId'), '/pipelines/p_AircallCallsBronze')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_CallsSalesBronzeSilver_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineSalesBronze_Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_SalesBronze_Full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineAircallCallsBronzeSilver_Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_AircallCallsBronzeSilver_Full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineClienitfyOdooSilver",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineSalesBronze_Full",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClienitfyOdooSilver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineSalesSilver",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineClienitfyOdooSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_SalesSilver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Old"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_SalesBronze_Full')]",
				"[concat(variables('factoryId'), '/pipelines/p_AircallCallsBronzeSilver_Full')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClienitfyOdooSilver')]",
				"[concat(variables('factoryId'), '/pipelines/p_SalesSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_CallsSalesBronzeSilver_Full_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineClientifyDealsBronze_Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsBronze_Full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineOdooLeadBronze_Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_OdooLeadBronze_Full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsBronze_IdForDelete",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsBronze_IdForDelete",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineAircallCallsBronzeSilver_Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_AircallCallsBronzeSilver_Full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Old"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsBronze_Full')]",
				"[concat(variables('factoryId'), '/pipelines/p_OdooLeadBronze_Full')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsBronze_IdForDelete')]",
				"[concat(variables('factoryId'), '/pipelines/p_AircallCallsBronzeSilver_Full')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Child_Contacts_38b')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PageCounterParent",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable Users Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@pipeline().parameters.PageCounter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "NextPageTokenParent",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable Users Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NextPageToken",
							"value": {
								"value": "@pipeline().parameters.NextPageToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UntilContacts",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "NextPageTokenParent",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "PageCounterParent",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(\n  or(\n    equals(variables('NextPageToken'), null),\n    equals(trim(variables('NextPageToken')), '')\n  ),\n  greater(\n    div(sub(ticks(utcnow()), ticks(pipeline().parameters.TokenStartTime)), 10000000),\n    3300\n  )\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopydataZohoDeals",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"Authorization": {
													"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
													"type": "Expression"
												},
												"If-Modified-Since": {
													"value": "@pipeline().parameters.IfModifiedSince",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Zoho_API",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@if(\n    or(\n        equals(variables('NextPageToken'), null),\n        equals(variables('NextPageToken'), '')\n    ),\n    concat(\n        'https://www.zohoapis.eu/crm/v7/Contacts?per_page=200&page=',\n        string(variables('PageCounter')),\n        '&fields=Email,Mailing_Zip,Other_Zip,Mailing_Street,Other_State,woztellplatformintegration__WhatsApp_Opt_Out,Other_Country,Sexo,Profesion,First_Name,Phone,Estudios,Mailing_Country,recibir_comunicacion,id,Apellidos_2,Provincia,ID_Classlife,Date_of_Birth,Tipo_de_contacto,Mailing_City,Other_City,Home_Phone1,Other_Street,Mobile,Residencia,Nacionalidad,Secondary_Email,Tipo_de_cliente,DNI,ltima_L_nea_de_negocio,Created_time,Modified_Time'\n    ),\n    concat(\n        'https://www.zohoapis.eu/crm/v7/Contacts?per_page=200&page_token=',\n        variables('NextPageToken'),\n        '&fields=Email,Mailing_Zip,Other_Zip,Mailing_Street,Other_State,woztellplatformintegration__WhatsApp_Opt_Out,Other_Country,Sexo,Profesion,First_Name,Phone,Estudios,Mailing_Country,recibir_comunicacion,id,Apellidos_2,Provincia,ID_Classlife,Date_of_Birth,Tipo_de_contacto,Mailing_City,Other_City,Home_Phone1,Other_Street,Mobile,Residencia,Nacionalidad,Secondary_Email,Tipo_de_cliente,DNI,ltima_L_nea_de_negocio,Created_time,Modified_Time'\n    )\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Contacts/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoContacts_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "GetNextPageTokenDeals",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopydataZohoDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Contacts/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoContacts_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Set NextPageTokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextPageToken",
										"value": {
											"value": "@activity('GetNextPageTokenDeals').output.firstRow.info.next_page_token",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LogtokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set NextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Log_Token",
										"value": {
											"value": "@string(variables('NextPageToken'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PageCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "WebZohoAPI",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://accounts.zoho.eu/oauth/v2/token",
							"body": {
								"value": "@concat('client_id=', pipeline().parameters.client_id, \n        '&client_secret=', pipeline().parameters.client_secret,\n        '&refresh_token=', pipeline().parameters.refresh_token,\n        '&grant_type=refresh_token')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set variable Users Leads",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "WebActivityName",
							"value": {
								"value": "@activity('WebZohoAPI').output.access_token\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@pipeline().parameters.TokenStartTime",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Page Counter and NextpageToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "UntilContacts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "PageCounter",
									"value": {
										"type": "Expression",
										"content": "@variables('PageCounter')"
									}
								},
								{
									"key": "NextPageToken",
									"value": {
										"type": "Expression",
										"content": "@variables('NextPageToken')"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "7"
					},
					"AccessToken": {
						"type": "string"
					},
					"PageCounter": {
						"type": "string"
					},
					"IfModifiedSince": {
						"type": "string"
					},
					"NextPageToken": {
						"type": "string"
					},
					"TokenStartTime": {
						"type": "string"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					},
					"TokenStartTime": {
						"type": "String"
					},
					"AccessToken": {
						"type": "String"
					},
					"NextPageTokenParent": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Zoho_API')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Child_Deals_38b')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PageCounterParent",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable Users Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@pipeline().parameters.PageCounter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "NextPageTokenParent",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable Users Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NextPageToken",
							"value": {
								"value": "@pipeline().parameters.NextPageToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UntilDeals",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "NextPageTokenParent",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "PageCounterParent",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(\n  or(\n    equals(variables('NextPageToken'), null),\n    equals(trim(variables('NextPageToken')), '')\n  ),\n  greater(\n    div(sub(ticks(utcnow()), ticks(pipeline().parameters.TokenStartTime)), 10000000),\n    3300\n  )\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopydataZohoDeals",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"Authorization": {
													"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
													"type": "Expression"
												},
												"If-Modified-Since": {
													"value": "@pipeline().parameters.IfModifiedSince",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Zoho_API",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@if(\n    or(\n        equals(variables('NextPageToken'), null),\n        equals(variables('NextPageToken'), '')\n    ),\n    concat(\n        'https://www.zohoapis.eu/crm/v7/Deals?per_page=200&page=',\n        string(variables('PageCounter')),\n        '&fields=Motivo_p_rdida_B2C,ID_Producto,Owner,Motivo_p_rdida_B2B,Residencia1,utm_type,utm_medium,utm_campaign_name,br_rating,Deal_Name,Exchange_Rate,Currency,Stage,id,utm_ad_id,ID_Classlife,utm_campaign_id,Importe_pagado,br_score,utm_perfil,C_digo_descuento,L_nea_de_Negocio,utm_source,Descuento,Closing_Date,utm_adset_id,utm_estrategia,tipo_conversion,Amount,Probability,Contact_Name.id,Pipeline,Competencia,utm_term,utm_channel,Tipolog_a_de_cliente,Created_Date,Modified_Time,ID_Lead,Fecha_hora_Pagado_NE,Fecha_hora_Anulaci_n,Nacionalidad1,lead_correlation_id,id_unico,Tipolog_a_del_alumno1,Contact_Name,Created_Time,ID_clientify,Modalidad_de_curso'\n    ),\n    concat(\n        'https://www.zohoapis.eu/crm/v7/Deals?per_page=200&page_token=',\n        variables('NextPageToken'),\n        '&fields=Motivo_p_rdida_B2C,ID_Producto,Owner,Motivo_p_rdida_B2B,Residencia1,utm_type,utm_medium,utm_campaign_name,br_rating,Deal_Name,Exchange_Rate,Currency,Stage,id,utm_ad_id,ID_Classlife,utm_campaign_id,Importe_pagado,br_score,utm_perfil,C_digo_descuento,L_nea_de_Negocio,utm_source,Descuento,Closing_Date,utm_adset_id,utm_estrategia,tipo_conversion,Amount,Probability,Contact_Name.id,Pipeline,Competencia,utm_term,utm_channel,Tipolog_a_de_cliente,Created_Date,Modified_Time,ID_Lead,Fecha_hora_Pagado_NE,Fecha_hora_Anulaci_n,Nacionalidad1,lead_correlation_id,id_unico,Tipolog_a_del_alumno1,Contact_Name,Created_Time,ID_clientify,Modalidad_de_curso'\n    )\n)\n",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Deals/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": "@concat('JsaZohoDeals_', string(variables('PageCounter')), '.json')"
											}
										}
									]
								},
								{
									"name": "GetNextPageTokenDeals",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopydataZohoDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Deals/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": "@concat('JsaZohoDeals_', string(variables('PageCounter')), '.json')"
											}
										}
									}
								},
								{
									"name": "Set NextPageTokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextPageToken",
										"value": {
											"value": "@activity('GetNextPageTokenDeals').output.firstRow.info.next_page_token",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LogtokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set NextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Log_Token",
										"value": {
											"value": "@string(variables('NextPageToken'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PageCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "WebZohoAPI",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://accounts.zoho.eu/oauth/v2/token",
							"body": {
								"value": "@concat('client_id=', pipeline().parameters.client_id, \n        '&client_secret=', pipeline().parameters.client_secret,\n        '&refresh_token=', pipeline().parameters.refresh_token,\n        '&grant_type=refresh_token')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set variable Users Leads",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "WebActivityName",
							"value": {
								"value": "@activity('WebZohoAPI').output.access_token\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@pipeline().parameters.TokenStartTime",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Page Counter and NextpageToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "UntilDeals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "PageCounter",
									"value": {
										"type": "Expression",
										"content": "@variables('PageCounter')"
									}
								},
								{
									"key": "NextPageToken",
									"value": {
										"type": "Expression",
										"content": "@variables('NextPageToken')"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "7"
					},
					"AccessToken": {
						"type": "string"
					},
					"PageCounter": {
						"type": "string"
					},
					"IfModifiedSince": {
						"type": "string"
					},
					"NextPageToken": {
						"type": "string"
					},
					"TokenStartTime": {
						"type": "string"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					},
					"TokenStartTime": {
						"type": "String"
					},
					"AccessToken": {
						"type": "String"
					},
					"NextPageTokenParent": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Zoho_API')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Child_Leads_38b')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PageCounterParent",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable Users Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@pipeline().parameters.PageCounter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "NextPageTokenParent",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable Users Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NextPageToken",
							"value": {
								"value": "@pipeline().parameters.NextPageToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UntilLeads",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "NextPageTokenParent",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "PageCounterParent",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(\n  or(\n    equals(variables('NextPageToken'), null),\n    equals(trim(variables('NextPageToken')), '')\n  ),\n  greater(\n    div(sub(ticks(utcnow()), ticks(pipeline().parameters.TokenStartTime)), 10000000),\n    3300\n  )\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopydataZohoDeals",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"Authorization": {
													"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
													"type": "Expression"
												},
												"If-Modified-Since": {
													"value": "@pipeline().parameters.IfModifiedSince",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Zoho_API",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@if(\n    or(\n        equals(variables('NextPageToken'), null),\n        equals(variables('NextPageToken'), '')\n    ),\n    concat(\n        'https://www.zohoapis.eu/crm/v7/Leads?per_page=200&page=',\n        string(variables('PageCounter')),\n        '&fields=Created_Date,Apellido_2,Description,device,Email,First_Name,id,id_producto,id_programa,Last_Name,lead_correlation_id,lead_rating,lead_scoring,Lead_Source,Lead_Status,Mobile,Motivos_de_perdida,Nacionalidad,Owner,Phone,Provincia,Residencia,Sexo,source,Tipolog_a_de_cliente,Typo_Conversion,utm_ad_id,utm_adset_id,utm_campaign_id,utm_campaign_name,utm_channel,utm_estrategia,utm_medium,utm_perfil,utm_source,utm_term,utm_type,Modified_Time,Created_Time,L_nea_de_Negocio,Oportunidad_Asociada,ID_Clientify,Modalidad_de_curso,Sede'\n    ),\n    concat(\n        'https://www.zohoapis.eu/crm/v7/Leads?per_page=200&page_token=',\n        variables('NextPageToken'),\n        '&fields=Created_Date,Apellido_2,Description,device,Email,First_Name,id,id_producto,id_programa,Last_Name,lead_correlation_id,lead_rating,lead_scoring,Lead_Source,Lead_Status,Mobile,Motivos_de_perdida,Nacionalidad,Owner,Phone,Provincia,Residencia,Sexo,source,Tipolog_a_de_cliente,Typo_Conversion,utm_ad_id,utm_adset_id,utm_campaign_id,utm_campaign_name,utm_channel,utm_estrategia,utm_medium,utm_perfil,utm_source,utm_term,utm_type,Modified_Time,Created_Time,L_nea_de_Negocio,Oportunidad_Asociada,ID_Clientify,Modalidad_de_curso,Sede'\n    )\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Leads/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoLeads_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "GetNextPageTokenDeals",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopydataZohoDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Leads/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoLeads_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Set NextPageTokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextPageToken",
										"value": {
											"value": "@activity('GetNextPageTokenDeals').output.firstRow.info.next_page_token",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LogtokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set NextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Log_Token",
										"value": {
											"value": "@string(variables('NextPageToken'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PageCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "WebZohoAPI",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://accounts.zoho.eu/oauth/v2/token",
							"body": {
								"value": "@concat('client_id=', pipeline().parameters.client_id, \n        '&client_secret=', pipeline().parameters.client_secret,\n        '&refresh_token=', pipeline().parameters.refresh_token,\n        '&grant_type=refresh_token')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set variable Users Leads",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "WebActivityName",
							"value": {
								"value": "@activity('WebZohoAPI').output.access_token\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@pipeline().parameters.TokenStartTime",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Page Counter and NextpageToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "UntilLeads",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "PageCounter",
									"value": {
										"type": "Expression",
										"content": "@variables('PageCounter')"
									}
								},
								{
									"key": "NextPageToken",
									"value": {
										"type": "Expression",
										"content": "@variables('NextPageToken')"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "7"
					},
					"AccessToken": {
						"type": "string"
					},
					"PageCounter": {
						"type": "string"
					},
					"IfModifiedSince": {
						"type": "string"
					},
					"NextPageToken": {
						"type": "string"
					},
					"TokenStartTime": {
						"type": "string"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					},
					"TokenStartTime": {
						"type": "String"
					},
					"AccessToken": {
						"type": "String"
					},
					"NextPageTokenParent": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Zoho_API')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Child_Zoho_Deals_38b')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PageCounterParent",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@pipeline().parameters.PageCounter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "NextPageTokenParent",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NextPageToken",
							"value": {
								"value": "@pipeline().parameters.NextPageToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UntilDeals",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "NextPageTokenParent",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "PageCounterParent",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(\n  equals(pipeline().parameters.NextPageToken, null),\n  equals(trim(variables('NextPageToken')), '')\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopydataZohoDeals",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"Authorization": {
													"value": "@concat('Bearer ', pipeline().parameters.AccessToken)",
													"type": "Expression"
												},
												"If-Modified-Since": {
													"value": "@pipeline().parameters.IfModifiedSince",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Zoho_API",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@if(\n    or(equals(variables('NextPageToken'), null), equals(variables('NextPageToken'), '')),\n    'https://www.zohoapis.eu/crm/v7/Deals?per_page=200&fields=Motivo_p_rdida_B2C,ID_Producto,Owner,Motivo_p_rdida_B2B,Residencia1,utm_type,utm_medium,utm_campaign_name,br_rating,Deal_Name,Exchange_Rate,Currency,Stage,id,utm_ad_id,ID_Classlife,utm_campaign_id,Importe_pagado,br_score,utm_perfil,C_digo_descuento,L_nea_de_Negocio,utm_source,Descuento,Closing_Date,utm_adset_id,utm_estrategia,tipo_conversion,Amount,Probability,Contact_Name.id,Pipeline,Competencia,utm_term,utm_channel,Tipolog_a_de_cliente,Created_Date,Modified_Time,ID_Lead,Fecha_hora_Pagado_NE,Fecha_hora_Anulaci_n,Nacionalidad1,lead_correlation_id,id_unico,Tipolog_a_del_alumno1,Contact_Name,Created_Time,ID_clientify,Modalidad_de_curso',\n    concat('https://www.zohoapis.eu/crm/v7/Deals?per_page=200&page_token=', variables('NextPageToken'), '&fields=Motivo_p_rdida_B2C,ID_Producto,Owner,Motivo_p_rdida_B2B,Residencia1,utm_type,utm_medium,utm_campaign_name,br_rating,Deal_Name,Exchange_Rate,Currency,Stage,id,utm_ad_id,ID_Classlife,utm_campaign_id,Importe_pagado,br_score,utm_perfil,C_digo_descuento,L_nea_de_Negocio,utm_source,Descuento,Closing_Date,utm_adset_id,utm_estrategia,tipo_conversion,Amount,Probability,Contact_Name.id,Pipeline,Competencia,utm_term,utm_channel,Tipolog_a_de_cliente,Created_Date,Modified_Time,ID_Lead,Fecha_hora_Pagado_NE,Fecha_hora_Anulaci_n,Nacionalidad1,lead_correlation_id,id_unico,Tipolog_a_del_alumno1,Contact_Name,Created_Time,ID_clientify,Modalidad_de_curso')\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": "@concat('JsaZohoDeals_', string(variables('PageCounter')), '.json')"
											}
										}
									]
								},
								{
									"name": "GetNextPageTokenDeals",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopydataZohoDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": "@concat('JsaZohoDeals_', string(variables('PageCounter')), '.json')"
											}
										}
									}
								},
								{
									"name": "Set NextPageTokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextPageToken",
										"value": {
											"value": "@activity('GetNextPageTokenDeals').output.firstRow.info.next_page_token",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LogtokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set NextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Log_Token",
										"value": {
											"value": "@string(variables('NextPageToken'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PageCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "NextPageToken",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "LogtokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pipelineReturnValue",
										"value": [
											{
												"key": "NextPageToken",
												"value": {
													"type": "Expression",
													"content": "@variables('NextPageToken')"
												}
											}
										],
										"setSystemVariable": true
									}
								},
								{
									"name": "PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "NextPageToken",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pipelineReturnValue",
										"value": [
											{
												"key": "PageCounter",
												"value": {
													"type": "Expression",
													"content": "@variables('PageCounter')"
												}
											}
										],
										"setSystemVariable": true
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "7"
					},
					"AccessToken": {
						"type": "string"
					},
					"PageCounter": {
						"type": "string"
					},
					"IfModifiedSince": {
						"type": "string"
					},
					"NextPageToken": {
						"type": "string"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					},
					"TokenStartTime": {
						"type": "String"
					},
					"AccessToken": {
						"type": "String"
					},
					"NextPageTokenParent": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Zoho"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Zoho_API')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Classlife919')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until Enroll groups",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "If Condition Delete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "WebClasslifeEnroll_groups",
									"description": "Activity web that calls the endpoint enroll_groups",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/enroll_groups?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ClasslifeProductos",
									"description": "ClasslifeEnrollGroups",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeEnroll_groups",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('enroll_groups?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/enroll_groups/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeProductos_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ClasslifeProductos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeEnroll_groups').output.data.items)\n",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "CheckFolderExists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adsl_json_delete",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/classlife/')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Condition Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('CheckFolderExists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Files Enroll Groups",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/enroll_groups/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files Enrollments",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/enrollments/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files Admissions",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/admissions/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files Receipts",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/receipts/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files students",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/students/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Until Admissions",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "2 Reboot PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "1 PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "1 TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "1 TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Admissions",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "1 Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "1 PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeAdmissions').output.data.items)\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebClasslifeAdmissions",
									"description": "Activity web that calls the endpoint Admissions",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/admissions?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Admissions",
									"description": "Admissions",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeAdmissions",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('admissions?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/admissions/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeAdmissions_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Until Enrollments",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Reboot PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "2 PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "2 TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "2 TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Enrollments",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "2 Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "2 PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeEnrollments').output.data.items)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebClasslifeEnrollments",
									"description": "Activity web that calls the endpoint Enrollments",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/enrollments?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Enrollments",
									"description": "Enrollments",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeEnrollments",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('enrollments?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/enrollments/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeEnrollments_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Until Students",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "1 Reboot PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "3 PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "3 TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "3 TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ClasslifeStudents",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "3 Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "3 PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeStudents').output.data.items)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebClasslifeStudents",
									"description": "Activity web that calls the endpoint Students",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/students?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ClasslifeStudents",
									"description": "ClasslifeStudents",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeStudents",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('students?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/students/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeStudents_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Until Receipts",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "3 Reboot PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "4 PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "4 TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "4 TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Receipts",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "4 Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "4 PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeReceipts').output.data.items)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebClasslifeReceipts",
									"description": "Activity web that calls the endpoint Receipts",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/receipts?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Receipts",
									"description": "Receipts",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeReceipts",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('receipts?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/receipts/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeReceipts_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Reboot PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until Enroll groups",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@int(1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "1 Reboot PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until Enrollments",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@int(1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "2 Reboot PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until Students",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@int(1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "3 Reboot PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until Admissions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@int(1)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"API_CLIENT": {
						"type": "string",
						"defaultValue": "919"
					},
					"API_KEY": {
						"type": "string",
						"defaultValue": "C!Fd4e045d16e5544"
					},
					"limit": {
						"type": "string",
						"defaultValue": "200"
					}
				},
				"variables": {
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					},
					"NextItem": {
						"type": "Integer"
					},
					"WebActivityRequest": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-03T16:56:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json_delete')]",
				"[concat(variables('factoryId'), '/datasets/ds_Classlife')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Classlife931')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until Admissions",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "1 Reboot PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "1 PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "1 TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "1 TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Admissions",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "1 Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "1 PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeAdmissions').output.data.items)\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebClasslifeAdmissions",
									"description": "Activity web that calls the endpoint Admissions",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/admissions?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Admissions",
									"description": "Admissions",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeAdmissions",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('admissions?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/admissions/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeAdmissions_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "1 Reboot PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until Enrollments",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@int(1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Until Enroll groups",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "If Condition Delete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "WebClasslifeEnroll_groups",
									"description": "Activity web that calls the endpoint enroll_groups",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/enroll_groups?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ClasslifeProductos",
									"description": "ClasslifeEnrollGroups",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeEnroll_groups",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('enroll_groups?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/enroll_groups/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeProductos_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ClasslifeProductos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeEnroll_groups').output.data.items)\n",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "CheckFolderExists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adsl_json_delete",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/classlife_931/')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Condition Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('CheckFolderExists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Files Enroll Groups",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/enroll_groups/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files Enrollments",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/enrollments/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files Admissions",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/admissions/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files Receipts",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/receipts/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files students",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/students/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files students Cleaned",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete Files students",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/students/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'),'/','student_cleaned')",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Until Enrollments",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Reboot PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "2 PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "2 TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "2 TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Enrollments",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "2 Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "2 PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeEnrollments').output.data.items)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebClasslifeEnrollments",
									"description": "Activity web that calls the endpoint Enrollments",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/enrollments?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Enrollments",
									"description": "Enrollments",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeEnrollments",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('enrollments?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/enrollments/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeEnrollments_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Reboot PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until Enroll groups",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@int(1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Until Receipts",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "2 Reboot PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "4 PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "4 TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "4 TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Receipts",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "4 Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "4 PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeReceipts').output.data.items)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebClasslifeReceipts",
									"description": "Activity web that calls the endpoint Receipts",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/receipts?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Receipts",
									"description": "Receipts",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeReceipts",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('receipts?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/receipts/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeReceipts_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "2 Reboot PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until Admissions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@int(1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Until Students",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "3 Reboot PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "3 PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "3 TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "3 TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ClasslifeStudents_931_cleaned",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "3 Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "3 PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeStudents').output.data.items)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebClasslifeStudents",
									"description": "Activity web that calls the endpoint Students",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/students?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ClasslifeStudents_931",
									"description": "ClasslifeStudents",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeStudents",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('students?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/students/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeStudents_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "ClasslifeStudents_931_cleaned",
									"description": "ClasslifeStudents",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ClasslifeStudents_931",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['student_id']"
													},
													"sink": {
														"path": "student_id"
													}
												},
												{
													"source": {
														"path": "[['student_full_name']"
													},
													"sink": {
														"path": "student_full_name"
													}
												},
												{
													"source": {
														"path": "[['student_email']"
													},
													"sink": {
														"path": "student_email"
													}
												},
												{
													"source": {
														"path": "[['student_phone']"
													},
													"sink": {
														"path": "student_phone"
													}
												},
												{
													"source": {
														"path": "[['student_registration_date']"
													},
													"sink": {
														"path": "student_registration_date"
													}
												},
												{
													"source": {
														"path": "[['student_active']"
													},
													"sink": {
														"path": "student_active"
													}
												},
												{
													"source": {
														"path": "[['metas']['zoho_id']"
													},
													"sink": {
														"path": "zoho_id"
													}
												},
												{
													"source": {
														"path": "[['metas']['ciudad']"
													},
													"sink": {
														"path": "ciudad"
													}
												},
												{
													"source": {
														"path": "[['metas']['codigo']"
													},
													"sink": {
														"path": "codigo"
													}
												},
												{
													"source": {
														"path": "[['metas']['pais']"
													},
													"sink": {
														"path": "pais"
													}
												},
												{
													"source": {
														"path": "[['metas']['edad']"
													},
													"sink": {
														"path": "edad"
													}
												},
												{
													"source": {
														"path": "[['metas']['direccion']"
													},
													"sink": {
														"path": "direccion"
													}
												},
												{
													"source": {
														"path": "[['metas']['nacimiento']"
													},
													"sink": {
														"path": "nacimiento"
													}
												}
											],
											"collectionReference": "$['data']['items']"
										}
									},
									"inputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/students/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeStudents_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/students/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'),'/','student_cleaned')",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeStudents_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "3 Reboot PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until Receipts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@int(1)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"API_CLIENT": {
						"type": "string",
						"defaultValue": "931"
					},
					"API_KEY": {
						"type": "string",
						"defaultValue": "C!F5ec7888d40c7e8"
					},
					"limit": {
						"type": "string",
						"defaultValue": "500"
					}
				},
				"variables": {
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					},
					"NextItem": {
						"type": "Integer"
					},
					"WebActivityRequest": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-09T17:21:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json_delete')]",
				"[concat(variables('factoryId'), '/datasets/ds_Classlife')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClienitfyOdooSilver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ClientifyDealsSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'ClientifyDealsSilver')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ClientifyDealsIdForDeleteSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks,'ClientifyDealsIdForDeleteSilver')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "OdooLeadSilver",
						"type": "DatabricksNotebook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'OdooLeadSilver_New')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ClientifyDealsSilver_Ciep",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ClientifyDealsSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks,'ClientifyDealsSilverCIEP')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ClientifyDealsSilver_Fp",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ClientifyDealsSilver_Ciep",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks,'ClientifyDealsSilverFP')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"silver_storage_databricks": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Lakehouse/Silver"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClienitfyOdooSilver_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "NotebookClientifyDealsSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Lakehouse/Silver/ClientifyDealsSilver"
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "NotebookClientifyDealsIdForDeleteSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Lakehouse/Silver/ClientifyDealsIdForDeleteSilver"
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "NotebookOdooLeadSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Lakehouse/Silver/OdooLeadSilver_New"
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Lakehouse/Silver"
				},
				"annotations": [],
				"lastPublishTime": "2025-01-15T14:08:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClientifyDealsBronze')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataClientifyBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebGetToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Token ',activity('WebGetToken').output.value)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl": "$.next"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Clientify",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/mob/deals/?serializer=DealDynamic&page_size=250&fields=id, owner, owner_name, name, amount, amount_user, currency, contact, contact_name, contact_email, contact_phone, contact_medium, contact_source, created, modified, expected_closed_date, actual_closed_date, company, company_name, source, deal_source, status, lost_reason, status_desc, probability, probability_desc, pipeline_stage, pipeline_stage_desc, pipeline, pipeline_desc, custom_fields&modified[gte]=',formatDateTime(addDays(utcnow(),int(concat('-',string(pipeline().parameters.dayToLoad)))),'MM-dd-yyyy'),'&modified[lt]=',formatDateTime(addDays(utcnow(),+1),'MM-dd-yyyy'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/clientify/deals/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "clientifydeals.json"
								}
							}
						]
					},
					{
						"name": "WebGetToken",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousepro.vault.azure.net/secrets/clientifytoken/5aaa9d80ef79468aa26b888ef06f7541?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "WebGetToken CIEP",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousepro.vault.azure.net/secrets/clientifyCIEP/60c9376c8f074e028c48ac196e2126dd?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "CopyDataClientifyBronze_Ciep",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebGetToken CIEP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Token ',activity('WebGetToken CIEP').output.value)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl": "$.next"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Clientify_Ciep",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/mob/deals/?serializer=DealDynamic&page_size=250&fields=id, owner, owner_name, name, amount, amount_user, currency, contact, contact_name, contact_email, contact_phone, contact_medium, contact_source, created, modified, expected_closed_date, actual_closed_date, company, company_name, source, deal_source, status, lost_reason, status_desc, probability, probability_desc, pipeline_stage, pipeline_stage_desc, pipeline, pipeline_desc, custom_fields&modified[gte]=',formatDateTime(addDays(utcnow(),int(concat('-',string(pipeline().parameters.dayToLoad)))),'MM-dd-yyyy'),'&modified[lt]=',formatDateTime(addDays(utcnow(),+1),'MM-dd-yyyy'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/clientify/deals/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "clientifydealsciep.json"
								}
							}
						]
					},
					{
						"name": "WebGetToken FP",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousepro.vault.azure.net/secrets/clientifyFP/ef96be5f9d174ee189c77fc0f81c39bd?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "CopyDataClientifyBronze_Fp",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebGetToken FP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Token ',activity('WebGetToken FP').output.value)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl": "$.next"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Clientify_Fp",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/mob/deals/?serializer=DealDynamic&page_size=250&fields=id, owner, owner_name, name, amount, amount_user, currency, contact, contact_name, contact_email, contact_phone, contact_medium, contact_source, created, modified, expected_closed_date, actual_closed_date, company, company_name, source, deal_source, status, lost_reason, status_desc, probability, probability_desc, pipeline_stage, pipeline_stage_desc, pipeline, pipeline_desc, custom_fields&modified[gte]=',formatDateTime(addDays(utcnow(),int(concat('-',string(pipeline().parameters.dayToLoad)))),'MM-dd-yyyy'),'&modified[lt]=',formatDateTime(addDays(utcnow(),+1),'MM-dd-yyyy'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/clientify/deals/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "clientifydealsfp.json"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Old"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-23T10:53:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Clientify')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_Clientify_Ciep')]",
				"[concat(variables('factoryId'), '/datasets/ds_Clientify_Fp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClientifyDealsBronzeCIEP_FP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataClientifyBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebGetToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Token ',activity('WebGetToken').output.value)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl": "$.next"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Clientify",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/mob/deals/?serializer=DealDynamic&page_size=250&fields=id, owner, owner_name, name, amount, amount_user, currency, contact, contact_name, contact_email, contact_phone, contact_medium, contact_source, created, modified, expected_closed_date, actual_closed_date, company, company_name, source, deal_source, status, lost_reason, status_desc, probability, probability_desc, pipeline_stage, pipeline_stage_desc, pipeline, pipeline_desc, custom_fields&modified[gte]=',formatDateTime(addDays(utcnow(),int(concat('-',string(pipeline().parameters.dayToLoad)))),'MM-dd-yyyy'),'&modified[lt]=',formatDateTime(addDays(utcnow(),+1),'MM-dd-yyyy'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/clientify/deals/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "clientifydeals.json"
								}
							}
						]
					},
					{
						"name": "WebGetToken",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousedev.vault.azure.net/secrets/clientifytoken/71f1cbb9aa6a4569ba657a15bcbd0350?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "WebGetToken CIEP",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousedev.vault.azure.net/secrets/clientifyCIEP/2dc5256643a6405392ec37abd7b74d55?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "CopyDataClientifyBronze_Ciep",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebGetToken CIEP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Token ',activity('WebGetToken CIEP').output.value)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl": "$.next"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Clientify_Ciep",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/mob/deals/?serializer=DealDynamic&page_size=250&fields=id, owner, owner_name, name, amount, amount_user, currency, contact, contact_name, contact_email, contact_phone, contact_medium, contact_source, created, modified, expected_closed_date, actual_closed_date, company, company_name, source, deal_source, status, lost_reason, status_desc, probability, probability_desc, pipeline_stage, pipeline_stage_desc, pipeline, pipeline_desc, custom_fields&modified[gte]=',formatDateTime(addDays(utcnow(),int(concat('-',string(pipeline().parameters.dayToLoad)))),'MM-dd-yyyy'),'&modified[lt]=',formatDateTime(addDays(utcnow(),+1),'MM-dd-yyyy'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/clientify/deals/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "clientifydealsciep.json"
								}
							}
						]
					},
					{
						"name": "WebGetToken FP",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousedev.vault.azure.net/secrets/clientifytokenFP/4498a027b1af41fd8d8fe01dc9f45b46?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "CopyDataClientifyBronze_Fp",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebGetToken FP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Token ',activity('WebGetToken FP').output.value)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl": "$.next"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Clientify_Fp",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/mob/deals/?serializer=DealDynamic&page_size=250&fields=id, owner, owner_name, name, amount, amount_user, currency, contact, contact_name, contact_email, contact_phone, contact_medium, contact_source, created, modified, expected_closed_date, actual_closed_date, company, company_name, source, deal_source, status, lost_reason, status_desc, probability, probability_desc, pipeline_stage, pipeline_stage_desc, pipeline, pipeline_desc, custom_fields&modified[gte]=',formatDateTime(addDays(utcnow(),int(concat('-',string(pipeline().parameters.dayToLoad)))),'MM-dd-yyyy'),'&modified[lt]=',formatDateTime(addDays(utcnow(),+1),'MM-dd-yyyy'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/clientify/deals/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "clientifydealsfp.json"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Old"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Clientify')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_Clientify_Ciep')]",
				"[concat(variables('factoryId'), '/datasets/ds_Clientify_Fp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClientifyDealsBronzeF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataClientifyBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebGetToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Token ',activity('WebGetToken').output.value)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl": "$.next"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Clientify",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/deals/?page_size=250&modified[gte]=',formatDateTime(addDays(utcnow(),int(concat('-',string(pipeline().parameters.dayToLoad)))),'MM-dd-yyyy'),'&modified[lt]=',formatDateTime(addDays(utcnow(),+1),'MM-dd-yyyy'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehousef0/clientify/deals/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "clientifydeals.json"
								}
							}
						]
					},
					{
						"name": "WebGetToken",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousedev.vault.azure.net/secrets/clientifytoken/71f1cbb9aa6a4569ba657a15bcbd0350?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"folder": {
					"name": "LakehouseF0/BronzeF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Clientify')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClientifyDealsBronzeF0_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataClientifyBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebGetToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:01.500",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Token ',activity('WebGetToken').output.value)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl": "$.next"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Clientify",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/deals/?page_size=250&created[gte]=09-01-2023&created[lt]=',formatDateTime(addDays(utcnow(),+1),'MM-dd-yyyy'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehousef0/clientify/deals/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "clientifydeals.json"
								}
							}
						]
					},
					{
						"name": "WebGetToken",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousedev.vault.azure.net/secrets/clientifytoken/71f1cbb9aa6a4569ba657a15bcbd0350?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/BronzeF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Clientify')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClientifyDealsBronzeF0_IdForDelete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebGetToken",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousedev.vault.azure.net/secrets/clientifytoken/71f1cbb9aa6a4569ba657a15bcbd0350?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "CopyDataClientifyIdForDeleteBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebGetToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Token ',activity('WebGetToken').output.value)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl": "$.next"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Clientify",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": "https://api.clientify.net/v1/mob/deals/?serializer=DealDynamic&page_size=250&fields=id"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehousef0/clientify/idfordelete/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "clientifydealsidfordelete.json"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/BronzeF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Clientify')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClientifyDealsBronzeF0_LostReason')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebGetToken",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousedev.vault.azure.net/secrets/clientifytoken/71f1cbb9aa6a4569ba657a15bcbd0350?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "CopyDataClientifyLostReasonBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebGetToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Token ',activity('WebGetToken').output.value)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl": "$.next"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Clientify",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/mob/deals/?serializer=DealDynamic&page_size=250&fields=id,lost_reason&modified[gte]=',formatDateTime(addDays(utcnow(),int(concat('-',string(pipeline().parameters.dayToLoad)))),'MM-dd-yyyy'),'&modified[lt]=',formatDateTime(addDays(utcnow(),+1),'MM-dd-yyyy'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehousef0/clientify/lostreason/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "clientifydealslostreason.json"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"folder": {
					"name": "LakehouseF0/BronzeF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Clientify')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClientifyDealsBronzeF0_LostReason_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebGetToken",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousedev.vault.azure.net/secrets/clientifytoken/71f1cbb9aa6a4569ba657a15bcbd0350?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "CopyDataClientifyLostReasonBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebGetToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Token ',activity('WebGetToken').output.value)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl": "$.next"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Clientify",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": "https://api.clientify.net/v1/mob/deals/?serializer=DealDynamic&page_size=250&fields=id,lost_reason"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehousef0/clientify/lostreason/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "clientifydealslostreason.json"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/BronzeF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Clientify')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClientifyDealsBronze_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataClientifyBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebGetToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:01.500",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Token ',activity('WebGetToken').output.value)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl": "$.next"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Clientify",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/mob/deals/?serializer=DealDynamic&page_size=250&fields=id, owner, owner_name, name, amount, amount_user, currency, contact, contact_name, contact_email, contact_phone, contact_medium, contact_source, created, modified, expected_closed_date, actual_closed_date, company, company_name, source, deal_source, status, lost_reason, status_desc, probability, probability_desc, pipeline_stage, pipeline_stage_desc, pipeline, pipeline_desc, custom_fields&created[gte]=09-01-2023&created[lt]=',formatDateTime(addDays(utcnow(),+1),'MM-dd-yyyy'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/clientify/deals/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "clientifydeals.json"
								}
							}
						]
					},
					{
						"name": "WebGetToken",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousedev.vault.azure.net/secrets/clientifytoken/71f1cbb9aa6a4569ba657a15bcbd0350?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "WebGetToken CIEP",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousedev.vault.azure.net/secrets/clientifyCIEP/2dc5256643a6405392ec37abd7b74d55?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "CopyDataClientifyBronze_Ciep",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebGetToken CIEP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Token ',activity('WebGetToken CIEP').output.value)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl": "$.next"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Clientify_Ciep",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/mob/deals/?serializer=DealDynamic&page_size=250&fields=id, owner, owner_name, name, amount, amount_user, currency, contact, contact_name, contact_email, contact_phone, contact_medium, contact_source, created, modified, expected_closed_date, actual_closed_date, company, company_name, source, deal_source, status, lost_reason, status_desc, probability, probability_desc, pipeline_stage, pipeline_stage_desc, pipeline, pipeline_desc, custom_fields&created[gte]=09-01-2023&created[lt]=',formatDateTime(addDays(utcnow(),+1),'MM-dd-yyyy'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/clientify/deals/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "clientifydealsciep.json"
								}
							}
						]
					},
					{
						"name": "WebGetToken FP",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousedev.vault.azure.net/secrets/clientifytokenFP/4498a027b1af41fd8d8fe01dc9f45b46?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "CopyDataClientifyBronze_Fp",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebGetToken FP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Token ',activity('WebGetToken FP').output.value)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl": "$.next"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Clientify_Fp",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/mob/deals/?serializer=DealDynamic&page_size=250&fields=id, owner, owner_name, name, amount, amount_user, currency, contact, contact_name, contact_email, contact_phone, contact_medium, contact_source, created, modified, expected_closed_date, actual_closed_date, company, company_name, source, deal_source, status, lost_reason, status_desc, probability, probability_desc, pipeline_stage, pipeline_stage_desc, pipeline, pipeline_desc, custom_fields&created[gte]=09-01-2023&created[lt]=',formatDateTime(addDays(utcnow(),+1),'MM-dd-yyyy'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/clientify/deals/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "clientifydealsfp.json"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Old"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Clientify')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_Clientify_Ciep')]",
				"[concat(variables('factoryId'), '/datasets/ds_Clientify_Fp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClientifyDealsBronze_IdForDelete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebGetToken",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousepro.vault.azure.net/secrets/clientifytoken/5aaa9d80ef79468aa26b888ef06f7541?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "CopyDataClientifyIdForDeleteBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebGetToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Token ',activity('WebGetToken').output.value)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl": "$.next"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Clientify",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": "https://api.clientify.net/v1/mob/deals/?serializer=DealDynamic&page_size=250&fields=id"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/clientify/dealsidfordelete/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "clientifydealsidfordelete.json"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Old"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T23:26:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Clientify')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClientifyDealsGoldF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowClientifyDealsGoldF0",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ClientifyDealsGoldF0",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceClientifyDealsSilverF0": {},
									"sourceVentasGoldF0": {},
									"sinkVentasGoldF0": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/GoldF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_ClientifyDealsGoldF0')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClientifyDealsGoldF0_IdForDelete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataflowClientifyDealsGoldF0_IdForDelete",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ClientifyDealsGoldF0_IdForDelete",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceSalesGold": {},
									"sourceClientifyIdForDeleteSilver": {},
									"sourceSalesGold2": {},
									"sinkSalesGold": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/GoldF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_ClientifyDealsGoldF0_IdForDelete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClientifyDealsGoldF0_LeadsNetosEmail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowClientifyDealsGoldF0_LeadsNetosEmail",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ClientifyDealsGoldF0_LeadsNetosEmail",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceSalesGoldF0": {},
									"sinkSalesGoldF0": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/GoldF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_ClientifyDealsGoldF0_LeadsNetosEmail')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClientifyDealsGoldF0_LeadsNetosPhone')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowClientifyDealsGoldF0_LeadsNetosPhone",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ClientifyDealsGoldF0_LeadsNetosPhone",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceSalesGoldF0": {},
									"sinkSalesGoldF0": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/GoldF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_ClientifyDealsGoldF0_LeadsNetosPhone')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClientifyDealsGoldF0_LostReason')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataflowClientifyDealsGoldF0_LostReason",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ClientifyDealsGoldF0_LostReason",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceSalesGold": {},
									"sourceClientifyLostReasonSilver": {},
									"sourceSalesGold2": {},
									"sinkSalesGold": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/GoldF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_ClientifyDealsGoldF0_LostReason')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClientifyDealsSilverF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowClientifySilver",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ClientifyDealsSilverF0",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceClientifyBronze": {
										"container": "bronze",
										"folder": {
											"value": "@concat('lakehousef0/clientify/deals/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
											"type": "Expression"
										},
										"filename": "clientifydeals.json"
									},
									"sinkClientifySilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/SilverF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_ClientifyDealsSilverF0')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClientifyDealsSilverF0_IdForDelete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataflowClientifyDealsSilverF0_IdForDelete",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ClientifyDealsSilverF0_IdForDelete",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceClientifyIdForDeleteBronze": {
										"container": "bronze",
										"folder": {
											"value": "@concat('lakehousef0/clientify/idfordelete/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
											"type": "Expression"
										},
										"filename": "clientifydealsidfordelete.json"
									},
									"sinkClientifyLostReasonSilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/SilverF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_ClientifyDealsSilverF0_IdForDelete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ClientifyDealsSilverF0_LostReason')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataflowClientifyDealsSilverF0_LostReason",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ClientifyDealsSilverF0_LostReason",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceClientifyLostReasonBronze": {
										"container": "bronze",
										"folder": {
											"value": "@concat('lakehousef0/clientify/lostreason/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
											"type": "Expression"
										},
										"filename": "clientifydealslostreason.json"
									},
									"sinkClientifyLostReasonSilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/SilverF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_ClientifyDealsSilverF0_LostReason')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General919_Classlife')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteClasslife919",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_Classlife919",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ClasslifeProductos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExecuteClasslife919",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'classlife_919/ClasslifeProductos')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ClasslifeStudents",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExecuteClasslife919",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'classlife_919/ClasslifeStudents')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ClasslifeEnrollments",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExecuteClasslife919",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'classlife_919/ClasslifeEnrollments')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ClasslifeReceipts",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExecuteClasslife919",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'classlife_919/ClasslifeReceipts')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ClasslifeAdmissions",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExecuteClasslife919",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'classlife_919/ClasslifeAdmissions')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"reprocessDate": {
						"type": "string",
						"defaultValue": "7"
					},
					"silver_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Silver/"
					}
				},
				"folder": {
					"name": "Lakehouse/General"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-03T16:56:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_Classlife919')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General931_Classlife')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteClasslife931",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_Classlife931",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"API_CLIENT": "931",
								"API_KEY": "C!F5ec7888d40c7e8"
							}
						}
					},
					{
						"name": "ClasslifeProductos_931",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExecuteClasslife931",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'classlife_931/ClasslifeProductos_931')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ClasslifeStudents_931",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExecuteClasslife931",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'classlife_931/ClasslifeStudents_931')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ClasslifeEnrollments_931",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExecuteClasslife931",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'classlife_931/ClasslifeEnrollments_931')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ClasslifeReceipts_931",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExecuteClasslife931",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'classlife_931/ClasslifeReceipts_931')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ClasslifeAdmissions_931",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExecuteClasslife931",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'classlife_931/ClasslifeAdmissions_931')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"silver_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Silver/"
					}
				},
				"folder": {
					"name": "Lakehouse/General"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-09T17:21:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_Classlife931')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_GeneralF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineAircallCallsBronzeF0",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_AircallCallsBronzeF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dayToLoad": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipelineAircallCallsSilverF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineAircallCallsBronzeF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_AircallCallsSilverF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineSalesBronzeF0",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_SalesBronzeF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dayToLoad": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipelineSalesSilverF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineSalesBronzeF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_SalesSilverF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineSalesGoldF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineSalesSilverF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_SalesGoldF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineSalesDWHF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineSalesGoldF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_SalesDWHF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineAircallCallsGoldF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineAircallCallsSilverF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_AircallCallsGoldF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineCallsDWHF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineAircallCallsGoldF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_CallsDWHF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineBudgetBronzeF0",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_BudgetBronzeF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineBudgetGoldF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineBudgetBronzeF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_BudgetGoldF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineBudgetDWHF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineBudgetGoldF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_BudgetDWHF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"folder": {
					"name": "LakehouseF0/GeneralF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_AircallCallsBronzeF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_AircallCallsSilverF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_SalesBronzeF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_SalesSilverF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_SalesGoldF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_SalesDWHF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_AircallCallsGoldF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_CallsDWHF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_BudgetBronzeF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_BudgetGoldF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_BudgetDWHF0')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_GeneralF0_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineAircallCallsBronzeF0Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_AircallCallsBronzeF0_Full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineAircallCallsSilverF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineAircallCallsBronzeF0Full",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_AircallCallsSilverF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineAircallCallsGoldF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineAircallCallsSilverF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_AircallCallsGoldF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineCallsDWHF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineAircallCallsGoldF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_CallsDWHF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineSalesBronzeF0_Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_SalesBronzeF0_Full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineSalesSilverF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineSalesBronzeF0_Full",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_SalesSilverF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineSalesGoldF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineSalesSilverF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_SalesGoldF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineSalesDWHF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineSalesGoldF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_SalesDWHF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineBudgetBronzeF0",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_BudgetBronzeF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineBudgetGoldF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineBudgetBronzeF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_BudgetGoldF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineBudgetDWHF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineBudgetGoldF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_BudgetDWHF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/GeneralF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_AircallCallsBronzeF0_Full')]",
				"[concat(variables('factoryId'), '/pipelines/p_AircallCallsSilverF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_AircallCallsGoldF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_CallsDWHF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_SalesBronzeF0_Full')]",
				"[concat(variables('factoryId'), '/pipelines/p_SalesSilverF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_SalesGoldF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_SalesDWHF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_BudgetBronzeF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_BudgetGoldF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_BudgetDWHF0')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General_Budget_FF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataBudget",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adsl_xlsx",
								"type": "DatasetReference",
								"parameters": {
									"container": "master",
									"folder": "budget_ff",
									"filename": "budget_FF.xlsx",
									"sheetname": "Budget_FF"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": "lakehouse/budget_ff/",
									"filename": {
										"value": "Budget_FF",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Budget_FF_silver",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "CopyDataBudget",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'budget_ff_silver')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Budget_FF_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_escenario_presupuesto_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'fct_budget_ff_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DimEscenarioPresupuestoDWH",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Budget_FF_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.dwh_storage_databricks, 'dim_escenario_presupuesto')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_escenario_presupuesto_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Budget_FF_silver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_escenario_presupuesto_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "fct_budget",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "DimEscenarioPresupuestoDWH",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.dwh_storage_databricks, 'fct_budget')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"silver_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Silver/"
					},
					"gold_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Gold/"
					},
					"dwh_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/DWH/"
					}
				},
				"folder": {
					"name": "Lakehouse/General"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-03T16:56:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_xlsx')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General_Budget_old')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineBudgetBronze",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_BudgetBronze",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BudgetSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExecutePipelineBudgetBronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'BudgetSilver')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecutePipelineBudgetGold_dim",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "BudgetSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_BudgetGold_dim_old",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"gold_storage_databricks": {
									"value": "@pipeline().parameters.gold_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "BudgetGold_fct",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExecutePipelineBudgetGold_dim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'fct_budget_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecutePipelineBudgetDWH",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "BudgetGold_fct",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_BudgetDWH_old",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dwh_storage_databricks": {
									"value": "@pipeline().parameters.dwh_storage_databricks",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"silver_storage_databricks": {
						"type": "string"
					},
					"gold_storage_databricks": {
						"type": "string"
					},
					"dwh_storage_databricks": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Lakehouse/DWH"
				},
				"annotations": [],
				"lastPublishTime": "2025-05-14T10:11:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_BudgetBronze')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]",
				"[concat(variables('factoryId'), '/pipelines/p_BudgetGold_dim_old')]",
				"[concat(variables('factoryId'), '/pipelines/p_BudgetDWH_old')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General_FctBudget_Objet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDatadimPaisBronze",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adsl_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": "master",
									"folder": "dim_pais",
									"filename": "dim_pais.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/dim_pais/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "dim_pais.parquet"
								}
							}
						]
					},
					{
						"name": "DimPaisSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "CopyDatadimPaisBronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'dim_pais_silver')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DimPaisGold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "DimPaisSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_pais_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DimPaisDWH",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "DimPaisGold",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DimNacionalidadGold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.dwh_storage_databricks, 'dim_pais')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DimNacionalidadGold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "DimPaisSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_nacionalidad_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"silver_storage_databricks": {
						"type": "string"
					},
					"gold_storage_databricks": {
						"type": "string"
					},
					"dwh_storage_databricks": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Lakehouse/General/General_dimFijas_Mapeo"
				},
				"annotations": [],
				"lastPublishTime": "2025-04-21T11:58:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General_FctBudget_Objetivos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFctBudgetObjetivosBronze",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adsl_xlsx",
								"type": "DatasetReference",
								"parameters": {
									"container": "master",
									"folder": "budgetobjetivos",
									"filename": "FctBudget.xlsx",
									"sheetname": "FctBudget"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/budgetobjetivos/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "Fct_Budget.parquet"
								}
							}
						]
					},
					{
						"name": "DimPaisSilver",
						"type": "DatabricksNotebook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "CopyDataFctBudgetObjetivosBronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'dim_pais_silver')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DimPaisGold",
						"type": "DatabricksNotebook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "DimPaisSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_pais_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DimPaisDWH",
						"type": "DatabricksNotebook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "DimPaisGold",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DimNacionalidadGold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.dwh_storage_databricks, 'dim_pais')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DimNacionalidadGold",
						"type": "DatabricksNotebook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "DimPaisSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_nacionalidad_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CopyDataDimEscenarioPresupuestoBronze",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adsl_xlsx",
								"type": "DatasetReference",
								"parameters": {
									"container": "master",
									"folder": "budgetobjetivos",
									"filename": "FctBudget.xlsx",
									"sheetname": "DimEscenarioPresupuesto"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/budgetobjetivos/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "Dim_Escenario_Presupuesto.parquet"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"silver_storage_databricks": {
						"type": "string"
					},
					"gold_storage_databricks": {
						"type": "string"
					},
					"dwh_storage_databricks": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Lakehouse/General/General_dimFijas_Mapeo"
				},
				"annotations": [],
				"lastPublishTime": "2025-04-21T11:58:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_xlsx')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineBudgetGeneral",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_Budget_old",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineCallsSalesBronzeSilver_Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_CallsSalesBronzeSilver_Full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipeline_dim_gold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineCallsSalesBronzeSilver_Full",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_dim_gold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipeline_fct_gold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipeline_dim_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_fct_gold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Notebook_DWH",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExecutePipeline_fct_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Lakehouse/DWH/master_execute_notebooks"
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Lakehouse/DWH"
				},
				"annotations": [],
				"lastPublishTime": "2025-05-14T10:11:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_General_Budget_old')]",
				"[concat(variables('factoryId'), '/pipelines/p_CallsSalesBronzeSilver_Full')]",
				"[concat(variables('factoryId'), '/pipelines/p_dim_gold')]",
				"[concat(variables('factoryId'), '/pipelines/p_fct_gold')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General_MapeoEstudio')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataMapeoEstudio",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adsl_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": "master",
									"folder": "mapeo",
									"filename": "mapeo_estudio.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/mapeo_estudio/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "mapeo_estudio.parquet"
								}
							}
						]
					},
					{
						"name": "MapeoEstudioSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "CopyDataMapeoEstudio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'mapeo_estudio_silver')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "MapeoEstudioGold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "MapeoEstudioSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'mapeo_estudio_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"silver_storage_databricks": {
						"type": "string"
					},
					"gold_storage_databricks": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Lakehouse/General/General_dimFijas_Mapeo"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General_MapeoModalidad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataMapeoModalidad",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adsl_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": "master",
									"folder": "mapeo",
									"filename": "mapeo_modalidad.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/mapeo_modalidad/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "mapeo_modalidad.parquet"
								}
							}
						]
					},
					{
						"name": "MapeoModalidadSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "CopyDataMapeoModalidad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'mapeo_modalidad_silver')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "MapeoModalidadGold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "MapeoModalidadSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'mapeo_modalidad_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"silver_storage_databricks": {
						"type": "string"
					},
					"gold_storage_databricks": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Lakehouse/General/General_dimFijas_Mapeo"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General_MapeoOrigenCampania')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataMapeoOrigenCampania",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adsl_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": "master",
									"folder": "mapeo",
									"filename": "mapeo_origen_campania.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/mapeo_origen_campania/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "mapeo_origen_campania.parquet"
								}
							}
						]
					},
					{
						"name": "MapeoOrigenCampaniaSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "CopyDataMapeoOrigenCampania",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'mapeo_origen_campania_silver')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "NotebookMapeoOrigenCampaniaGold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "MapeoOrigenCampaniaSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'mapeo_origen_campania_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"silver_storage_databricks": {
						"type": "string"
					},
					"gold_storage_databricks": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Lakehouse/General/General_dimFijas_Mapeo"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General_MapeoSede')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataMapeoSede",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adsl_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": "master",
									"folder": "mapeo",
									"filename": "mapeo_sede.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/mapeo_sede/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "mapeo_sede.parquet"
								}
							}
						]
					},
					{
						"name": "MapeoSedeSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "CopyDataMapeoSede",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'mapeo_sede_silver')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "MapeoSedeGold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "MapeoSedeSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'mapeo_sede_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"silver_storage_databricks": {
						"type": "string"
					},
					"gold_storage_databricks": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Lakehouse/General/General_dimFijas_Mapeo"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General_Metrodora')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dim gold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Tablon_Leads_and_DealsSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_dim_gold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"gold_storage_databricks": {
									"value": "@pipeline().parameters.gold_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Fct gold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Dim gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_fct_gold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"gold_storage_databricks": {
									"value": "@pipeline().parameters.gold_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Notebook_DWH",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.dwh_storage_databricks, 'master_execute_notebooks')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Zoho_Fisiofocus_Full",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Modified Since",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_Zoho_Fisiofocus",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"reprocessDate": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								},
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Classlife919Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General919_Classlife",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"reprocessDate": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								},
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Dim Fijas",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Tablon_Leads_and_DealsSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_dimFijas_Mapeo",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								},
								"gold_storage_databricks": {
									"value": "@pipeline().parameters.gold_storage_databricks",
									"type": "Expression"
								},
								"dwh_storage_databricks": {
									"value": "@pipeline().parameters.dwh_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Wait",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Fct gold",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Budget General_FF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 15
						}
					},
					{
						"name": "Auxiliar Periodificacion",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook_DWH",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_Auxiliar_periodificacion",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"gold_storage_databricks": {
									"value": "@pipeline().parameters.gold_storage_databricks",
									"type": "Expression"
								},
								"dwh_storage_databricks": {
									"value": "@pipeline().parameters.dwh_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Budget General_FF",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Dim Fijas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_Budget_FF",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								},
								"gold_storage_databricks": {
									"value": "@pipeline().parameters.gold_storage_databricks",
									"type": "Expression"
								},
								"dwh_storage_databricks": {
									"value": "@pipeline().parameters.dwh_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Classlife931Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General931_Classlife",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Zoho_FP_38b_Full",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Modified Since",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_Zoho_FP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"reprocessDate": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								},
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Tablon_Leads_and_DealsSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Zoho_Fisiofocus_Full",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Classlife919Full",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Zoho_FP_38b_Full",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Classlife931Full",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'Tablon_Leads_and_Deals')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "If Modified Since",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "If-Modified-Since",
							"value": {
								"value": "@formatDateTime(addDays(utcnow(), if(equals(pipeline().parameters.dayToLoad, ''), -7, sub(0, int(pipeline().parameters.dayToLoad)))), 'yyyy-MM-ddTHH:mm:ssZ')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@utcNow()\n",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					},
					"silver_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Silver/"
					},
					"gold_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Gold/"
					},
					"dwh_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/DWH/"
					}
				},
				"variables": {
					"If-Modified-Since": {
						"type": "String"
					},
					"TokenStartTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Master"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-03T16:56:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_dim_gold')]",
				"[concat(variables('factoryId'), '/pipelines/p_fct_gold')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]",
				"[concat(variables('factoryId'), '/pipelines/p_General_Zoho_Fisiofocus')]",
				"[concat(variables('factoryId'), '/pipelines/p_General919_Classlife')]",
				"[concat(variables('factoryId'), '/pipelines/p_General_dimFijas_Mapeo')]",
				"[concat(variables('factoryId'), '/pipelines/p_Auxiliar_periodificacion')]",
				"[concat(variables('factoryId'), '/pipelines/p_General_Budget_FF')]",
				"[concat(variables('factoryId'), '/pipelines/p_General931_Classlife')]",
				"[concat(variables('factoryId'), '/pipelines/p_General_Zoho_FP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General_Zoho_FP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Contacts 38b",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Deals 38b",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute Leads 38b",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_Parent_Contacts_Zoho_38b",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"client_id": {
									"value": "@pipeline().parameters.client_id",
									"type": "Expression"
								},
								"client_secret": {
									"value": "@pipeline().parameters.client_secret",
									"type": "Expression"
								},
								"refresh_token": {
									"value": "@pipeline().parameters.refresh_token",
									"type": "Expression"
								},
								"reprocessDate": {
									"value": "@pipeline().parameters.reprocessDate",
									"type": "Expression"
								},
								"AccessToken": {
									"value": "@variables('WebActivityName')",
									"type": "Expression"
								},
								"NextPageToken": {
									"value": "@variables('NextPageToken')",
									"type": "Expression"
								},
								"IfModifiedSince": {
									"value": "@variables('If-Modified-Since')",
									"type": "Expression"
								},
								"TokenStartTime": {
									"value": "@variables('TokenStartTime')",
									"type": "Expression"
								},
								"PageCounter": {
									"value": "@variables('PageCounter')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "FP_Bronze_Silver_38b",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Contacts 38b",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute Users 38b",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute Ciclos 38b",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute Programas 38b",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_Zoho_FP_Silver_38b",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "If Modified Since Date Leads",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "If-Modified-Since",
							"value": {
								"value": "@formatDateTime(addDays(utcnow(), if(equals(pipeline().parameters.reprocessDate, ''), -7, sub(0, int(pipeline().parameters.reprocessDate)))), 'yyyy-MM-ddTHH:mm:ssZ')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@utcNow()\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Deals 38b",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Modified Since Date Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_Parent_Deals_Zoho_38b",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"client_id": {
									"value": "@pipeline().parameters.client_id",
									"type": "Expression"
								},
								"client_secret": {
									"value": "@pipeline().parameters.client_secret",
									"type": "Expression"
								},
								"refresh_token": {
									"value": "@pipeline().parameters.refresh_token",
									"type": "Expression"
								},
								"reprocessDate": {
									"value": "@pipeline().parameters.reprocessDate",
									"type": "Expression"
								},
								"AccessToken": {
									"value": "@variables('WebActivityName')",
									"type": "Expression"
								},
								"NextPageToken": {
									"value": "@variables('NextPageToken')",
									"type": "Expression"
								},
								"IfModifiedSince": {
									"value": "@variables('If-Modified-Since')",
									"type": "Expression"
								},
								"TokenStartTime": {
									"value": "@variables('TokenStartTime')",
									"type": "Expression"
								},
								"PageCounter": {
									"value": "@variables('PageCounter')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Leads 38b",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Modified Since Date Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_Parent_Leads_Zoho_38b",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"client_id": {
									"value": "@pipeline().parameters.client_id",
									"type": "Expression"
								},
								"client_secret": {
									"value": "@pipeline().parameters.client_secret",
									"type": "Expression"
								},
								"refresh_token": {
									"value": "@pipeline().parameters.refresh_token",
									"type": "Expression"
								},
								"reprocessDate": {
									"value": "@pipeline().parameters.reprocessDate",
									"type": "Expression"
								},
								"AccessToken": {
									"value": "@variables('WebActivityName')",
									"type": "Expression"
								},
								"NextPageToken": {
									"value": "@variables('NextPageToken')",
									"type": "Expression"
								},
								"IfModifiedSince": {
									"value": "@variables('If-Modified-Since')",
									"type": "Expression"
								},
								"TokenStartTime": {
									"value": "@variables('TokenStartTime')",
									"type": "Expression"
								},
								"PageCounter": {
									"value": "@variables('PageCounter')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Users 38b",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Deals 38b",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute Leads 38b",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_Parent_Users_Zoho_38b",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"client_id": {
									"value": "@pipeline().parameters.client_id",
									"type": "Expression"
								},
								"client_secret": {
									"value": "@pipeline().parameters.client_secret",
									"type": "Expression"
								},
								"refresh_token": {
									"value": "@pipeline().parameters.refresh_token",
									"type": "Expression"
								},
								"reprocessDate": {
									"value": "@pipeline().parameters.reprocessDate",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Ciclos 38b",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Deals 38b",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute Leads 38b",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_Parent_Ciclos_Zoho_38b",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"client_id": {
									"value": "@pipeline().parameters.client_id",
									"type": "Expression"
								},
								"client_secret": {
									"value": "@pipeline().parameters.client_secret",
									"type": "Expression"
								},
								"refresh_token": {
									"value": "@pipeline().parameters.refresh_token",
									"type": "Expression"
								},
								"reprocessDate": {
									"value": "@pipeline().parameters.reprocessDate",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Programas 38b",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Deals 38b",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute Leads 38b",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_Parent_Programas_Zoho_38b",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"client_id": {
									"value": "@pipeline().parameters.client_id",
									"type": "Expression"
								},
								"client_secret": {
									"value": "@pipeline().parameters.client_secret",
									"type": "Expression"
								},
								"refresh_token": {
									"value": "@pipeline().parameters.refresh_token",
									"type": "Expression"
								},
								"reprocessDate": {
									"value": "@pipeline().parameters.reprocessDate",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"reprocessDate": {
						"type": "string",
						"defaultValue": "7"
					},
					"silver_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Silver/"
					},
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"AccessToken": {
						"type": "string"
					},
					"PageToken": {
						"type": "string"
					},
					"PageCounter": {
						"type": "string"
					},
					"NextPageToken": {
						"type": "string"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					},
					"TokenStartTime": {
						"type": "String"
					},
					"AccesToken": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/General"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-03T16:56:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_Parent_Contacts_Zoho_38b')]",
				"[concat(variables('factoryId'), '/pipelines/p_Zoho_FP_Silver_38b')]",
				"[concat(variables('factoryId'), '/pipelines/p_Parent_Deals_Zoho_38b')]",
				"[concat(variables('factoryId'), '/pipelines/p_Parent_Leads_Zoho_38b')]",
				"[concat(variables('factoryId'), '/pipelines/p_Parent_Users_Zoho_38b')]",
				"[concat(variables('factoryId'), '/pipelines/p_Parent_Ciclos_Zoho_38b')]",
				"[concat(variables('factoryId'), '/pipelines/p_Parent_Programas_Zoho_38b')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General_Zoho_Fisiofocus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteZohoFisiofocus",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_Parent_Zoho_Fisiofocus",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"reprocessDate": {
									"value": "@pipeline().parameters.reprocessDate",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecuteZohoFisiofocusBronzetoSilver",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecuteZohoFisiofocus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ZohoFisiofocusSilver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"reprocessDate": {
						"type": "string",
						"defaultValue": "7"
					},
					"silver_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Silver/"
					}
				},
				"folder": {
					"name": "Lakehouse/General"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-27T20:32:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_Parent_Zoho_Fisiofocus')]",
				"[concat(variables('factoryId'), '/pipelines/p_ZohoFisiofocusSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General_dimEstudio')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataDimEstudioBronze",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adsl_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": "master",
									"folder": "dim_estudio",
									"filename": "dim_estudio.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/dim_estudio/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "dim_estudio.parquet"
								}
							}
						]
					},
					{
						"name": "NotebookDimEstudioSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "CopyDataDimEstudioBronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'dim_estudio_silver')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "NotebookDimEstudioGold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "NotebookDimEstudioSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_estudio_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "NotebookDimEstudioDWH",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "NotebookDimEstudioGold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.dwh_storage_databricks, 'dim_estudio')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"silver_storage_databricks": {
						"type": "string"
					},
					"gold_storage_databricks": {
						"type": "string"
					},
					"dwh_storage_databricks": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Lakehouse/General/General_dimFijas_Mapeo"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General_dimFijas_Mapeo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineGeneral_dimEstudio",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_dimEstudio",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								},
								"gold_storage_databricks": {
									"value": "@pipeline().parameters.gold_storage_databricks",
									"type": "Expression"
								},
								"dwh_storage_databricks": {
									"value": "@pipeline().parameters.dwh_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipelineGeneral_dimPais",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_dimPais",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								},
								"gold_storage_databricks": {
									"value": "@pipeline().parameters.gold_storage_databricks",
									"type": "Expression"
								},
								"dwh_storage_databricks": {
									"value": "@pipeline().parameters.dwh_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipelineGeneral_MapeoEstudio",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_MapeoEstudio",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								},
								"gold_storage_databricks": {
									"value": "@pipeline().parameters.gold_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipelineGeneral_MapeoModalidad",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_MapeoModalidad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								},
								"gold_storage_databricks": {
									"value": "@pipeline().parameters.gold_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipelineGeneral_MapeoOrigenCampania",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_MapeoOrigenCampania",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								},
								"gold_storage_databricks": {
									"value": "@pipeline().parameters.gold_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipelineGeneral_MapeoSede",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_MapeoSede",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								},
								"gold_storage_databricks": {
									"value": "@pipeline().parameters.gold_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Dim_fecha_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_fecha_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_fecha_DWH",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_fecha_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.dwh_storage_databricks, 'dim_fecha')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_hora_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_hora_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_hora_DWH",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_hora_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.dwh_storage_databricks, 'dim_hora')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Origen_Classlife",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'origen_Classlife')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"silver_storage_databricks": {
						"type": "string"
					},
					"gold_storage_databricks": {
						"type": "string"
					},
					"dwh_storage_databricks": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Lakehouse/General/General_dimFijas_Mapeo"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T18:43:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_General_dimEstudio')]",
				"[concat(variables('factoryId'), '/pipelines/p_General_dimPais')]",
				"[concat(variables('factoryId'), '/pipelines/p_General_MapeoEstudio')]",
				"[concat(variables('factoryId'), '/pipelines/p_General_MapeoModalidad')]",
				"[concat(variables('factoryId'), '/pipelines/p_General_MapeoOrigenCampania')]",
				"[concat(variables('factoryId'), '/pipelines/p_General_MapeoSede')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General_dimPais')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDatadimPaisBronze",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adsl_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": "master",
									"folder": "dim_pais",
									"filename": "dim_pais.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/dim_pais/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "dim_pais.parquet"
								}
							}
						]
					},
					{
						"name": "DimPaisSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "CopyDatadimPaisBronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'dim_pais_silver')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DimPaisGold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "DimPaisSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_pais_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DimPaisDWH",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "DimPaisGold",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DimNacionalidadGold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.dwh_storage_databricks, 'dim_pais')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DimNacionalidadGold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "DimPaisSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_nacionalidad_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"silver_storage_databricks": {
						"type": "string"
					},
					"gold_storage_databricks": {
						"type": "string"
					},
					"dwh_storage_databricks": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Lakehouse/General/General_dimFijas_Mapeo"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-24T15:15:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Master_Metrodora')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute p_General_Metrodora",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEach_Previous_Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_Metrodora",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dayToLoad": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								},
								"silver_storage_databricks": {
									"value": "@concat('/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Silver/')",
									"type": "Expression"
								},
								"gold_storage_databricks": {
									"value": "@concat('/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Gold/')",
									"type": "Expression"
								},
								"dwh_storage_databricks": {
									"value": "@concat('/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/DWH/')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Succesfully Email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ForEach_After_Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-96.westeurope.logic.azure.com:443/workflows/421b78d3946b475d962d9cfbea4c0899/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=A1vnMT0ZUVltAWLpmQ4qU6Z3ggPqz0MSz-O0hrdjHn8",
							"body": {
								"value": "{\n  \"title\": \"PIPELINE RUN METRODORA MASTER FINISHED\",\n  \"message\": \"PIPELINE FINISHED RUNNING SUCCESSFULLY!\",\n  \"color\": \"Green\",\n  \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n  \"pipelineName\": \"@{pipeline().Pipeline}\",\n  \"pipelineRunId\": \"@{pipeline().RunId}\",\n  \"time\": \"@{utcNow()}\",\n  \"details\": {\n    \"tables\": [\n      {\n        \"table\": \"fctventa\",\n        \"previous_count\": \"@{variables('previous_counts_ventas')}\",\n        \"after_count\": \"@{variables('after_counts_ventas')}\",\n        \"inserted_records\": \"@{variables('inserted_records_ventas')}\"\n      },\n      {\n        \"table\": \"fct_matricula\",\n        \"previous_count\": \"@{variables('previous_counts_matricula')}\",\n        \"after_count\": \"@{variables('after_counts_matricula')}\",\n        \"inserted_records\": \"@{variables('inserted_records_matricula')}\"\n      },\n      {\n        \"table\": \"fct_recibos\",\n        \"previous_count\": \"@{variables('previous_counts_fct_recibos')}\",\n        \"after_count\": \"@{variables('after_counts_fct_recibos')}\",\n        \"inserted_records\": \"@{variables('inserted_records_fct_recibos')}\"\n      }\n    ],\n    \"duplicated_cod_leads\": @{json(variables('Count_cod_lead_duplicates_fct_ventas'))},\n    \"duplicated_cod_oportunidad\": @{json(variables('Count_cod_oportunidad_duplicates_fct_ventas'))}\n  }\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Failed Email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute p_General_Metrodora",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-40.westeurope.logic.azure.com:443/workflows/2bb0d801093b433a99faf68a321f80fb/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=XkPD-LLEMVO2gpxBWggav7Z1z9XUNdXndtJTos6uWLc",
							"body": {
								"value": "{\n  \"title\": \"PIPELINE RUN METRODORA MASTER FAILED\",\n  \"message\": \"El pipeline 'p_General_Metrodora' ha fallado. \n  Actividad con error: @{activity('Execute p_General_Metrodora').error.message}. \n  Revisa los logs en ADF.\",\n  \"color\": \"Red\",\n  \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n  \"pipelineName\": \"@{pipeline().Pipeline}\",\n  \"pipelineRunId\": \"@{pipeline().RunId}\",\n  \"time\": \"@{utcNow()}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach_Previous_Count",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('table_list')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get_Previous_Count_Ventas",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select count(*) from public.fctventa",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										}
									}
								},
								{
									"name": "previous_counts_ventas",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get_Previous_Count_Ventas",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "previous_counts_ventas",
										"value": {
											"value": "@string(activity('Get_Previous_Count_Ventas').output.firstRow.count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get_Previous_Count_Matricula",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select count(*) from public.fct_matricula",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										}
									}
								},
								{
									"name": "previous_counts_matricula",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get_Previous_Count_Matricula",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "previous_counts_matricula",
										"value": {
											"value": "@string(activity('Get_Previous_Count_Matricula').output.firstRow.count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get_Previous_Count_fct_ventas",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select count(*) from public.fct_venta",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										}
									}
								},
								{
									"name": "previous_counts_fct_ventas",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get_Previous_Count_fct_ventas",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "previous_counts_fct_ventas",
										"value": {
											"value": "@string(activity('Get_Previous_Count_fct_ventas').output.firstRow.count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get_Previous_Count_fct_recibos",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select count(*) from public.fct_recibos",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										}
									}
								},
								{
									"name": "previous_counts_fct_recibos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get_Previous_Count_fct_recibos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "previous_counts_fct_recibos",
										"value": {
											"value": "@string(activity('Get_Previous_Count_fct_recibos').output.firstRow.count)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "ForEach_After_Count",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute p_General_Metrodora",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('table_list')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get_After_Count_Ventas",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select count(*) from public.fctventa",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										}
									}
								},
								{
									"name": "After_counts_ventas",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get_After_Count_Ventas",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "after_counts_ventas",
										"value": {
											"value": "@string(activity('Get_After_Count_Ventas').output.firstRow.count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "inserted_records_ventas",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "After_counts_ventas",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inserted_records_ventas",
										"value": {
											"value": "@string(\n    max(\n        0,\n        sub(\n            int(if(empty(variables('after_counts_ventas')), '0', variables('after_counts_ventas'))), \n            int(if(empty(variables('previous_counts_ventas')), '0', variables('previous_counts_ventas')))\n        )\n    )\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get_After_Count_Matricula",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select count(*) from public.fct_matricula",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										}
									}
								},
								{
									"name": "After_counts_Matricula",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get_After_Count_Matricula",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "after_counts_matricula",
										"value": {
											"value": "@string(activity('Get_After_Count_Matricula').output.firstRow.count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "inserted_records_Matricula",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "After_counts_Matricula",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inserted_records_matricula",
										"value": {
											"value": "@string(\n    max(\n        0,\n        sub(\n            int(if(empty(variables('after_counts_matricula')), '0', variables('after_counts_matricula'))), \n            int(if(empty(variables('previous_counts_matricula')), '0', variables('previous_counts_matricula')))\n        )\n    )\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get_After_Count_fct_ventas",
									"type": "Lookup",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select count(*) from public.fct_venta",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										}
									}
								},
								{
									"name": "After_counts_fct_ventas",
									"type": "SetVariable",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "Get_After_Count_fct_ventas",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "after_counts_fct_ventas",
										"value": {
											"value": "@string(activity('Get_After_Count_fct_ventas').output.firstRow.count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "inserted_records_fct_ventas",
									"type": "SetVariable",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "After_counts_fct_ventas",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inserted_records_fct_ventas",
										"value": {
											"value": "@string(\n    max(\n        0,\n        sub(\n            int(if(empty(variables('after_counts_fct_ventas')), '0', variables('after_counts_fct_ventas'))), \n            int(if(empty(variables('previous_counts_fct_ventas')), '0', variables('previous_counts_fct_ventas')))\n        )\n    )\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get_After_Count_fct_recibos",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select count(*) from public.fct_recibos",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										}
									}
								},
								{
									"name": "After_counts_fct_recibos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get_After_Count_fct_recibos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "after_counts_fct_recibos",
										"value": {
											"value": "@string(activity('Get_After_Count_fct_recibos').output.firstRow.count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "inserted_records_fct_recibos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "After_counts_fct_recibos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inserted_records_fct_recibos",
										"value": {
											"value": "@string(\n    max(\n        0,\n        sub(\n            int(if(empty(variables('after_counts_fct_recibos')), '0', variables('after_counts_fct_recibos'))), \n            int(if(empty(variables('previous_counts_fct_recibos')), '0', variables('previous_counts_fct_recibos')))\n        )\n    )\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Count_cod_lead_duplicates_fct_ventas",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "SELECT cod_lead, COUNT(*)\nFROM fctventa\nWHERE cod_lead IS NOT NULL\nGROUP BY cod_lead\nHAVING COUNT(*) > 1;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Count_cod_lead_duplicates",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Count_cod_lead_duplicates_fct_ventas",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Count_cod_lead_duplicates_fct_ventas",
										"value": {
											"value": "@string(activity('Count_cod_lead_duplicates_fct_ventas').output.value)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Count_cod_oportunidad_duplicates_fct_ventas",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "SELECT cod_oportunidad, COUNT(*)\nFROM fctventa\nWHERE cod_oportunidad IS NOT NULL\nGROUP BY cod_oportunidad\nHAVING COUNT(*) > 1;\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Count_cod_oportunidad_duplicates",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Count_cod_oportunidad_duplicates_fct_ventas",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Count_cod_oportunidad_duplicates_fct_ventas",
										"value": {
											"value": "@string(activity('Count_cod_oportunidad_duplicates_fct_ventas').output.value)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"variables": {
					"previous_counts_ventas": {
						"type": "String"
					},
					"after_counts_ventas": {
						"type": "String"
					},
					"inserted_records_ventas": {
						"type": "String"
					},
					"previous_counts_matricula": {
						"type": "String"
					},
					"after_counts_matricula": {
						"type": "String"
					},
					"inserted_records_matricula": {
						"type": "String"
					},
					"table_list": {
						"type": "Array",
						"defaultValue": [
							"dummy_value"
						]
					},
					"previous_counts_fct_ventas": {
						"type": "String"
					},
					"after_counts_fct_ventas": {
						"type": "String"
					},
					"inserted_records_fct_ventas": {
						"type": "String"
					},
					"previous_counts_fct_recibos": {
						"type": "String"
					},
					"after_counts_fct_recibos": {
						"type": "String"
					},
					"inserted_records_fct_recibos": {
						"type": "String"
					},
					"Count_cod_lead_duplicates_fct_ventas": {
						"type": "String"
					},
					"Count_cod_oportunidad_duplicates_fct_ventas": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Master"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-18T12:05:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_General_Metrodora')]",
				"[concat(variables('factoryId'), '/datasets/ds_PostgreSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_OdooLeadBronze')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebLogin",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WebOdooPwd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": "https://odoo.isep.es/jsonrpc/",
							"body": {
								"value": "@json(concat('{\"jsonrpc\":\"2.0\",\"method\":\"call\",\"params\":{\"service\":\"common\",\"method\":\"login\",\"args\":[\"final\",\"soporteinformatica@isep.es\",\"',activity('WebOdooPwd').output.value,'\"]}}'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyDataOdooBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebLogin",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": {
									"value": "@string(json(concat('{\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"call\",\n\t\"params\": {\n\t\t\"service\": \"object\",\n\t\t\"method\": \"execute\",\n\t\t\"args\": [\n\t\t\t\"final\",',string(activity('WebLogin').output.result),',\n\t\t\t\"',string(activity('WebOdooPwd').output.value),'\",\n\t\t\t\"crm.lead\",\n\t\t\t\"search_read\",\n\t\t\t[\n\t\t\t\t[\n\t\t\t\t\t\"write_date\",\n\t\t\t\t\t\">=\",\n\t\t\t\t\t\"',formatDateTime(addDays(utcnow(),int(concat('-',string(pipeline().parameters.dayToLoad)))),'MM/dd/yyyy'),'\"\n\t\t\t\t]\n\t\t\t],\n\t\t\t[\n\t\t\t\t\"name\",\n\t\t\t\t\"campaign_id\",\n\t\t\t\t\"company_id\",\n\t\t\t\t\"country_id\",\n\t\t\t\t\"section_id\",\n\t\t\t\t\"state_id\",\n\t\t\t\t\"stage_id\",\n\t\t\t\t\"medium_id\",\n\t\t\t\t\"source_id\",\n\t\t\t\t\"user_id\",\n\t\t\t\t\"title\",\n\t\t\t\t\"city\",\n\t\t\t\t\"contact_name\",\n\t\t\t\t\"email\",\n\t\t\t\t\"fax\",\n\t\t\t\t\"mobile\",\n\t\t\t\t\"partner_name\",\n\t\t\t\t\"phone\",\n\t\t\t\t\"probability\",\n\t\t\t\t\"planned_revenue\",\n\t\t\t\t\"street\",\n\t\t\t\t\"street2\",\n\t\t\t\t\"zip\",\n\t\t\t\t\"create_date\",\n\t\t\t\t\"date_action_last\",\n\t\t\t\t\"date_action_next\",\n\t\t\t\t\"email_from\",\n\t\t\t\t\"email_cc\",\n\t\t\t\t\"date_last_stage_update\",\n\t\t\t\t\"lost_reason\",\n\t\t\t\t\"write_date\",\n\t\t\t\t\"x_curso\",\n\t\t\t\t\"x_studio_field_FM3fX\",\n\t\t\t\t\"x_sede_id\",\n\t\t\t\t\"x_modalidad_id\",\n\t\t\t\t\"sale_amount_total\",\n\t\t\t\t\"x_curso_id\",\n\t\t\t\t\"x_codmodalidad\",\n\t\t\t\t\"x_codcurso\",\n\t\t\t\t\"x_ga_medium\",\n\t\t\t\t\"x_ga_source\",\n\t\t\t\t\"x_ga_utma\",\n\t\t\t\t\"x_ga_campaign\",\n\t\t\t\t\"medium_id\",\n\t\t\t\t\"date_closed\",\n\t\t\t\t\"date_conversion\"\n\t\t\t]\n\t\t]\n\t}\n}'))\n)",
									"type": "Expression"
								},
								"additionalHeaders": {
									"Content-Type": "application/json"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Odoo",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/odoo/lead/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))\n\n\n",
										"type": "Expression"
									},
									"filename": "odoolead.json"
								}
							}
						]
					},
					{
						"name": "WebOdooPwd",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousedev.vault.azure.net/secrets/odoopwd/95e9aff09463460b88ebcdf8251b56f6?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Odoo')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_OdooLeadBronzeF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebLogin",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WebOdooPwd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": "https://odoo.isep.es/jsonrpc/",
							"body": {
								"value": "@json(concat('{\"jsonrpc\":\"2.0\",\"method\":\"call\",\"params\":{\"service\":\"common\",\"method\":\"login\",\"args\":[\"final\",\"soporteinformatica@isep.es\",\"',activity('WebOdooPwd').output.value,'\"]}}'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyDataOdooBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebLogin",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": {
									"value": "@string(json(concat('{\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"call\",\n\t\"params\": {\n\t\t\"service\": \"object\",\n\t\t\"method\": \"execute\",\n\t\t\"args\": [\n\t\t\t\"final\",',string(activity('WebLogin').output.result),',\n\t\t\t\"',string(activity('WebOdooPwd').output.value),'\",\n\t\t\t\"crm.lead\",\n\t\t\t\"search_read\",\n\t\t\t[\n\t\t\t\t[\n\t\t\t\t\t\"write_date\",\n\t\t\t\t\t\">=\",\n\t\t\t\t\t\"',formatDateTime(addDays(utcnow(),int(concat('-',string(pipeline().parameters.dayToLoad)))),'MM/dd/yyyy'),'\"\n\t\t\t\t]\n\t\t\t],\n\t\t\t[\n\t\t\t\t\"name\",\n\t\t\t\t\"campaign_id\",\n\t\t\t\t\"company_id\",\n\t\t\t\t\"country_id\",\n\t\t\t\t\"section_id\",\n\t\t\t\t\"state_id\",\n\t\t\t\t\"stage_id\",\n\t\t\t\t\"medium_id\",\n\t\t\t\t\"source_id\",\n\t\t\t\t\"user_id\",\n\t\t\t\t\"title\",\n\t\t\t\t\"city\",\n\t\t\t\t\"contact_name\",\n\t\t\t\t\"email\",\n\t\t\t\t\"fax\",\n\t\t\t\t\"mobile\",\n\t\t\t\t\"partner_name\",\n\t\t\t\t\"phone\",\n\t\t\t\t\"probability\",\n\t\t\t\t\"planned_revenue\",\n\t\t\t\t\"street\",\n\t\t\t\t\"street2\",\n\t\t\t\t\"zip\",\n\t\t\t\t\"create_date\",\n\t\t\t\t\"date_action_last\",\n\t\t\t\t\"date_action_next\",\n\t\t\t\t\"email_from\",\n\t\t\t\t\"email_cc\",\n\t\t\t\t\"date_last_stage_update\",\n\t\t\t\t\"lost_reason\",\n\t\t\t\t\"write_date\",\n\t\t\t\t\"x_curso\",\n\t\t\t\t\"x_studio_field_FM3fX\",\n\t\t\t\t\"x_sede_id\",\n\t\t\t\t\"x_modalidad_id\",\n\t\t\t\t\"sale_amount_total\",\n\t\t\t\t\"x_curso_id\",\n\t\t\t\t\"x_codmodalidad\",\n\t\t\t\t\"x_codcurso\",\n\t\t\t\t\"x_ga_medium\",\n\t\t\t\t\"x_ga_source\",\n\t\t\t\t\"x_ga_utma\",\n\t\t\t\t\"x_ga_campaign\",\n\t\t\t\t\"medium_id\",\n\t\t\t\t\"date_closed\",\n\t\t\t\t\"date_conversion\"\n\t\t\t]\n\t\t]\n\t}\n}'))\n)",
									"type": "Expression"
								},
								"additionalHeaders": {
									"Content-Type": "application/json"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Odoo",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehousef0/odoo/lead/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))\n\n\n",
										"type": "Expression"
									},
									"filename": "odoolead.json"
								}
							}
						]
					},
					{
						"name": "WebOdooPwd",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousedev.vault.azure.net/secrets/odoopwd/95e9aff09463460b88ebcdf8251b56f6?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"folder": {
					"name": "LakehouseF0/BronzeF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Odoo')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_OdooLeadBronzeF0_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebLogin",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WebOdooPwd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": "https://odoo.isep.es/jsonrpc/",
							"body": {
								"value": "@json(concat('{\"jsonrpc\":\"2.0\",\"method\":\"call\",\"params\":{\"service\":\"common\",\"method\":\"login\",\"args\":[\"final\",\"soporteinformatica@isep.es\",\"',activity('WebOdooPwd').output.value,'\"]}}'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyDataOdooBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebLogin",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": {
									"value": "@string(json(concat('{\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"call\",\n\t\"params\": {\n\t\t\"service\": \"object\",\n\t\t\"method\": \"execute\",\n\t\t\"args\": [\n\t\t\t\"final\",',string(activity('WebLogin').output.result),',\n\t\t\t\"',string(activity('WebOdooPwd').output.value),'\",\n\t\t\t\"crm.lead\",\n\t\t\t\"search_read\",\n\t\t\t[\n\t\t\t\t[\n\t\t\t\t\t\"create_date\",\n\t\t\t\t\t\">=\",\n\t\t\t\t\t\"09/01/2023\"\n\t\t\t\t]\n\t\t\t],\n\t\t\t[\n\t\t\t\t\"name\",\n\t\t\t\t\"campaign_id\",\n\t\t\t\t\"company_id\",\n\t\t\t\t\"country_id\",\n\t\t\t\t\"section_id\",\n\t\t\t\t\"state_id\",\n\t\t\t\t\"stage_id\",\n\t\t\t\t\"medium_id\",\n\t\t\t\t\"source_id\",\n\t\t\t\t\"user_id\",\n\t\t\t\t\"title\",\n\t\t\t\t\"city\",\n\t\t\t\t\"contact_name\",\n\t\t\t\t\"email\",\n\t\t\t\t\"fax\",\n\t\t\t\t\"mobile\",\n\t\t\t\t\"partner_name\",\n\t\t\t\t\"phone\",\n\t\t\t\t\"probability\",\n\t\t\t\t\"planned_revenue\",\n\t\t\t\t\"street\",\n\t\t\t\t\"street2\",\n\t\t\t\t\"zip\",\n\t\t\t\t\"create_date\",\n\t\t\t\t\"date_action_last\",\n\t\t\t\t\"date_action_next\",\n\t\t\t\t\"email_from\",\n\t\t\t\t\"email_cc\",\n\t\t\t\t\"date_last_stage_update\",\n\t\t\t\t\"lost_reason\",\n\t\t\t\t\"write_date\",\n\t\t\t\t\"x_curso\",\n\t\t\t\t\"x_studio_field_FM3fX\",\n\t\t\t\t\"x_sede_id\",\n\t\t\t\t\"x_modalidad_id\",\n\t\t\t\t\"sale_amount_total\",\n\t\t\t\t\"x_curso_id\",\n\t\t\t\t\"x_codmodalidad\",\n\t\t\t\t\"x_codcurso\",\n\t\t\t\t\"x_ga_medium\",\n\t\t\t\t\"x_ga_source\",\n\t\t\t\t\"x_ga_utma\",\n\t\t\t\t\"x_ga_campaign\",\n\t\t\t\t\"medium_id\",\n\t\t\t\t\"date_closed\",\n\t\t\t\t\"date_conversion\"\n\t\t\t]\n\t\t]\n\t}\n}'))\n)",
									"type": "Expression"
								},
								"additionalHeaders": {
									"Content-Type": "application/json"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Odoo",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehousef0/odoo/lead/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))\n\n\n",
										"type": "Expression"
									},
									"filename": "odoolead.json"
								}
							}
						]
					},
					{
						"name": "WebOdooPwd",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousedev.vault.azure.net/secrets/odoopwd/95e9aff09463460b88ebcdf8251b56f6?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/BronzeF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Odoo')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_OdooLeadBronze_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebLogin",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WebOdooPwd",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": "https://odoo.isep.es/jsonrpc/",
							"body": {
								"value": "@json(concat('{\"jsonrpc\":\"2.0\",\"method\":\"call\",\"params\":{\"service\":\"common\",\"method\":\"login\",\"args\":[\"final\",\"soporteinformatica@isep.es\",\"',activity('WebOdooPwd').output.value,'\"]}}'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyDataOdooBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebLogin",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": {
									"value": "@string(json(concat('{\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"call\",\n\t\"params\": {\n\t\t\"service\": \"object\",\n\t\t\"method\": \"execute\",\n\t\t\"args\": [\n\t\t\t\"final\",',string(activity('WebLogin').output.result),',\n\t\t\t\"',string(activity('WebOdooPwd').output.value),'\",\n\t\t\t\"crm.lead\",\n\t\t\t\"search_read\",\n\t\t\t[\n\t\t\t\t[\n\t\t\t\t\t\"create_date\",\n\t\t\t\t\t\">=\",\n\t\t\t\t\t\"09/01/2023\"\n\t\t\t\t]\n\t\t\t],\n\t\t\t[\n\t\t\t\t\"name\",\n\t\t\t\t\"campaign_id\",\n\t\t\t\t\"company_id\",\n\t\t\t\t\"country_id\",\n\t\t\t\t\"section_id\",\n\t\t\t\t\"state_id\",\n\t\t\t\t\"stage_id\",\n\t\t\t\t\"medium_id\",\n\t\t\t\t\"source_id\",\n\t\t\t\t\"user_id\",\n\t\t\t\t\"title\",\n\t\t\t\t\"city\",\n\t\t\t\t\"contact_name\",\n\t\t\t\t\"email\",\n\t\t\t\t\"fax\",\n\t\t\t\t\"mobile\",\n\t\t\t\t\"partner_name\",\n\t\t\t\t\"phone\",\n\t\t\t\t\"probability\",\n\t\t\t\t\"planned_revenue\",\n\t\t\t\t\"street\",\n\t\t\t\t\"street2\",\n\t\t\t\t\"zip\",\n\t\t\t\t\"create_date\",\n\t\t\t\t\"date_action_last\",\n\t\t\t\t\"date_action_next\",\n\t\t\t\t\"email_from\",\n\t\t\t\t\"email_cc\",\n\t\t\t\t\"date_last_stage_update\",\n\t\t\t\t\"lost_reason\",\n\t\t\t\t\"write_date\",\n\t\t\t\t\"x_curso\",\n\t\t\t\t\"x_studio_field_FM3fX\",\n\t\t\t\t\"x_sede_id\",\n\t\t\t\t\"x_modalidad_id\",\n\t\t\t\t\"sale_amount_total\",\n\t\t\t\t\"x_curso_id\",\n\t\t\t\t\"x_codmodalidad\",\n\t\t\t\t\"x_codcurso\",\n\t\t\t\t\"x_ga_medium\",\n\t\t\t\t\"x_ga_source\",\n\t\t\t\t\"x_ga_utma\",\n\t\t\t\t\"x_ga_campaign\",\n\t\t\t\t\"medium_id\",\n\t\t\t\t\"date_closed\",\n\t\t\t\t\"date_conversion\"\n\t\t\t]\n\t\t]\n\t}\n}'))\n)",
									"type": "Expression"
								},
								"additionalHeaders": {
									"Content-Type": "application/json"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Odoo",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/odoo/lead/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))\n\n\n",
										"type": "Expression"
									},
									"filename": "odoolead.json"
								}
							}
						]
					},
					{
						"name": "WebOdooPwd",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://kvmetrodoralakehousedev.vault.azure.net/secrets/odoopwd/95e9aff09463460b88ebcdf8251b56f6?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Old"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Odoo')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_OdooLeadGoldF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowOdooLeadGoldF0",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_OdooLeadGoldF0",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceOdooLeadSilverF0": {},
									"sourceVentasGoldF0": {},
									"sinkVentasGoldF0": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/GoldF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_OdooLeadGoldF0')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_OdooLeadSilverF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowOdooSilver",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_OdooLeadSilverF0",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceOdooBronze": {
										"container": "bronze",
										"folder": {
											"value": "@concat('lakehousef0/odoo/lead/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
											"type": "Expression"
										},
										"filename": "odoolead.json"
									},
									"sinkOdooSilver": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/SilverF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_OdooLeadSilverF0')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Parent_Ciclos_Zoho_38b')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebZohoAPI",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://accounts.zoho.eu/oauth/v2/token",
							"body": {
								"value": "@concat('client_id=', pipeline().parameters.client_id, \n        '&client_secret=', pipeline().parameters.client_secret,\n        '&refresh_token=', pipeline().parameters.refresh_token,\n        '&grant_type=refresh_token')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set variable Users",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "WebActivityName",
							"value": {
								"value": "@activity('WebZohoAPI').output.access_token\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Modified Since Date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "If-Modified-Since",
							"value": {
								"value": "@formatDateTime(addDays(utcnow(), if(equals(pipeline().parameters.reprocessDate, ''), -7, sub(0, int(pipeline().parameters.reprocessDate)))), 'yyyy-MM-ddTHH:mm:ssZ')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopydataZohoCiclos",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "If Condition Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Zoho_API",
								"type": "DatasetReference",
								"parameters": {
									"relativeUrl": {
										"value": "@concat('https://www.zohoapis.eu/crm/v7/Ciclos?fields=Ciclo,Codigo_de_Ciclo,Tag,Name,Provincias_Sedes,Sede_por_defecto,ID')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho_38b/Ciclos/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "JsaZohoCiclos.json"
								}
							}
						]
					},
					{
						"name": "CheckFolderExists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set variable Users",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If Modified Since Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adsl_json_delete",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho_38b/Ciclos/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Condition Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('CheckFolderExists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Files in folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Ciclos/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Zoho_API')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json_delete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Parent_Contacts_Zoho_38b')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Executed Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@activity('1 Executed Leads').output.pipelineReturnValue.PageCounter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Seconds 3350 Start",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "NextPageToken",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "New SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(\n    div(sub(ticks(utcnow()), ticks(variables('TokenStartTime'))), 10000000),\n    3300\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "1 Executed Leads",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Modified Since Date Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_Child_Contacts_38b",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"client_id": {
									"value": "@pipeline().parameters.client_id",
									"type": "Expression"
								},
								"client_secret": {
									"value": "@pipeline().parameters.client_secret",
									"type": "Expression"
								},
								"refresh_token": {
									"value": "@pipeline().parameters.refresh_token",
									"type": "Expression"
								},
								"reprocessDate": {
									"value": "@pipeline().parameters.reprocessDate",
									"type": "Expression"
								},
								"AccessToken": {
									"value": "@variables('WebActivityName')",
									"type": "Expression"
								},
								"PageCounter": {
									"value": "@variables('PageCounter')",
									"type": "Expression"
								},
								"IfModifiedSince": {
									"value": "@variables('If-Modified-Since')",
									"type": "Expression"
								},
								"NextPageToken": {
									"value": "@variables('NextPageToken')",
									"type": "Expression"
								},
								"TokenStartTime": {
									"value": "@variables('TokenStartTime')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "CheckFolderExists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adsl_json_delete",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho_38b/Contacts/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Condition Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('CheckFolderExists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Files in folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Contacts/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "NextPageToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Executed Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NextPageToken",
							"value": {
								"value": "@activity('1 Executed Leads').output.pipelineReturnValue.NextPageToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Modified Since Date Leads",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Condition Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "If-Modified-Since",
							"value": {
								"value": "@formatDateTime(addDays(utcnow(), if(equals(pipeline().parameters.reprocessDate, ''), -7, sub(0, int(pipeline().parameters.reprocessDate)))), 'yyyy-MM-ddTHH:mm:ssZ')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Condition Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@utcNow()\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "2 PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Hour pagination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@activity('2 Executed Leads').output.pipelineReturnValue.PageCounter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "2 NextPageToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Hour pagination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NextPageToken",
							"value": {
								"value": "@activity('2 Executed Leads').output.pipelineReturnValue.NextPageToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Seconds 6700 Start",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "2 PageCounter",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "2 NextPageToken",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "2 SetTokenStartTime",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(\n    div(sub(ticks(utcnow()), ticks(variables('TokenStartTime'))), 10000000),\n    6700\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "2 Hour pagination",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Seconds 6700 Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  or(\n    equals(trim(coalesce(variables('NextPageToken'), '')), ''),\n    equals(variables('NextPageToken'), null)\n  )\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "3 Executed Leads",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "p_Child_Contacts_38b",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"client_id": {
												"value": "@pipeline().parameters.client_id",
												"type": "Expression"
											},
											"client_secret": {
												"value": "@pipeline().parameters.client_secret",
												"type": "Expression"
											},
											"refresh_token": {
												"value": "@pipeline().parameters.refresh_token",
												"type": "Expression"
											},
											"reprocessDate": {
												"value": "@pipeline().parameters.reprocessDate",
												"type": "Expression"
											},
											"AccessToken": {
												"value": "@variables('WebActivityName')",
												"type": "Expression"
											},
											"PageCounter": {
												"value": "@variables('PageCounter')",
												"type": "Expression"
											},
											"IfModifiedSince": {
												"value": "@variables('If-Modified-Since')",
												"type": "Expression"
											},
											"NextPageToken": {
												"value": "@variables('NextPageToken')",
												"type": "Expression"
											},
											"TokenStartTime": {
												"value": "@variables('TokenStartTime')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "1 Hour pagination",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Seconds 3350 Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  or(\n    equals(trim(coalesce(variables('NextPageToken'), '')), ''),\n    equals(variables('NextPageToken'), null)\n  )\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "2 Executed Leads",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "p_Child_Contacts_38b",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"client_id": {
												"value": "@pipeline().parameters.client_id",
												"type": "Expression"
											},
											"client_secret": {
												"value": "@pipeline().parameters.client_secret",
												"type": "Expression"
											},
											"refresh_token": {
												"value": "@pipeline().parameters.refresh_token",
												"type": "Expression"
											},
											"reprocessDate": {
												"value": "@pipeline().parameters.reprocessDate",
												"type": "Expression"
											},
											"AccessToken": {
												"value": "@variables('WebActivityName')",
												"type": "Expression"
											},
											"PageCounter": {
												"value": "@variables('PageCounter')",
												"type": "Expression"
											},
											"IfModifiedSince": {
												"value": "@variables('If-Modified-Since')",
												"type": "Expression"
											},
											"NextPageToken": {
												"value": "@variables('NextPageToken')",
												"type": "Expression"
											},
											"TokenStartTime": {
												"value": "@variables('TokenStartTime')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "New SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Executed Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@utcNow()\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "2 SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Hour pagination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@utcNow()\n",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "60"
					},
					"AccessToken": {
						"type": "string"
					},
					"PageToken": {
						"type": "string"
					},
					"NextPageToken": {
						"type": "string"
					},
					"IfModifiedSince": {
						"type": "string"
					},
					"TokenStartTime": {
						"type": "string"
					},
					"PageCounter": {
						"type": "string"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					},
					"TokenStartTime": {
						"type": "String"
					},
					"AccessToken": {
						"type": "String"
					},
					"NextPageTokenPrueba": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_Child_Contacts_38b')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json_delete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Parent_Deals_Zoho_38b')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Executed Deals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@activity('1 Executed Deals').output.pipelineReturnValue.PageCounter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Seconds 3350 Start",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "NextPageToken",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "New SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(\n    div(sub(ticks(utcnow()), ticks(variables('TokenStartTime'))), 10000000),\n    3300\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "1 Executed Deals",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Modified Since Date Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_Child_Deals_38b",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"client_id": {
									"value": "@pipeline().parameters.client_id",
									"type": "Expression"
								},
								"client_secret": {
									"value": "@pipeline().parameters.client_secret",
									"type": "Expression"
								},
								"refresh_token": {
									"value": "@pipeline().parameters.refresh_token",
									"type": "Expression"
								},
								"reprocessDate": {
									"value": "@pipeline().parameters.reprocessDate",
									"type": "Expression"
								},
								"AccessToken": {
									"value": "@variables('WebActivityName')",
									"type": "Expression"
								},
								"PageCounter": {
									"value": "@variables('PageCounter')",
									"type": "Expression"
								},
								"IfModifiedSince": {
									"value": "@variables('If-Modified-Since')",
									"type": "Expression"
								},
								"NextPageToken": {
									"value": "@variables('NextPageToken')",
									"type": "Expression"
								},
								"TokenStartTime": {
									"value": "@variables('TokenStartTime')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "CheckFolderExists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adsl_json_delete",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho_38b/Deals/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Condition Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('CheckFolderExists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Files in folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Deals/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "NextPageToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Executed Deals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NextPageToken",
							"value": {
								"value": "@activity('1 Executed Deals').output.pipelineReturnValue.NextPageToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Modified Since Date Leads",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Condition Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "If-Modified-Since",
							"value": {
								"value": "@formatDateTime(addDays(utcnow(), if(equals(pipeline().parameters.reprocessDate, ''), -7, sub(0, int(pipeline().parameters.reprocessDate)))), 'yyyy-MM-ddTHH:mm:ssZ')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Condition Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@utcNow()\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "2 PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Hour pagination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@activity('2 Executed Deals').output.pipelineReturnValue.PageCounter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "2 NextPageToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Hour pagination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NextPageToken",
							"value": {
								"value": "@activity('2 Executed Deals').output.pipelineReturnValue.NextPageToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Seconds 6700 Start",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "2 PageCounter",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "2 NextPageToken",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "2 SetTokenStartTime_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(\n    div(sub(ticks(utcnow()), ticks(variables('TokenStartTime'))), 10000000),\n    6700\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "2 Hour pagination",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Seconds 6700 Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  or(\n    equals(trim(coalesce(variables('NextPageToken'), '')), ''),\n    equals(variables('NextPageToken'), null)\n  )\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "3 Executed Deals",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "p_Child_Deals_38b",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"client_id": {
												"value": "@pipeline().parameters.client_id",
												"type": "Expression"
											},
											"client_secret": {
												"value": "@pipeline().parameters.client_secret",
												"type": "Expression"
											},
											"refresh_token": {
												"value": "@pipeline().parameters.refresh_token",
												"type": "Expression"
											},
											"reprocessDate": {
												"value": "@pipeline().parameters.reprocessDate",
												"type": "Expression"
											},
											"AccessToken": {
												"value": "@variables('WebActivityName')",
												"type": "Expression"
											},
											"PageCounter": {
												"value": "@variables('PageCounter')",
												"type": "Expression"
											},
											"IfModifiedSince": {
												"value": "@variables('If-Modified-Since')",
												"type": "Expression"
											},
											"NextPageToken": {
												"value": "@variables('NextPageToken')",
												"type": "Expression"
											},
											"TokenStartTime": {
												"value": "@variables('TokenStartTime')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "1 Hour pagination",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Seconds 3350 Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  or(\n    equals(trim(coalesce(variables('NextPageToken'), '')), ''),\n    equals(variables('NextPageToken'), null)\n  )\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "2 Executed Deals",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "p_Child_Deals_38b",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"client_id": {
												"value": "@pipeline().parameters.client_id",
												"type": "Expression"
											},
											"client_secret": {
												"value": "@pipeline().parameters.client_secret",
												"type": "Expression"
											},
											"refresh_token": {
												"value": "@pipeline().parameters.refresh_token",
												"type": "Expression"
											},
											"reprocessDate": {
												"value": "@pipeline().parameters.reprocessDate",
												"type": "Expression"
											},
											"AccessToken": {
												"value": "@variables('WebActivityName')",
												"type": "Expression"
											},
											"PageCounter": {
												"value": "@variables('PageCounter')",
												"type": "Expression"
											},
											"IfModifiedSince": {
												"value": "@variables('If-Modified-Since')",
												"type": "Expression"
											},
											"NextPageToken": {
												"value": "@variables('NextPageToken')",
												"type": "Expression"
											},
											"TokenStartTime": {
												"value": "@variables('TokenStartTime')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "New SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Executed Deals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@utcNow()\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "2 SetTokenStartTime_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Hour pagination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@utcNow()\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "3 PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "2 Hour pagination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@activity('3 Executed Deals').output.pipelineReturnValue.PageCounter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "3 NextPageToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "2 Hour pagination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NextPageToken",
							"value": {
								"value": "@activity('3 Executed Deals').output.pipelineReturnValue.NextPageToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "3 SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "2 Hour pagination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@utcNow()\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Seconds 10000",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "3 NextPageToken",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "3 PageCounter",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "3 SetTokenStartTime",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(\n    div(sub(ticks(utcnow()), ticks(variables('TokenStartTime'))), 10000000),\n    10000\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "3 Hour pagination",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Seconds 10000",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  or(\n    equals(trim(coalesce(variables('NextPageToken'), '')), ''),\n    equals(variables('NextPageToken'), null)\n  )\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "4 Executed",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "p_Child_Deals_38b",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"client_id": {
												"value": "@pipeline().parameters.client_id",
												"type": "Expression"
											},
											"client_secret": {
												"value": "@pipeline().parameters.client_secret",
												"type": "Expression"
											},
											"refresh_token": {
												"value": "@pipeline().parameters.refresh_token",
												"type": "Expression"
											},
											"reprocessDate": {
												"value": "@variables('AccessToken')",
												"type": "Expression"
											},
											"AccessToken": {
												"value": "@variables('WebActivityName')",
												"type": "Expression"
											},
											"PageCounter": {
												"value": "@variables('PageCounter')",
												"type": "Expression"
											},
											"IfModifiedSince": {
												"value": "@variables('If-Modified-Since')",
												"type": "Expression"
											},
											"NextPageToken": {
												"value": "@variables('NextPageToken')",
												"type": "Expression"
											},
											"TokenStartTime": {
												"value": "@variables('TokenStartTime')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "4 PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "3 Hour pagination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@activity('3 Executed Deals').output.pipelineReturnValue.PageCounter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "4 NextPageToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "3 Hour pagination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NextPageToken",
							"value": {
								"value": "@activity('3 Executed Deals').output.pipelineReturnValue.NextPageToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "4 SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "3 Hour pagination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@utcNow()\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Seconds 13300",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "4 PageCounter",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "4 NextPageToken",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "4 SetTokenStartTime",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(\n    div(sub(ticks(utcnow()), ticks(variables('TokenStartTime'))), 10000000),\n    13300\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "4 Hour pagination",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Seconds 13300",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  or(\n    equals(trim(coalesce(variables('NextPageToken'), '')), ''),\n    equals(variables('NextPageToken'), null)\n  )\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "5 Executed",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "p_Child_Deals_38b",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"client_id": {
												"value": "@pipeline().parameters.client_id",
												"type": "Expression"
											},
											"client_secret": {
												"value": "@pipeline().parameters.client_secret",
												"type": "Expression"
											},
											"refresh_token": {
												"value": "@pipeline().parameters.refresh_token",
												"type": "Expression"
											},
											"reprocessDate": {
												"value": "@pipeline().parameters.reprocessDate",
												"type": "Expression"
											},
											"AccessToken": {
												"value": "@variables('WebActivityName')",
												"type": "Expression"
											},
											"PageCounter": {
												"value": "@variables('PageCounter')",
												"type": "Expression"
											},
											"IfModifiedSince": {
												"value": "@variables('If-Modified-Since')",
												"type": "Expression"
											},
											"NextPageToken": {
												"value": "@variables('NextPageToken')",
												"type": "Expression"
											},
											"TokenStartTime": {
												"value": "@variables('TokenStartTime')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "60"
					},
					"AccessToken": {
						"type": "string"
					},
					"PageToken": {
						"type": "string"
					},
					"NextPageToken": {
						"type": "string"
					},
					"IfModifiedSince": {
						"type": "string"
					},
					"TokenStartTime": {
						"type": "string"
					},
					"PageCounter": {
						"type": "string"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					},
					"TokenStartTime": {
						"type": "String"
					},
					"AccessToken": {
						"type": "String"
					},
					"NextPageTokenPrueba": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_Child_Deals_38b')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json_delete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Parent_Leads_Zoho_38b')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Executed Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@activity('1 Executed Leads').output.pipelineReturnValue.PageCounter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Seconds 3350 Start",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "NextPageToken",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "New SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(\n    div(sub(ticks(utcnow()), ticks(variables('TokenStartTime'))), 10000000),\n    3300\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "1 Executed Leads",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Modified Since Date Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_Child_Leads_38b",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"client_id": {
									"value": "@pipeline().parameters.client_id",
									"type": "Expression"
								},
								"client_secret": {
									"value": "@pipeline().parameters.client_secret",
									"type": "Expression"
								},
								"refresh_token": {
									"value": "@pipeline().parameters.refresh_token",
									"type": "Expression"
								},
								"reprocessDate": {
									"value": "@pipeline().parameters.reprocessDate",
									"type": "Expression"
								},
								"AccessToken": {
									"value": "@variables('WebActivityName')",
									"type": "Expression"
								},
								"PageCounter": {
									"value": "@variables('PageCounter')",
									"type": "Expression"
								},
								"IfModifiedSince": {
									"value": "@variables('If-Modified-Since')",
									"type": "Expression"
								},
								"NextPageToken": {
									"value": "@variables('NextPageToken')",
									"type": "Expression"
								},
								"TokenStartTime": {
									"value": "@variables('TokenStartTime')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "CheckFolderExists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adsl_json_delete",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho_38b/Leads/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Condition Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('CheckFolderExists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Files in folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Leads/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "NextPageToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Executed Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NextPageToken",
							"value": {
								"value": "@activity('1 Executed Leads').output.pipelineReturnValue.NextPageToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Modified Since Date Leads",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Condition Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "If-Modified-Since",
							"value": {
								"value": "@formatDateTime(addDays(utcnow(), if(equals(pipeline().parameters.reprocessDate, ''), -7, sub(0, int(pipeline().parameters.reprocessDate)))), 'yyyy-MM-ddTHH:mm:ssZ')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Condition Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@utcNow()\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "2 PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Hour pagination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@activity('2 Executed Leads').output.pipelineReturnValue.PageCounter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "2 NextPageToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Hour pagination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NextPageToken",
							"value": {
								"value": "@activity('2 Executed Leads').output.pipelineReturnValue.NextPageToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Seconds 6700 Start",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "2 PageCounter",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "2 NextPageToken",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "2 SetTokenStartTime",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(\n    div(sub(ticks(utcnow()), ticks(variables('TokenStartTime'))), 10000000),\n    6700\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "2 Hour pagination",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Seconds 6700 Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  or(\n    equals(trim(coalesce(variables('NextPageToken'), '')), ''),\n    equals(variables('NextPageToken'), null)\n  )\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "3 Executed Leads",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "p_Child_Leads_38b",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"client_id": {
												"value": "@pipeline().parameters.client_id",
												"type": "Expression"
											},
											"client_secret": {
												"value": "@pipeline().parameters.client_secret",
												"type": "Expression"
											},
											"refresh_token": {
												"value": "@pipeline().parameters.refresh_token",
												"type": "Expression"
											},
											"reprocessDate": {
												"value": "@pipeline().parameters.reprocessDate",
												"type": "Expression"
											},
											"AccessToken": {
												"value": "@variables('WebActivityName')",
												"type": "Expression"
											},
											"PageCounter": {
												"value": "@variables('PageCounter')",
												"type": "Expression"
											},
											"IfModifiedSince": {
												"value": "@variables('If-Modified-Since')",
												"type": "Expression"
											},
											"NextPageToken": {
												"value": "@variables('NextPageToken')",
												"type": "Expression"
											},
											"TokenStartTime": {
												"value": "@variables('TokenStartTime')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "2 Hour pagination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "1 Hour pagination",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Seconds 3350 Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  or(\n    equals(trim(coalesce(variables('NextPageToken'), '')), ''),\n    equals(variables('NextPageToken'), null)\n  )\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "2 Executed Leads",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "p_Child_Leads_38b",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"client_id": {
												"value": "@pipeline().parameters.client_id",
												"type": "Expression"
											},
											"client_secret": {
												"value": "@pipeline().parameters.client_secret",
												"type": "Expression"
											},
											"refresh_token": {
												"value": "@pipeline().parameters.refresh_token",
												"type": "Expression"
											},
											"reprocessDate": {
												"value": "@pipeline().parameters.reprocessDate",
												"type": "Expression"
											},
											"AccessToken": {
												"value": "@variables('WebActivityName')",
												"type": "Expression"
											},
											"PageCounter": {
												"value": "@variables('PageCounter')",
												"type": "Expression"
											},
											"IfModifiedSince": {
												"value": "@variables('If-Modified-Since')",
												"type": "Expression"
											},
											"NextPageToken": {
												"value": "@variables('NextPageToken')",
												"type": "Expression"
											},
											"TokenStartTime": {
												"value": "@variables('TokenStartTime')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "New SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Executed Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@utcNow()\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "2 SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Hour pagination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@utcNow()\n",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "60"
					},
					"AccessToken": {
						"type": "string"
					},
					"PageToken": {
						"type": "string"
					},
					"NextPageToken": {
						"type": "string"
					},
					"IfModifiedSince": {
						"type": "string"
					},
					"TokenStartTime": {
						"type": "string"
					},
					"PageCounter": {
						"type": "string"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					},
					"TokenStartTime": {
						"type": "String"
					},
					"AccessToken": {
						"type": "String"
					},
					"NextPageTokenPrueba": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_Child_Leads_38b')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json_delete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Parent_Programas_Zoho_38b')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebZohoAPI",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://accounts.zoho.eu/oauth/v2/token",
							"body": {
								"value": "@concat('client_id=', pipeline().parameters.client_id, \n        '&client_secret=', pipeline().parameters.client_secret,\n        '&refresh_token=', pipeline().parameters.refresh_token,\n        '&grant_type=refresh_token')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set variable Users",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "WebActivityName",
							"value": {
								"value": "@activity('WebZohoAPI').output.access_token\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Modified Since Date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "If-Modified-Since",
							"value": {
								"value": "@formatDateTime(addDays(utcnow(), if(equals(pipeline().parameters.reprocessDate, ''), -7, sub(0, int(pipeline().parameters.reprocessDate)))), 'yyyy-MM-ddTHH:mm:ssZ')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopydataZohoProgramas",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "If Condition Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Zoho_API",
								"type": "DatasetReference",
								"parameters": {
									"relativeUrl": {
										"value": "@concat('https://www.zohoapis.eu/crm/v7/Programas?fields=id,Centro,Ciclo,Codigo_Ciclo,ID_Programa,Name,Tipo_de_Formacion,Entidad_Legal,Especialidad,Vertical')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho_38b/Programas/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "JsaZohoProgramas.json"
								}
							}
						]
					},
					{
						"name": "CheckFolderExists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set variable Users",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If Modified Since Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adsl_json_delete",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho_38b/Programas/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Condition Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('CheckFolderExists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Files in folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Programas/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Zoho_API')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json_delete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Parent_Users_Zoho_38b')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebZohoAPI",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://accounts.zoho.eu/oauth/v2/token",
							"body": {
								"value": "@concat('client_id=', pipeline().parameters.client_id, \n        '&client_secret=', pipeline().parameters.client_secret,\n        '&refresh_token=', pipeline().parameters.refresh_token,\n        '&grant_type=refresh_token')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set variable Users",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "WebActivityName",
							"value": {
								"value": "@activity('WebZohoAPI').output.access_token\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Modified Since Date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "If-Modified-Since",
							"value": {
								"value": "@formatDateTime(addDays(utcnow(), if(equals(pipeline().parameters.reprocessDate, ''), -7, sub(0, int(pipeline().parameters.reprocessDate)))), 'yyyy-MM-ddTHH:mm:ssZ')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopydataZohoUsers",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "If Condition Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Zoho_API",
								"type": "DatasetReference",
								"parameters": {
									"relativeUrl": {
										"value": "@concat('https://www.zohoapis.eu/crm/v7/users?type=AllUsers')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho_38b/Users/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "JsaZohoUsers.json"
								}
							}
						]
					},
					{
						"name": "CopydataZohoCampaigns",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "CopydataZohoUsers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Zoho_API",
								"type": "DatasetReference",
								"parameters": {
									"relativeUrl": {
										"value": "@concat('https://www.zohoapis.eu/crm/v7/Campaigns?fields=Campaign_Name,Type,Status,', 'Native__Campaigns__Extn__Campaign_Subject,Parent_Campaign,Budgeted_Cost,Actual_Cost,Created_By,Native__Survey__Extn__Department_ID,Description,Layout,Tag,End_Date,Start_Date,Expected_Revenue,Linea_de_negocio,Modified_By,Currency,Num_sent,Owner,Native__Campaigns__Extn__Reply_to_Address,Expected_Response,Native__Campaigns__Extn__Sender_Address,Native__Campaigns__Extn__Sender_Name,Native__Survey__Extn__Survey,Native__Survey__Extn__Survey_Department,Native__Survey__Extn__Survey_Type,Native__Survey__Extn__Survey_URL,Exchange_Rate,Native__Webinar__Extn__Webinar_Duration,Native__Webinar__Extn__Webinar_Launch_URL,Native__Webinar__Extn__Webinar_Registration_URL,Native__Webinar__Extn__Webinar_Schedule')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "JsaZohoCampaigns.json"
								}
							}
						]
					},
					{
						"name": "CheckFolderExists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set variable Users",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If Modified Since Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adsl_json_delete",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho_38b/Users/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Condition Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('CheckFolderExists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Files in folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Users/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Zoho_API')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json_delete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Parent_Zoho_38b')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Modified Since Date Leads",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "If-Modified-Since",
							"value": {
								"value": "@formatDateTime(addDays(utcnow(), if(equals(pipeline().parameters.reprocessDate, ''), -7, sub(0, int(pipeline().parameters.reprocessDate)))), 'yyyy-MM-ddTHH:mm:ssZ')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@utcNow()\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WebZohoAPI",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "If Condition Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://accounts.zoho.eu/oauth/v2/token",
							"body": {
								"value": "@concat('client_id=', pipeline().parameters.client_id, \n        '&client_secret=', pipeline().parameters.client_secret,\n        '&refresh_token=', pipeline().parameters.refresh_token,\n        '&grant_type=refresh_token')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set variable Users Leads",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "WebActivityName",
							"value": {
								"value": "@activity('WebZohoAPI').output.access_token\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Executed Deals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@if(contains(activity('1 Executed Deals').output.pipelineReturnValue, 'PageCounter'), activity('1 Executed Deals').output.pipelineReturnValue.PageCounter, pipeline().parameters.PageCounter)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Seconds Start Execution",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "NextPageToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(\n    div(sub(ticks(utcnow()), ticks(variables('TokenStartTime'))), 10000000),\n    10\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "1 Executed Deals",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Modified Since Date Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set variable Users Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_Child_Zoho_Deals_38b",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"client_id": {
									"value": "@pipeline().parameters.client_id",
									"type": "Expression"
								},
								"client_secret": {
									"value": "@pipeline().parameters.client_secret",
									"type": "Expression"
								},
								"refresh_token": {
									"value": "@pipeline().parameters.refresh_token",
									"type": "Expression"
								},
								"reprocessDate": {
									"value": "@variables('AccessToken')",
									"type": "Expression"
								},
								"AccessToken": {
									"value": "@variables('WebActivityName')",
									"type": "Expression"
								},
								"PageCounter": {
									"value": "@variables('PageCounter')",
									"type": "Expression"
								},
								"IfModifiedSince": {
									"value": "@variables('If-Modified-Since')",
									"type": "Expression"
								},
								"NextPageToken": {
									"value": "@variables('NextPageToken')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "CheckFolderExists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adsl_json_delete",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho_38b/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Condition Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('CheckFolderExists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Files in folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "NextPageToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1 Executed Deals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NextPageToken",
							"value": {
								"value": "@if(contains(activity('1 Executed Deals').output.pipelineReturnValue, 'NextPageToken'), activity('1 Executed Deals').output.pipelineReturnValue.NextPageToken, '')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Pagination",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Seconds Start Execution",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  or(\n    equals(trim(coalesce(variables('NextPageToken'), '')), ''),\n    equals(variables('NextPageToken'), null)\n  )\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "2 Executed Deals",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "p_Child_Zoho_Deals_38b",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"client_id": {
												"value": "@pipeline().parameters.client_id",
												"type": "Expression"
											},
											"client_secret": {
												"value": "@pipeline().parameters.client_secret",
												"type": "Expression"
											},
											"refresh_token": {
												"value": "@pipeline().parameters.refresh_token",
												"type": "Expression"
											},
											"reprocessDate": {
												"value": "@variables('AccessToken')",
												"type": "Expression"
											},
											"AccessToken": {
												"value": "@variables('WebActivityName')",
												"type": "Expression"
											},
											"PageCounter": {
												"value": "@variables('PageCounter')",
												"type": "Expression"
											},
											"IfModifiedSince": {
												"value": "@variables('If-Modified-Since')",
												"type": "Expression"
											},
											"NextPageToken": {
												"value": "@variables('NextPageToken')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "If Pagination",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "1"
					},
					"AccessToken": {
						"type": "string"
					},
					"PageToken": {
						"type": "string"
					},
					"PageCounter": {
						"type": "string"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					},
					"TokenStartTime": {
						"type": "String"
					},
					"AccessToken": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Zoho"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_Child_Zoho_Deals_38b')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json_delete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Parent_Zoho_Fisiofocus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebZohoAPI",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://accounts.zoho.eu/oauth/v2/token",
							"body": {
								"value": "@concat('client_id=', pipeline().parameters.client_id, \n        '&client_secret=', pipeline().parameters.client_secret,\n        '&refresh_token=', pipeline().parameters.refresh_token,\n        '&grant_type=refresh_token')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set variable Users",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "WebActivityName",
							"value": {
								"value": "@activity('WebZohoAPI').output.access_token\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Modified Since Date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "If-Modified-Since",
							"value": {
								"value": "@formatDateTime(addDays(utcnow(), if(equals(pipeline().parameters.reprocessDate, ''), -7, sub(0, int(pipeline().parameters.reprocessDate)))), 'yyyy-MM-ddTHH:mm:ssZ')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UntilDeals",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "If Condition Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(\n  equals(trim(variables('NextPageToken')), ''),\n  equals(variables('NextPageToken'), null)\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopydataZohoDeals",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"Authorization": {
													"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
													"type": "Expression"
												},
												"If-Modified-Since": {
													"value": "@variables('If-Modified-Since')",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Zoho_API",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@if(\n    or(equals(variables('NextPageToken'), null), equals(variables('NextPageToken'), '')),\n    'https://www.zohoapis.eu/crm/v7/Deals?per_page=200&fields=Motivo_p_rdida_B2C,ID_Producto,Owner,Motivo_p_rdida_B2B,Residencia1,utm_type,utm_medium,utm_campaign_name,Fecha_hora_Documentaci_n_completada,br_rating,Deal_Name,Exchange_Rate,Currency,Stage,id,utm_ad_id,ID_Classlife,utm_campaign_id,Importe_pagado,br_score,utm_perfil,C_digo_descuento,L_nea_de_Negocio,utm_source,Descuento,Closing_Date,network,utm_adset_id,utm_estrategia,tipo_conversion,Amount,Probability,Profesion_Estudiante,Contact_Name.id,Pipeline,Competencia,utm_term,utm_channel,Tipolog_a_de_cliente,Created_Date,Modified_Time,ID_Lead,Fecha_hora_Pagado_NE,Fecha_hora_Anulaci_n,Nacionalidad1,lead_correlation_id,id_unico,Tipolog_a_del_alumno1,Contact_Name,Created_Time',\n    concat('https://www.zohoapis.eu/crm/v7/Deals?per_page=200&page_token=', variables('NextPageToken'), '&fields=Motivo_p_rdida_B2C,ID_Producto,Owner,Motivo_p_rdida_B2B,Residencia1,utm_type,utm_medium,utm_campaign_name,Fecha_hora_Documentaci_n_completada,br_rating,Deal_Name,Exchange_Rate,Currency,Stage,id,utm_ad_id,ID_Classlife,utm_campaign_id,Importe_pagado,br_score,utm_perfil,C_digo_descuento,L_nea_de_Negocio,utm_source,Descuento,Closing_Date,network,utm_adset_id,utm_estrategia,tipo_conversion,Amount,Probability,Profesion_Estudiante,Contact_Name.id,Pipeline,Competencia,utm_term,utm_channel,Tipolog_a_de_cliente,Created_Date,Modified_Time,ID_Lead,Fecha_hora_Pagado_NE,Fecha_hora_Anulaci_n,Nacionalidad1,lead_correlation_id,id_unico,Tipolog_a_del_alumno1,Contact_Name,Created_Time')\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": "@concat('JsaZohoDeals_', string(variables('PageCounter')), '.json')"
											}
										}
									]
								},
								{
									"name": "GetNextPageTokenDeals",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopydataZohoDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": "@concat('lakehouse/zoho/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
												"filename": "@concat('JsaZohoDeals_', string(variables('PageCounter')), '.json')"
											}
										}
									}
								},
								{
									"name": "Set NextPageTokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextPageToken",
										"value": {
											"value": "@activity('GetNextPageTokenDeals').output.firstRow.info.next_page_token",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LogtokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set NextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Log_Token",
										"value": {
											"value": "@string(variables('NextPageToken'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PageCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "UntilLeads",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(\n  equals(trim(variables('NextPageToken')), ''),\n  equals(variables('NextPageToken'), null)\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get NextPageTokenLeads",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopydataZohoLeads",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": "@concat('lakehouse/zoho/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
												"filename": {
													"value": "@concat('JsaZohoLeads_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "SetNextPageTokenLeads",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounterLeads",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextPageToken",
										"value": {
											"value": "@activity('Get NextPageTokenLeads').output.firstRow.info.next_page_token\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LogtokenLeads",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetNextPageTokenLeads",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Log_Token",
										"value": {
											"value": "@string(variables('NextPageToken'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounterLeads",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get NextPageTokenLeads",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PageCounterLeads",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounterLeads",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CopydataZohoLeads",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"Authorization": {
													"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
													"type": "Expression"
												},
												"If-Modified-Since": {
													"value": "@variables('If-Modified-Since')",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Zoho_API",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@if(\n    or(equals(variables('NextPageToken'), null), equals(variables('NextPageToken'), '')),\n    'https://www.zohoapis.eu/crm/v7/Leads?per_page=200&fields=Created_Date,Apellido_2,Description,device,Email,fbclid,First_Name,gclid1,id,id_producto,id_programa,Last_Name,lead_correlation_id,lead_rating,lead_scoring,Lead_Source,Lead_Status,Mobile,Motivos_de_perdida,Nacionalidad,Owner,Phone,Provincia,Residencia,Sexo,source,Tipolog_a_de_cliente,Typo_Conversion,utm_ad_id,utm_adset_id,utm_campaign_id,utm_campaign_name,utm_channel,utm_estrategia,utm_medium,utm_perfil,utm_source,utm_term,utm_type,Visitor_Score,Modified_Time,Created_Time,L_nea_de_Negocio,Modalidad_de_curso,Sede',\n    concat('https://www.zohoapis.eu/crm/v7/Leads?per_page=200&page_token=', variables('NextPageToken'), '&fields=Created_Date,Apellido_2,Description,device,Email,fbclid,First_Name,gclid1,id,id_producto,id_programa,Last_Name,lead_correlation_id,lead_rating,lead_scoring,Lead_Source,Lead_Status,Mobile,Motivos_de_perdida,Nacionalidad,Owner,Phone,Provincia,Residencia,Sexo,source,Tipolog_a_de_cliente,Typo_Conversion,utm_ad_id,utm_adset_id,utm_campaign_id,utm_campaign_name,utm_channel,utm_estrategia,utm_medium,utm_perfil,utm_source,utm_term,utm_type,Visitor_Score,Modified_Time,Created_Time,L_nea_de_Negocio,Modalidad_de_curso,Sede')\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoLeads_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "UntilDeals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					},
					{
						"name": "Wait2",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "UntilLeads",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					},
					{
						"name": "CopydataZohoUsers",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Zoho_API",
								"type": "DatasetReference",
								"parameters": {
									"relativeUrl": {
										"value": "@concat('https://www.zohoapis.eu/crm/v7/users?type=AllUsers')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "JsaZohoUsers.json"
								}
							}
						]
					},
					{
						"name": "CopydataZohoCampaigns",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopydataZohoUsers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Zoho_API",
								"type": "DatasetReference",
								"parameters": {
									"relativeUrl": {
										"value": "@concat('https://www.zohoapis.eu/crm/v7/Campaigns?fields=Campaign_Name,Type,Status,', 'Native__Campaigns__Extn__Campaign_Subject,Parent_Campaign,Budgeted_Cost,Actual_Cost,Created_By,Native__Survey__Extn__Department_ID,Description,Layout,Tag,End_Date,Start_Date,Expected_Revenue,Linea_de_negocio,Modified_By,Currency,Num_sent,Owner,Native__Campaigns__Extn__Reply_to_Address,Expected_Response,Native__Campaigns__Extn__Sender_Address,Native__Campaigns__Extn__Sender_Name,Native__Survey__Extn__Survey,Native__Survey__Extn__Survey_Department,Native__Survey__Extn__Survey_Type,Native__Survey__Extn__Survey_URL,Exchange_Rate,Native__Webinar__Extn__Webinar_Duration,Native__Webinar__Extn__Webinar_Launch_URL,Native__Webinar__Extn__Webinar_Registration_URL,Native__Webinar__Extn__Webinar_Schedule')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "JsaZohoCampaigns.json"
								}
							}
						]
					},
					{
						"name": "CheckFolderExists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set variable Users",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If Modified Since Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adsl_json_delete",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": "@concat('lakehouse/zoho/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Condition Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('CheckFolderExists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Files in folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": "@concat('lakehouse/zoho/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "UntilContactos",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Wait3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(\n  equals(trim(variables('NextPageToken')), ''),\n  equals(variables('NextPageToken'), null)\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "GetNextPageTokenContactos",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopydataZohoContactos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": "@concat('lakehouse/zoho/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
												"filename": {
													"value": "@concat('JsaZohoContacts_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "SetNextPageTokenContactos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounterContactos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextPageToken",
										"value": {
											"value": "@activity('GetNextPageTokenContactos').output.firstRow.info.next_page_token\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LogtokenContactos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetNextPageTokenContactos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Log_Token",
										"value": {
											"value": "@string(variables('NextPageToken'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounterContactos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNextPageTokenContactos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PageCounterContactos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounterContactos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CopydataZohoContactos",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"Authorization": {
													"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
													"type": "Expression"
												},
												"If-Modified-Since": {
													"value": "@variables('If-Modified-Since')",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Zoho_API",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@if(\n    or(equals(variables('NextPageToken'), null), equals(variables('NextPageToken'), '')),\n    'https://www.zohoapis.eu/crm/v7/Contacts?fields=Email,Mailing_Zip,Other_Zip,Mailing_Street,Other_State,woztellplatformintegration__WhatsApp_Opt_Out,Other_Country,Sexo,Profesion,First_Name,Phone,Estudios,Mailing_Country,recibir_comunicacion,id,Apellidos_2,Provincia,ID_Classlife,Date_of_Birth,Tipo_de_contacto,Mailing_City,Other_City,Home_Phone1,Other_Street,Mobile,Residencia,Nacionalidad,Secondary_Email,Tipo_de_cliente,DNI,ltima_L_nea_de_negocio,Created_time,Modified_Time',\n    concat('https://www.zohoapis.eu/crm/v7/Contacts?fields=Email,Mailing_Zip,Other_Zip,Mailing_Street,Other_State,woztellplatformintegration__WhatsApp_Opt_Out,Other_Country,Sexo,Profesion,First_Name,Phone,Estudios,Mailing_Country,recibir_comunicacion,id,Apellidos_2,Provincia,ID_Classlife,Date_of_Birth,Tipo_de_contacto,Mailing_City,Other_City,Home_Phone1,Other_Street,Mobile,Residencia,Nacionalidad,Secondary_Email,Tipo_de_cliente,DNI,ltima_L_nea_de_negocio,Created_time,Modified_Time&page_token=', variables('NextPageToken'))\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoContacts_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Wait3",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "CopydataZohoCampaigns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.256013fabf162c6a30e7260b66598da2.d706caedd894d618249377cda8b5cf15"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Zoho_API')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json_delete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_SalesBronze')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineClientifyDealsBronze",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsBronze",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dayToLoad": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipelineOdooLeadBronze",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_OdooLeadBronze",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dayToLoad": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsBronze_IdForDelete",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsBronze_IdForDelete",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Old"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsBronze')]",
				"[concat(variables('factoryId'), '/pipelines/p_OdooLeadBronze')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsBronze_IdForDelete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_SalesBronzeF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineClientifyDealsBronzeF0",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsBronzeF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dayToLoad": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipelineOdooLeadBronzeF0",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_OdooLeadBronzeF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dayToLoad": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsBronzeF0_LostReason",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsBronzeF0_LostReason",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dayToLoad": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsBronzeF0_IdForDelete",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsBronzeF0_IdForDelete",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"folder": {
					"name": "LakehouseF0/BronzeF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsBronzeF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_OdooLeadBronzeF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsBronzeF0_LostReason')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsBronzeF0_IdForDelete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_SalesBronzeF0_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineClientifyDealsBronzeF0_Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsBronzeF0_Full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineOdooLeadBronzeF0_Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_OdooLeadBronzeF0_Full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsBronzeF0_LostReason_Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsBronzeF0_LostReason_Full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsBronzeF0_IdForDelete",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsBronzeF0_IdForDelete",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/BronzeF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsBronzeF0_Full')]",
				"[concat(variables('factoryId'), '/pipelines/p_OdooLeadBronzeF0_Full')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsBronzeF0_LostReason_Full')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsBronzeF0_IdForDelete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_SalesBronzeF0_Full_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineClientifyDealsBronzeF0_Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsBronzeF0_Full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineOdooLeadBronzeF0_Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_OdooLeadBronzeF0_Full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/BronzeF0"
				},
				"annotations": [],
				"lastPublishTime": "2024-11-25T09:21:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsBronzeF0_Full')]",
				"[concat(variables('factoryId'), '/pipelines/p_OdooLeadBronzeF0_Full')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_SalesBronzeF0_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineClientifyDealsBronzeF0",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsBronzeF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dayToLoad": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ExecutePipelineOdooLeadBronzeF0",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_OdooLeadBronzeF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dayToLoad": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"folder": {
					"name": "LakehouseF0/BronzeF0"
				},
				"annotations": [],
				"lastPublishTime": "2024-11-25T09:21:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsBronzeF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_OdooLeadBronzeF0')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_SalesBronze_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineClientifyDealsBronze_Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsBronze_Full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineOdooLeadBronze_Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_OdooLeadBronze_Full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsBronze_IdForDelete",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsBronze_IdForDelete",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Old"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsBronze_Full')]",
				"[concat(variables('factoryId'), '/pipelines/p_OdooLeadBronze_Full')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsBronze_IdForDelete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_SalesDWHF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowSalesDWHF0",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_SalesDWHF0",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceSalesGoldF0": {},
									"sink1": {
										"schema": "public",
										"table": "f0sales"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/DWHF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_SalesDWHF0')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_SalesGoldF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineClientifyDealsGoldF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineOdooLeadGoldF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsGoldF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineOdooLeadGoldF0",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_OdooLeadGoldF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsGoldF0_LeadsNetosPhone",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "ExecutePipelineClientifyDealsGoldF0_IdForDelete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsGoldF0_LeadsNetosPhone",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsGoldF0_LeadsNetosEmail",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "ExecutePipelineClientifyDealsGoldF0_LeadsNetosPhone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsGoldF0_LeadsNetosEmail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsGoldF0_LostReason",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineClientifyDealsGoldF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsGoldF0_LostReason",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsGoldF0_IdForDelete",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineClientifyDealsGoldF0_LostReason",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsGoldF0_IdForDelete",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/GoldF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsGoldF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_OdooLeadGoldF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsGoldF0_LeadsNetosPhone')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsGoldF0_LeadsNetosEmail')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsGoldF0_LostReason')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsGoldF0_IdForDelete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_SalesGoldF0_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowSalesGoldF0_Full",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_SalesGoldF0_Full",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceClientifyDealsSilverF0": {},
									"sourceOdooLeadSilverF0": {},
									"sinkVentasGoldF0": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/GoldF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_SalesGoldF0_Full')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_SalesGoldF0_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineClientifyDealsGoldF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineOdooLeadGoldF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsGoldF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineOdooLeadGoldF0",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_OdooLeadGoldF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsGoldF0_LeadsNetosPhone",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineClientifyDealsGoldF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsGoldF0_LeadsNetosPhone",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsGoldF0_LeadsNetosEmail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineClientifyDealsGoldF0_LeadsNetosPhone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsGoldF0_LeadsNetosEmail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/GoldF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsGoldF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_OdooLeadGoldF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsGoldF0_LeadsNetosPhone')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsGoldF0_LeadsNetosEmail')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_SalesGoldF0_copy2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineClientifyDealsGoldF0",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineOdooLeadGoldF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsGoldF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineOdooLeadGoldF0",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_OdooLeadGoldF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsGoldF0_LeadsNetosPhone",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineClientifyDealsGoldF0_LostReason",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsGoldF0_LeadsNetosPhone",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsGoldF0_LeadsNetosEmail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineClientifyDealsGoldF0_LeadsNetosPhone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsGoldF0_LeadsNetosEmail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsGoldF0_LostReason",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineClientifyDealsGoldF0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsGoldF0_LostReason",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/GoldF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsGoldF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_OdooLeadGoldF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsGoldF0_LeadsNetosPhone')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsGoldF0_LeadsNetosEmail')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsGoldF0_LostReason')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_SalesSilver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SalesSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks,'SalesSilver')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SalesIdDeletedSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "SalesSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks,'SalesIdDeletedSilver')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"silver_storage_databricks": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Lakehouse/Silver"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_SalesSilverF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineClientifyDealsSilverF0",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsSilverF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineOdooLeadSilverF0",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_OdooLeadSilverF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsSilverF0_LostReason",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsSilverF0_LostReason",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineClientifyDealsSilverF0_IdForDelete",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsSilverF0_IdForDelete",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/SilverF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsSilverF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_OdooLeadSilverF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsSilverF0_LostReason')]",
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsSilverF0_IdForDelete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_SalesSilverF0_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineClientifyDealsSilverF0",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_ClientifyDealsSilverF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineOdooLeadSilverF0",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_OdooLeadSilverF0",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/SilverF0"
				},
				"annotations": [],
				"lastPublishTime": "2024-11-25T09:24:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_ClientifyDealsSilverF0')]",
				"[concat(variables('factoryId'), '/pipelines/p_OdooLeadSilverF0')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ZohoFisiofocusSilver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ZohoContactsSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ZohoDealsSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'ZohoContacts')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ZohoDealsSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'ZohoDeals')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ZohoLeadsSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'ZohoLeads')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ZohoUsersSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ZohoLeadsSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'ZohoUsers')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ZohoCampaignsSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ZohoContactsSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'ZohoCampaigns')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Tablon_Leads_and_DealsSilver",
						"type": "DatabricksNotebook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "ZohoCampaignsSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ZohoUsersSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'Tablon_Leads_and_Deals')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"silver_storage_databricks": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Lakehouse/Silver"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-03T16:56:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Zoho_38b')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebZohoAPI",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://accounts.zoho.eu/oauth/v2/token",
							"body": {
								"value": "@concat('client_id=', pipeline().parameters.client_id, \n        '&client_secret=', pipeline().parameters.client_secret,\n        '&refresh_token=', pipeline().parameters.refresh_token,\n        '&grant_type=refresh_token')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set variable Users",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "WebActivityName",
							"value": {
								"value": "@activity('WebZohoAPI').output.access_token\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Modified Since Date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "If-Modified-Since",
							"value": {
								"value": "@formatDateTime(addDays(utcnow(), if(equals(pipeline().parameters.reprocessDate, ''), -7, sub(0, int(pipeline().parameters.reprocessDate)))), 'yyyy-MM-ddTHH:mm:ssZ')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UntilDeals",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "If Condition Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(\n  equals(trim(variables('NextPageToken')), ''),\n  equals(variables('NextPageToken'), null)\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopydataZohoDeals",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"Authorization": {
													"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
													"type": "Expression"
												},
												"If-Modified-Since": {
													"value": "@variables('If-Modified-Since')",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Zoho_API",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@if(\n    or(equals(variables('NextPageToken'), null), equals(variables('NextPageToken'), '')),\n    'https://www.zohoapis.eu/crm/v7/Deals?per_page=200&fields=Motivo_p_rdida_B2C,ID_Producto,Owner,Motivo_p_rdida_B2B,Residencia1,utm_type,utm_medium,utm_campaign_name,br_rating,Deal_Name,Exchange_Rate,Currency,Stage,id,utm_ad_id,ID_Classlife,utm_campaign_id,Importe_pagado,br_score,utm_perfil,C_digo_descuento,L_nea_de_Negocio,utm_source,Descuento,Closing_Date,utm_adset_id,utm_estrategia,tipo_conversion,Amount,Probability,Contact_Name.id,Pipeline,Competencia,utm_term,utm_channel,Tipolog_a_de_cliente,Created_Date,Modified_Time,ID_Lead,Fecha_hora_Pagado_NE,Fecha_hora_Anulaci_n,Nacionalidad1,lead_correlation_id,id_unico,Tipolog_a_del_alumno1,Contact_Name,Created_Time,ID_clientify,Modalidad_de_curso',\n    concat('https://www.zohoapis.eu/crm/v7/Deals?per_page=200&page_token=', variables('NextPageToken'), '&fields=Motivo_p_rdida_B2C,ID_Producto,Owner,Motivo_p_rdida_B2B,Residencia1,utm_type,utm_medium,utm_campaign_name,br_rating,Deal_Name,Exchange_Rate,Currency,Stage,id,utm_ad_id,ID_Classlife,utm_campaign_id,Importe_pagado,br_score,utm_perfil,C_digo_descuento,L_nea_de_Negocio,utm_source,Descuento,Closing_Date,utm_adset_id,utm_estrategia,tipo_conversion,Amount,Probability,Contact_Name.id,Pipeline,Competencia,utm_term,utm_channel,Tipolog_a_de_cliente,Created_Date,Modified_Time,ID_Lead,Fecha_hora_Pagado_NE,Fecha_hora_Anulaci_n,Nacionalidad1,lead_correlation_id,id_unico,Tipolog_a_del_alumno1,Contact_Name,Created_Time,ID_clientify,Modalidad_de_curso')\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": "@concat('JsaZohoDeals_', string(variables('PageCounter')), '.json')"
											}
										}
									]
								},
								{
									"name": "GetNextPageTokenDeals",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopydataZohoDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": "@concat('JsaZohoDeals_', string(variables('PageCounter')), '.json')"
											}
										}
									}
								},
								{
									"name": "Set NextPageTokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextPageToken",
										"value": {
											"value": "@activity('GetNextPageTokenDeals').output.firstRow.info.next_page_token",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LogtokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set NextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Log_Token",
										"value": {
											"value": "@string(variables('NextPageToken'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PageCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "UntilLeads",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(\n  equals(trim(variables('NextPageToken')), ''),\n  equals(variables('NextPageToken'), null)\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get NextPageTokenLeads",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopydataZohoLeads",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoLeads_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "SetNextPageTokenLeads",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounterLeads",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextPageToken",
										"value": {
											"value": "@activity('Get NextPageTokenLeads').output.firstRow.info.next_page_token\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LogtokenLeads",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetNextPageTokenLeads",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Log_Token",
										"value": {
											"value": "@string(variables('NextPageToken'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounterLeads",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get NextPageTokenLeads",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PageCounterLeads",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounterLeads",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CopydataZohoLeads",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"Authorization": {
													"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
													"type": "Expression"
												},
												"If-Modified-Since": {
													"value": "@variables('If-Modified-Since')",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Zoho_API",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@if(\n    or(equals(variables('NextPageToken'), null), equals(variables('NextPageToken'), '')),\n    'https://www.zohoapis.eu/crm/v7/Leads?per_page=200&fields=Created_Date,Apellido_2,Description,device,Email,First_Name,id,id_producto,id_programa,Last_Name,lead_correlation_id,lead_rating,lead_scoring,Lead_Source,Lead_Status,Mobile,Motivos_de_perdida,Nacionalidad,Owner,Phone,Provincia,Residencia,Sexo,source,Tipolog_a_de_cliente,Typo_Conversion,utm_ad_id,utm_adset_id,utm_campaign_id,utm_campaign_name,utm_channel,utm_estrategia,utm_medium,utm_perfil,utm_source,utm_term,utm_type,Modified_Time,Created_Time,L_nea_de_Negocio,Oportunidad_Asociada,ID_Clientify,Modalidad_de_curso,Sede',\n    concat('https://www.zohoapis.eu/crm/v7/Leads?per_page=200&page_token=', variables('NextPageToken'), '&fields=Created_Date,Apellido_2,Description,device,Email,First_Name,id,id_producto,id_programa,Last_Name,lead_correlation_id,lead_rating,lead_scoring,Lead_Source,Lead_Status,Mobile,Motivos_de_perdida,Nacionalidad,Owner,Phone,Provincia,Residencia,Sexo,source,Tipolog_a_de_cliente,Typo_Conversion,utm_ad_id,utm_adset_id,utm_campaign_id,utm_campaign_name,utm_channel,utm_estrategia,utm_medium,utm_perfil,utm_source,utm_term,utm_type,Modified_Time,Created_Time,L_nea_de_Negocio,Oportunidad_Asociada,ID_Clientify,Modalidad_de_curso,Sede')\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoLeads_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "UntilDeals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 30
						}
					},
					{
						"name": "Wait2",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "UntilLeads",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 30
						}
					},
					{
						"name": "CopydataZohoUsers",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Zoho_API",
								"type": "DatasetReference",
								"parameters": {
									"relativeUrl": {
										"value": "@concat('https://www.zohoapis.eu/crm/v7/users?type=AllUsers')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "JsaZohoUsers.json"
								}
							}
						]
					},
					{
						"name": "CopydataZohoCampaigns",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopydataZohoUsers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Zoho_API",
								"type": "DatasetReference",
								"parameters": {
									"relativeUrl": {
										"value": "@concat('https://www.zohoapis.eu/crm/v7/Campaigns?fields=Campaign_Name,Type,Status,', 'Native__Campaigns__Extn__Campaign_Subject,Parent_Campaign,Budgeted_Cost,Actual_Cost,Created_By,Native__Survey__Extn__Department_ID,Description,Layout,Tag,End_Date,Start_Date,Expected_Revenue,Linea_de_negocio,Modified_By,Currency,Num_sent,Owner,Native__Campaigns__Extn__Reply_to_Address,Expected_Response,Native__Campaigns__Extn__Sender_Address,Native__Campaigns__Extn__Sender_Name,Native__Survey__Extn__Survey,Native__Survey__Extn__Survey_Department,Native__Survey__Extn__Survey_Type,Native__Survey__Extn__Survey_URL,Exchange_Rate,Native__Webinar__Extn__Webinar_Duration,Native__Webinar__Extn__Webinar_Launch_URL,Native__Webinar__Extn__Webinar_Registration_URL,Native__Webinar__Extn__Webinar_Schedule')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "JsaZohoCampaigns.json"
								}
							}
						]
					},
					{
						"name": "CheckFolderExists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set variable Users",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If Modified Since Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adsl_json_delete",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho_38b/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Condition Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('CheckFolderExists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Files in folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "UntilContactos",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Wait3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(\n  equals(trim(variables('NextPageToken')), ''),\n  equals(variables('NextPageToken'), null)\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "GetNextPageTokenContactos",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopydataZohoContactos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoContacts_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "SetNextPageTokenContactos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounterContactos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextPageToken",
										"value": {
											"value": "@activity('GetNextPageTokenContactos').output.firstRow.info.next_page_token\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LogtokenContactos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetNextPageTokenContactos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Log_Token",
										"value": {
											"value": "@string(variables('NextPageToken'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounterContactos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNextPageTokenContactos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PageCounterContactos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounterContactos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CopydataZohoContactos",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"Authorization": {
													"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
													"type": "Expression"
												},
												"If-Modified-Since": {
													"value": "@variables('If-Modified-Since')",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Zoho_API",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@if(\n    or(equals(variables('NextPageToken'), null), equals(variables('NextPageToken'), '')),\n    'https://www.zohoapis.eu/crm/v7/Contacts?fields=Email,Mailing_Zip,Other_Zip,Mailing_Street,Other_State,woztellplatformintegration__WhatsApp_Opt_Out,Other_Country,Sexo,Profesion,First_Name,Phone,Estudios,Mailing_Country,recibir_comunicacion,id,Apellidos_2,Provincia,ID_Classlife,Date_of_Birth,Tipo_de_contacto,Mailing_City,Other_City,Home_Phone1,Other_Street,Mobile,Residencia,Nacionalidad,Secondary_Email,Tipo_de_cliente,DNI,ltima_L_nea_de_negocio,Created_time,Modified_Time',\n    concat('https://www.zohoapis.eu/crm/v7/Contacts?fields=Email,Mailing_Zip,Other_Zip,Mailing_Street,Other_State,woztellplatformintegration__WhatsApp_Opt_Out,Other_Country,Sexo,Profesion,First_Name,Phone,Estudios,Mailing_Country,recibir_comunicacion,id,Apellidos_2,Provincia,ID_Classlife,Date_of_Birth,Tipo_de_contacto,Mailing_City,Other_City,Home_Phone1,Other_Street,Mobile,Residencia,Nacionalidad,Secondary_Email,Tipo_de_cliente,DNI,ltima_L_nea_de_negocio,Created_time,Modified_Time&page_token=', variables('NextPageToken'))\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoContacts_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Wait3",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "CopydataZohoCampaigns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 30
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Zoho"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Zoho_API')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json_delete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Zoho_38b_notebooks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebZohoAPI",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://accounts.zoho.eu/oauth/v2/token",
							"body": {
								"value": "@concat('client_id=', pipeline().parameters.client_id, \n        '&client_secret=', pipeline().parameters.client_secret,\n        '&refresh_token=', pipeline().parameters.refresh_token,\n        '&grant_type=refresh_token')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set variable Users",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "WebActivityName",
							"value": {
								"value": "@activity('WebZohoAPI').output.access_token\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Modified Since Date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "If-Modified-Since",
							"value": {
								"value": "@formatDateTime(addDays(utcnow(), if(equals(pipeline().parameters.reprocessDate, ''), -7, sub(0, int(pipeline().parameters.reprocessDate)))), 'yyyy-MM-ddTHH:mm:ssZ')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UntilDeals",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "If Condition Delete",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(\n  equals(trim(variables('NextPageToken')), ''),\n  equals(variables('NextPageToken'), null)\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopydataZohoDeals",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"Authorization": {
													"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
													"type": "Expression"
												},
												"If-Modified-Since": {
													"value": "@variables('If-Modified-Since')",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Zoho_API",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@if(\n    or(equals(variables('NextPageToken'), null), equals(variables('NextPageToken'), '')),\n    'https://www.zohoapis.eu/crm/v7/Deals?per_page=200&fields=Motivo_p_rdida_B2C,ID_Producto,Owner,Motivo_p_rdida_B2B,Residencia1,utm_type,utm_medium,utm_campaign_name,br_rating,Deal_Name,Exchange_Rate,Currency,Stage,id,utm_ad_id,ID_Classlife,utm_campaign_id,Importe_pagado,br_score,utm_perfil,C_digo_descuento,L_nea_de_Negocio,utm_source,Descuento,Closing_Date,utm_adset_id,utm_estrategia,tipo_conversion,Amount,Probability,Contact_Name.id,Pipeline,Competencia,utm_term,utm_channel,Tipolog_a_de_cliente,Created_Date,Modified_Time,ID_Lead,Fecha_hora_Pagado_NE,Fecha_hora_Anulaci_n,Nacionalidad1,lead_correlation_id,id_unico,Tipolog_a_del_alumno1,Contact_Name,Created_Time,ID_clientify,Modalidad_de_curso',\n    concat('https://www.zohoapis.eu/crm/v7/Deals?per_page=200&page_token=', variables('NextPageToken'), '&fields=Motivo_p_rdida_B2C,ID_Producto,Owner,Motivo_p_rdida_B2B,Residencia1,utm_type,utm_medium,utm_campaign_name,br_rating,Deal_Name,Exchange_Rate,Currency,Stage,id,utm_ad_id,ID_Classlife,utm_campaign_id,Importe_pagado,br_score,utm_perfil,C_digo_descuento,L_nea_de_Negocio,utm_source,Descuento,Closing_Date,utm_adset_id,utm_estrategia,tipo_conversion,Amount,Probability,Contact_Name.id,Pipeline,Competencia,utm_term,utm_channel,Tipolog_a_de_cliente,Created_Date,Modified_Time,ID_Lead,Fecha_hora_Pagado_NE,Fecha_hora_Anulaci_n,Nacionalidad1,lead_correlation_id,id_unico,Tipolog_a_del_alumno1,Contact_Name,Created_Time,ID_clientify,Modalidad_de_curso')\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": "@concat('JsaZohoDeals_', string(variables('PageCounter')), '.json')"
											}
										}
									]
								},
								{
									"name": "GetNextPageTokenDeals",
									"type": "Lookup",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": "@concat('JsaZohoDeals_', string(variables('PageCounter')), '.json')"
											}
										}
									}
								},
								{
									"name": "Set NextPageTokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextPageToken",
										"value": {
											"value": "@activity('GetNextTokenFromNotebook').output.runOutput",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LogtokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set NextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Log_Token",
										"value": {
											"value": "@string(variables('NextPageToken'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNextTokenFromNotebook",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PageCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "GetNextTokenFromNotebook",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "CopydataZohoDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@concat(pipeline().parameters.silver_storage_databricks,'zoho_38b/PRUEBA_ZohoDeals_38b')",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_AzureDatabricks",
										"type": "LinkedServiceReference"
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "UntilLeads",
						"type": "Until",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(\n  equals(trim(variables('NextPageToken')), ''),\n  equals(variables('NextPageToken'), null)\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get NextPageTokenLeads",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopydataZohoLeads",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoLeads_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "SetNextPageTokenLeads",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounterLeads",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextPageToken",
										"value": {
											"value": "@activity('Get NextPageTokenLeads').output.firstRow.info.next_page_token\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LogtokenLeads",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetNextPageTokenLeads",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Log_Token",
										"value": {
											"value": "@string(variables('NextPageToken'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounterLeads",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get NextPageTokenLeads",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PageCounterLeads",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounterLeads",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CopydataZohoLeads",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"Authorization": {
													"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
													"type": "Expression"
												},
												"If-Modified-Since": {
													"value": "@variables('If-Modified-Since')",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Zoho_API",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@if(\n    or(equals(variables('NextPageToken'), null), equals(variables('NextPageToken'), '')),\n    'https://www.zohoapis.eu/crm/v7/Leads?per_page=200&fields=Created_Date,Apellido_2,Description,device,Email,First_Name,id,id_producto,id_programa,Last_Name,lead_correlation_id,lead_rating,lead_scoring,Lead_Source,Lead_Status,Mobile,Motivos_de_perdida,Nacionalidad,Owner,Phone,Provincia,Residencia,Sexo,source,Tipolog_a_de_cliente,Typo_Conversion,utm_ad_id,utm_adset_id,utm_campaign_id,utm_campaign_name,utm_channel,utm_estrategia,utm_medium,utm_perfil,utm_source,utm_term,utm_type,Modified_Time,Created_Time,L_nea_de_Negocio,Oportunidad_Asociada,ID_Clientify,Modalidad_de_curso,Sede',\n    concat('https://www.zohoapis.eu/crm/v7/Leads?per_page=200&page_token=', variables('NextPageToken'), '&fields=Created_Date,Apellido_2,Description,device,Email,First_Name,id,id_producto,id_programa,Last_Name,lead_correlation_id,lead_rating,lead_scoring,Lead_Source,Lead_Status,Mobile,Motivos_de_perdida,Nacionalidad,Owner,Phone,Provincia,Residencia,Sexo,source,Tipolog_a_de_cliente,Typo_Conversion,utm_ad_id,utm_adset_id,utm_campaign_id,utm_campaign_name,utm_channel,utm_estrategia,utm_medium,utm_perfil,utm_source,utm_term,utm_type,Modified_Time,Created_Time,L_nea_de_Negocio,Oportunidad_Asociada,ID_Clientify,Modalidad_de_curso,Sede')\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoLeads_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "UntilDeals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 30
						}
					},
					{
						"name": "Wait2",
						"type": "Wait",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "UntilLeads",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 30
						}
					},
					{
						"name": "CopydataZohoUsers",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Wait2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Zoho_API",
								"type": "DatasetReference",
								"parameters": {
									"relativeUrl": {
										"value": "@concat('https://www.zohoapis.eu/crm/v7/users?type=AllUsers')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "JsaZohoUsers.json"
								}
							}
						]
					},
					{
						"name": "CopydataZohoCampaigns",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "CopydataZohoUsers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Content-Type": "application/json",
									"Authorization": {
										"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Zoho_API",
								"type": "DatasetReference",
								"parameters": {
									"relativeUrl": {
										"value": "@concat('https://www.zohoapis.eu/crm/v7/Campaigns?fields=Campaign_Name,Type,Status,', 'Native__Campaigns__Extn__Campaign_Subject,Parent_Campaign,Budgeted_Cost,Actual_Cost,Created_By,Native__Survey__Extn__Department_ID,Description,Layout,Tag,End_Date,Start_Date,Expected_Revenue,Linea_de_negocio,Modified_By,Currency,Num_sent,Owner,Native__Campaigns__Extn__Reply_to_Address,Expected_Response,Native__Campaigns__Extn__Sender_Address,Native__Campaigns__Extn__Sender_Name,Native__Survey__Extn__Survey,Native__Survey__Extn__Survey_Department,Native__Survey__Extn__Survey_Type,Native__Survey__Extn__Survey_URL,Exchange_Rate,Native__Webinar__Extn__Webinar_Duration,Native__Webinar__Extn__Webinar_Launch_URL,Native__Webinar__Extn__Webinar_Registration_URL,Native__Webinar__Extn__Webinar_Schedule')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "JsaZohoCampaigns.json"
								}
							}
						]
					},
					{
						"name": "CheckFolderExists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set variable Users",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If Modified Since Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adsl_json_delete",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/zoho_38b/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Condition Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('CheckFolderExists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Files in folder",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/', formatDateTime(utcnow(),'yyyy'), '/', formatDateTime(utcnow(),'MM'), '/', formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "UntilContactos",
						"type": "Until",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Wait3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(\n  equals(trim(variables('NextPageToken')), ''),\n  equals(variables('NextPageToken'), null)\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "GetNextPageTokenContactos",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopydataZohoContactos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoContacts_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "SetNextPageTokenContactos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounterContactos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextPageToken",
										"value": {
											"value": "@activity('GetNextPageTokenContactos').output.firstRow.info.next_page_token\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LogtokenContactos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetNextPageTokenContactos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Log_Token",
										"value": {
											"value": "@string(variables('NextPageToken'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounterContactos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNextPageTokenContactos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PageCounterContactos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounterContactos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CopydataZohoContactos",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"Authorization": {
													"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
													"type": "Expression"
												},
												"If-Modified-Since": {
													"value": "@variables('If-Modified-Since')",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Zoho_API",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@if(\n    or(equals(variables('NextPageToken'), null), equals(variables('NextPageToken'), '')),\n    'https://www.zohoapis.eu/crm/v7/Contacts?fields=Email,Mailing_Zip,Other_Zip,Mailing_Street,Other_State,woztellplatformintegration__WhatsApp_Opt_Out,Other_Country,Sexo,Profesion,First_Name,Phone,Estudios,Mailing_Country,recibir_comunicacion,id,Apellidos_2,Provincia,ID_Classlife,Date_of_Birth,Tipo_de_contacto,Mailing_City,Other_City,Home_Phone1,Other_Street,Mobile,Residencia,Nacionalidad,Secondary_Email,Tipo_de_cliente,DNI,ltima_L_nea_de_negocio,Created_time,Modified_Time',\n    concat('https://www.zohoapis.eu/crm/v7/Contacts?fields=Email,Mailing_Zip,Other_Zip,Mailing_Street,Other_State,woztellplatformintegration__WhatsApp_Opt_Out,Other_Country,Sexo,Profesion,First_Name,Phone,Estudios,Mailing_Country,recibir_comunicacion,id,Apellidos_2,Provincia,ID_Classlife,Date_of_Birth,Tipo_de_contacto,Mailing_City,Other_City,Home_Phone1,Other_Street,Mobile,Residencia,Nacionalidad,Secondary_Email,Tipo_de_cliente,DNI,ltima_L_nea_de_negocio,Created_time,Modified_Time&page_token=', variables('NextPageToken'))\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoContacts_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Wait3",
						"type": "Wait",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "CopydataZohoCampaigns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 30
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "7"
					},
					"silver_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Silver/"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Zoho"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Zoho_API')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json_delete')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Zoho_FP_Silver_38b')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ZohoContactsSilver_38b",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ZohoDealsSilver_38b",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'zoho_38b/ZohoContacts_38b')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ZohoDealsSilver_38b",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'zoho_38b/ZohoDeals_38b')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ZohoLeadsSilver_38b",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'zoho_38b/ZohoLeads_38b')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ZohoUsersSilver_38b",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ZohoLeadsSilver_38b",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'zoho_38b/ZohoUsers_38b')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ZohoCiclosSilver_38b",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ZohoContactsSilver_38b",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'zoho_38b/ZohoCiclos_38b')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ZohoProgramasSilver_38b",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ZohoUsersSilver_38b",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'zoho_38b/ZohoProgramas_38b')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"silver_storage_databricks": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Lakehouse/Silver"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-03T16:56:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_dim_gold')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dim_campania_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_programa_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_campania_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_comercial_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_producto_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_comercial_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_estado_venta_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_vertical_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_estado_venta_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_etapa_venta_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_tipo_formacion_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_etapa_venta_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_institucion_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_estado_venta_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_institucion_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_localidad_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_etapa_venta_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_localidad_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_modalidad_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_producto_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_modalidad_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_motivo_cierre_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_jerarquia_marketing_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_motivo_cierre_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_motivo_perdida_llamada_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_tipo_negocio_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_motivo_perdida_llamada_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_origen_campania_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_estudiante",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_origen_campania_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_sede_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_producto_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_sede_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_tipo_formacion_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_especialidad_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_tipo_formacion_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_tipo_negocio_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_modalidad_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_tipo_negocio_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_producto_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_producto_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_programa_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_producto_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_programa_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_vertical_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_motivo_perdida_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_vertical_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_entidad_legal_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_producto_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_entidad_legal_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_motivo_perdida_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_producto_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_motivo_perdida_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_especialidad_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_producto_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_especialidad_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_jerarquia_marketing_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_sede_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_jerarquia_marketing_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_estado_matricula",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_entidad_legal_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_estado_matricula')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_estudiante",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_estado_matricula",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_estudiante')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "dim_concepto_cobro_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_comercial_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_concepto_cobro_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_tipo_conversion_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_origen_campania_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_tipo_conversion_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dim_grupo_programa_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Dim_campania_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'dim_grupo_programa')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"gold_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Gold/"
					}
				},
				"folder": {
					"name": "Lakehouse/Gold"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-16T15:56:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_fct_gold')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fct_llamada_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'fct_llamada_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fct_venta_gold",
						"type": "DatabricksNotebook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'fct_venta_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fct_venta_zoho_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'fct_venta_zoho_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Fct_matricula_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'fct_matricula_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "fct_recibos_gold",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'fct_recibos_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"gold_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Gold/"
					}
				},
				"folder": {
					"name": "Lakehouse/Gold"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-05T11:43:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BudgetMetrodora')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adsl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "bronze"
					},
					"folder": {
						"type": "string",
						"defaultValue": "budget"
					},
					"filename": {
						"type": "string",
						"defaultValue": "FctBudget"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Aircall')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Aircall",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"relativeurl": {
						"type": "string",
						"defaultValue": "v1/calls?per_page=50"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().relativeurl",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_Aircall')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Classlife')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Classlife",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"relativeUrl": {
						"type": "string",
						"defaultValue": "/enroll_groups"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().relativeUrl",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_Classlife')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Clientify')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Clientify",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"relativeurl": {
						"type": "string",
						"defaultValue": "v1/deals/?page_size=250"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().relativeurl",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_Clientify')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Clientify_Ciep')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Clientify",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"relativeurl": {
						"type": "string",
						"defaultValue": "v1/deals/?page_size=250"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().relativeurl",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_Clientify')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Clientify_Fp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Clientify",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"relativeurl": {
						"type": "string",
						"defaultValue": "v1/deals/?page_size=250"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().relativeurl",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_Clientify')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Odoo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Odoo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_Odoo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_PostgreSql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_PostgreSql",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string",
						"defaultValue": "public"
					},
					"table": {
						"type": "string",
						"defaultValue": "f0calls"
					}
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_PostgreSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Zoho_API')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Zoho",
					"type": "LinkedServiceReference",
					"parameters": {
						"access_token": "1000.6a14e39d5caac09fc6308b3de63ef181.8e42c15e2b69e73cd01e6ac2adfb5d34"
					}
				},
				"parameters": {
					"relativeUrl": {
						"type": "string",
						"defaultValue": "@dataset().relativeUrl"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().relativeUrl",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_Zoho')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adsl_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adsl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "master"
					},
					"folder": {
						"type": "string",
						"defaultValue": "Budget"
					},
					"filename": {
						"type": "string",
						"defaultValue": "masterbudget.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ";",
					"encodingName": "ISO-8859-1",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adsl_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adsl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "bronze"
					},
					"folder": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adsl_json_delete')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adsl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "bronze"
					},
					"folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adsl_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adsl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "bronze"
					},
					"folder": {
						"type": "string",
						"defaultValue": "budget"
					},
					"filename": {
						"type": "string",
						"defaultValue": "masterbudget.parquet"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adsl_xlsx')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adsl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "master"
					},
					"folder": {
						"type": "string",
						"defaultValue": "budgetobjetivos"
					},
					"filename": {
						"type": "string",
						"defaultValue": "masterbudget.csv"
					},
					"sheetname": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().sheetname",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpSharepointMetrodora')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpSharepointMetrodora_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('HttpSharepointMetrodora_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('HttpSharepointMetrodora_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_Aircall')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ls_Aircall_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('ls_Aircall_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "aircallpwd"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureDatabricks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-22519509287058.18.azuredatabricks.net",
					"authentication": "MSI",
					"workspaceResourceId": "/subscriptions/736f3166-527e-4261-9240-edec12d189d7/resourceGroups/rg-lakehouse-pro/providers/Microsoft.Databricks/workspaces/dbw-metrodoralakehouse-pro",
					"existingClusterId": "[parameters('ls_AzureDatabricks_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_Classlife')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "LinkedService to Classlife",
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ls_Classlife_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_Clientify')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ls_Clientify_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_KeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_KeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_Odoo')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ls_Odoo_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_PostgreSql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('ls_PostgreSql_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "psqlpwd"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_Zoho')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"access_token": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ls_Zoho_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_adsl')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adsl_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "adslkey"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger_master')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Executed trigger master",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "p_Master_Metrodora",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2025-03-24T15:15:00",
						"timeZone": "Romance Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								4
							],
							"weekDays": [
								"Sunday",
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday",
								"Saturday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_Master_Metrodora')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_AircallCallsGoldF0')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceAircallCallsSilver"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceCallsGoldF0"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkCallsGoldF0"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "MapDriftedAircallCallsSilver",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "MapDriftedCallsGoldF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "selectCallsGoldF0"
						},
						{
							"name": "aggregateMaxprocessdate"
						},
						{
							"name": "sort1"
						},
						{
							"name": "join1"
						},
						{
							"name": "filterFinal"
						},
						{
							"name": "selectFinal"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/aircallcalls') ~> sourceAircallCallsSilver",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/calls') ~> sourceCallsGoldF0",
						"MapDriftedAircallCallsSilver select(mapColumn(",
						"          direction,",
						"          duration,",
						"          id,",
						"          started_at,",
						"          filepath,",
						"          processdate",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"sourceAircallCallsSilver derive(answered_at = toInteger(byName('answered_at')),",
						"          archived = toBoolean(byName('archived')),",
						"          asset = toString(byName('asset')),",
						"          assigned_to_availability_status = toString(byName('assigned_to_availability_status')),",
						"          assigned_to_available = toBoolean(byName('assigned_to_available')),",
						"          assigned_to_created_at = toString(byName('assigned_to_created_at')),",
						"          assigned_to_direct_link = toString(byName('assigned_to_direct_link')),",
						"          assigned_to_email = toString(byName('assigned_to_email')),",
						"          assigned_to_id = toInteger(byName('assigned_to_id')),",
						"          assigned_to_language = toString(byName('assigned_to_language')),",
						"          assigned_to_name = toString(byName('assigned_to_name')),",
						"          assigned_to_state = toString(byName('assigned_to_state')),",
						"          assigned_to_time_zone = toString(byName('assigned_to_time_zone')),",
						"          assigned_to_wrap_up_time = toBoolean(byName('assigned_to_wrap_up_time')),",
						"          contact = toString(byName('contact')),",
						"          cost = toDouble(byName('cost')),",
						"          country_code_a2 = toString(byName('country_code_a2')),",
						"          direct_link = toString(byName('direct_link')),",
						"          direction = toString(byName('direction')),",
						"          duration = toInteger(byName('duration')),",
						"          ended_at = toTimestamp(byName('ended_at')),",
						"          id = toString(byName('id')),",
						"          missed_call_reason = toString(byName('missed_call_reason')),",
						"          number_availability_status = toString(byName('number_availability_status')),",
						"          number_country = toString(byName('number_country')),",
						"          number_created_at = toString(byName('number_created_at')),",
						"          number_digits = toString(byName('number_digits')),",
						"          number_direct_link = toString(byName('number_direct_link')),",
						"          number_id = toInteger(byName('number_id')),",
						"          number_is_ivr = toBoolean(byName('number_is_ivr')),",
						"          number_live_recording_activated = toBoolean(byName('number_live_recording_activated')),",
						"          number_name = toString(byName('number_name')),",
						"          number_open = toBoolean(byName('number_open')),",
						"          number_priority = toString(byName('number_priority')),",
						"          number_time_zone = toString(byName('number_time_zone')),",
						"          number_msg_after_hours = toString(byName('number_msg_after_hours')),",
						"          number_msg_callback_later = toString(byName('number_msg_callback_later')),",
						"          number_msg_closed = toString(byName('number_msg_closed')),",
						"          number_msg_ivr = toString(byName('number_msg_ivr')),",
						"          number_msg_ringing_tone = toString(byName('number_msg_ringing_tone')),",
						"          number_msg_unanswered_call = toString(byName('number_msg_unanswered_call')),",
						"          number_msg_voicemail = toString(byName('number_msg_voicemail')),",
						"          number_msg_waiting = toString(byName('number_msg_waiting')),",
						"          number_msg_welcome = toString(byName('number_msg_welcome')),",
						"          pricing_type = toString(byName('pricing_type')),",
						"          raw_digits = toString(byName('raw_digits')),",
						"          recording = toString(byName('recording')),",
						"          recording_short_url = toString(byName('recording_short_url')),",
						"          sid = toString(byName('sid')),",
						"          started_at = toTimestamp(byName('started_at')),",
						"          status = toString(byName('status')),",
						"          transferred_by_authentication_token = toString(byName('transferred_by_authentication_token')),",
						"          transferred_by_company_id = toInteger(byName('transferred_by_company_id')),",
						"          transferred_by_created_at = toString(byName('transferred_by_created_at')),",
						"          transferred_by_custom_price = toString(byName('transferred_by_custom_price')),",
						"          transferred_by_custom_twilio_edge = toString(byName('transferred_by_custom_twilio_edge')),",
						"          transferred_by_custom_twilio_jitter_buffer_size = toString(byName('transferred_by_custom_twilio_jitter_buffer_size')),",
						"          transferred_by_custom_twilio_region = toString(byName('transferred_by_custom_twilio_region')),",
						"          transferred_by_default_out_number_id = toInteger(byName('transferred_by_default_out_number_id')),",
						"          transferred_by_default_prefix = toString(byName('transferred_by_default_prefix')),",
						"          transferred_by_deleted_at = toString(byName('transferred_by_deleted_at')),",
						"          transferred_by_email = toString(byName('transferred_by_email')),",
						"          transferred_by_first_name = toString(byName('transferred_by_first_name')),",
						"          transferred_by_id = toInteger(byName('transferred_by_id')),",
						"          transferred_by_intercom_android_hash = toString(byName('transferred_by_intercom_android_hash')),",
						"          transferred_by_intercom_hash = toString(byName('transferred_by_intercom_hash')),",
						"          transferred_by_is_admin = toBoolean(byName('transferred_by_is_admin')),",
						"          transferred_by_is_onboarded_for_teams_in_numbers = toBoolean(byName('transferred_by_is_onboarded_for_teams_in_numbers')),",
						"          transferred_by_is_onboarded_on_app = toBoolean(byName('transferred_by_is_onboarded_on_app')),",
						"          transferred_by_language = toString(byName('transferred_by_language')),",
						"          transferred_by_last_name = toString(byName('transferred_by_last_name')),",
						"          transferred_by_marked_for_deletion = toBoolean(byName('transferred_by_marked_for_deletion')),",
						"          transferred_by_migrated_on_authentication_manager = toBoolean(byName('transferred_by_migrated_on_authentication_manager')),",
						"          transferred_by_onboarding_step = toBoolean(byName('transferred_by_onboarding_step')),",
						"          transferred_by_phone_numbers_count = toBoolean(byName('transferred_by_phone_numbers_count')),",
						"          transferred_by_picture_url = toString(byName('transferred_by_picture_url')),",
						"          transferred_by_ring_timeout = toInteger(byName('transferred_by_ring_timeout')),",
						"          transferred_by_state = toString(byName('transferred_by_state')),",
						"          transferred_by_time_zone = toString(byName('transferred_by_time_zone')),",
						"          transferred_by_unavailable_until = toString(byName('transferred_by_unavailable_until')),",
						"          transferred_by_updated_at = toString(byName('transferred_by_updated_at')),",
						"          transferred_by_use_aircall_phonenumber_as_callerid = toBoolean(byName('transferred_by_use_aircall_phonenumber_as_callerid')),",
						"          transferred_by_use_mobile_incoming_calls = toString(byName('transferred_by_use_mobile_incoming_calls')),",
						"          transferred_by_use_react_phone = toBoolean(byName('transferred_by_use_react_phone')),",
						"          transferred_by_wrap_up_time = toBoolean(byName('transferred_by_wrap_up_time')),",
						"          transferred_to_availability_status = toString(byName('transferred_to_availability_status')),",
						"          transferred_to_available = toBoolean(byName('transferred_to_available')),",
						"          transferred_to_created_at = toString(byName('transferred_to_created_at')),",
						"          transferred_to_direct_link = toString(byName('transferred_to_direct_link')),",
						"          transferred_to_email = toString(byName('transferred_to_email')),",
						"          transferred_to_id = toInteger(byName('transferred_to_id')),",
						"          transferred_to_language = toString(byName('transferred_to_language')),",
						"          transferred_to_name = toString(byName('transferred_to_name')),",
						"          transferred_to_state = toString(byName('transferred_to_state')),",
						"          transferred_to_time_zone = toString(byName('transferred_to_time_zone')),",
						"          transferred_to_wrap_up_time = toBoolean(byName('transferred_to_wrap_up_time')),",
						"          user_availability_status = toString(byName('user_availability_status')),",
						"          user_available = toBoolean(byName('user_available')),",
						"          user_created_at = toString(byName('user_created_at')),",
						"          user_direct_link = toString(byName('user_direct_link')),",
						"          user_email = toString(byName('user_email')),",
						"          user_id = toInteger(byName('user_id')),",
						"          user_language = toString(byName('user_language')),",
						"          user_name = toString(byName('user_name')),",
						"          user_state = toString(byName('user_state')),",
						"          user_time_zone = toString(byName('user_time_zone')),",
						"          user_wrap_up_time = toBoolean(byName('user_wrap_up_time')),",
						"          voicemail = toString(byName('voicemail')),",
						"          voicemail_short_url = toString(byName('voicemail_short_url')),",
						"          filepath = toString(byName('filepath')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"     partitionBy('hash', 1)) ~> MapDriftedAircallCallsSilver",
						"selectFinal alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"sourceCallsGoldF0 derive(direction = toString(byName('direction')),",
						"          duration = toInteger(byName('duration')),",
						"          id = toString(byName('id')),",
						"          started_at = toTimestamp(byName('started_at')),",
						"          filepath = toString(byName('filepath')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"     partitionBy('hash', 1)) ~> MapDriftedCallsGoldF0",
						"MapDriftedCallsGoldF0 select(mapColumn(",
						"          id,",
						"          processdate",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCallsGoldF0",
						"selectCallsGoldF0 aggregate(maxprocessdate = iifNull(max(processdate),toTimestamp('1900-01-01','yyyy-MM-dd')),",
						"     partitionBy('hash', 1)) ~> aggregateMaxprocessdate",
						"select1 sort(desc(processdate, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"sort1, aggregateMaxprocessdate join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> join1",
						"join1 filter(processdate>maxprocessdate,",
						"     partitionBy('hash', 1)) ~> filterFinal",
						"filterFinal select(mapColumn(",
						"          direction,",
						"          duration,",
						"          id,",
						"          started_at,",
						"          filepath,",
						"          processdate",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinal",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/calls',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkCallsGoldF0"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_AircallCallsSilverF0')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "SilverF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference"
							},
							"name": "sourceAircallBronze"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkAircallSilver"
						}
					],
					"transformations": [
						{
							"name": "flattenCalls"
						},
						{
							"name": "select1",
							"description": "quitado porque array comments, tags teams y assigne_To, number, transferred_by, transferred_to, user porque json"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          calls as (answered_at as integer, archived as boolean, asset as string, assigned_to as (availability_status as string, available as boolean, created_at as string, direct_link as string, email as string, id as integer, language as string, name as string, state as string, time_zone as string, wrap_up_time as boolean), comments as (content as string, id as integer, posted_at as integer, posted_by as (availability_status as string, available as boolean, created_at as string, direct_link as string, email as string, id as integer, language as string, name as string, state as string, time_zone as string, wrap_up_time as boolean))[], contact as string, cost as double, country_code_a2 as string, direct_link as string, direction as string, duration as short, ended_at as integer, id as long, missed_call_reason as string, number as (availability_status as string, country as string, created_at as string, digits as string, direct_link as string, id as integer, is_ivr as boolean, live_recording_activated as boolean, messages as (after_hours as string, callback_later as string, closed as string, ivr as string, ringing_tone as string, unanswered_call as string, voicemail as string, waiting as string, welcome as string), name as string, open as boolean, priority as string, time_zone as string), pricing_type as string, raw_digits as string, recording as string, recording_short_url as string, sid as string, started_at as integer, status as string, tags as (created_at as integer, id as integer, name as string, tagged_by as (availability_status as string, available as boolean, created_at as string, direct_link as string, email as string, id as integer, language as string, name as string, state as string, time_zone as string, wrap_up_time as boolean))[], teams as (created_at as string, direct_link as string, id as integer, name as string)[], transferred_by as (authentication_token as string, company_id as integer, created_at as string, custom_price as string, custom_twilio_edge as string, custom_twilio_jitter_buffer_size as string, custom_twilio_region as string, default_out_number_id as integer, default_prefix as string, deleted_at as string, email as string, first_name as string, id as integer, intercom_android_hash as string, intercom_hash as string, is_admin as boolean, is_onboarded_for_teams_in_numbers as boolean, is_onboarded_on_app as boolean, language as string, last_name as string, marked_for_deletion as boolean, migrated_on_authentication_manager as boolean, onboarding_step as boolean, phone_numbers_count as boolean, picture_url as string, ring_timeout as short, state as string, time_zone as string, unavailable_until as string, updated_at as string, use_aircall_phonenumber_as_callerid as boolean, use_mobile_incoming_calls as string, use_react_phone as boolean, wrap_up_time as boolean), transferred_to as (availability_status as string, available as boolean, created_at as string, direct_link as string, email as string, id as integer, language as string, name as string, state as string, time_zone as string, wrap_up_time as boolean), user as (availability_status as string, available as boolean, created_at as string, direct_link as string, email as string, id as integer, language as string, name as string, state as string, time_zone as string, wrap_up_time as boolean), voicemail as string, voicemail_short_url as string)[],",
						"          meta as (count as short, current_page as short, next_page_link as string, per_page as short, previous_page_link as string, total as short)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'filepath',",
						"     documentForm: 'documentPerLine') ~> sourceAircallBronze",
						"sourceAircallBronze foldDown(unroll(calls),",
						"     mapColumn(",
						"          answered_at = calls.answered_at,",
						"          archived = calls.archived,",
						"          asset = calls.asset,",
						"          assigned_to = calls.assigned_to,",
						"          assigned_to_availability_status = calls.assigned_to.availability_status,",
						"          assigned_to_available = calls.assigned_to.available,",
						"          assigned_to_created_at = calls.assigned_to.created_at,",
						"          assigned_to_direct_link = calls.assigned_to.direct_link,",
						"          assigned_to_email = calls.assigned_to.email,",
						"          assigned_to_id = calls.assigned_to.id,",
						"          assigned_to_language = calls.assigned_to.language,",
						"          assigned_to_name = calls.assigned_to.name,",
						"          assigned_to_state = calls.assigned_to.state,",
						"          assigned_to_time_zone = calls.assigned_to.time_zone,",
						"          assigned_to_wrap_up_time = calls.assigned_to.wrap_up_time,",
						"          comments = calls.comments,",
						"          contact = calls.contact,",
						"          cost = calls.cost,",
						"          country_code_a2 = calls.country_code_a2,",
						"          direct_link = calls.direct_link,",
						"          direction = calls.direction,",
						"          duration = calls.duration,",
						"          ended_at = calls.ended_at,",
						"          id = calls.id,",
						"          missed_call_reason = calls.missed_call_reason,",
						"          number = calls.number,",
						"          number_availability_status = calls.number.availability_status,",
						"          number_country = calls.number.country,",
						"          number_created_at = calls.number.created_at,",
						"          number_digits = calls.number.digits,",
						"          number_direct_link = calls.number.direct_link,",
						"          number_id = calls.number.id,",
						"          number_is_ivr = calls.number.is_ivr,",
						"          number_live_recording_activated = calls.number.live_recording_activated,",
						"          number_name = calls.number.name,",
						"          number_open = calls.number.open,",
						"          number_priority = calls.number.priority,",
						"          number_time_zone = calls.number.time_zone,",
						"          number_msg_after_hours = calls.number.messages.after_hours,",
						"          number_msg_callback_later = calls.number.messages.callback_later,",
						"          number_msg_closed = calls.number.messages.closed,",
						"          number_msg_ivr = calls.number.messages.ivr,",
						"          number_msg_ringing_tone = calls.number.messages.ringing_tone,",
						"          number_msg_unanswered_call = calls.number.messages.unanswered_call,",
						"          number_msg_voicemail = calls.number.messages.voicemail,",
						"          number_msg_waiting = calls.number.messages.waiting,",
						"          number_msg_welcome = calls.number.messages.welcome,",
						"          pricing_type = calls.pricing_type,",
						"          raw_digits = calls.raw_digits,",
						"          recording = calls.recording,",
						"          recording_short_url = calls.recording_short_url,",
						"          sid = calls.sid,",
						"          started_at = calls.started_at,",
						"          status = calls.status,",
						"          tags = calls.tags,",
						"          teams = calls.teams,",
						"          transferred_by = calls.transferred_by,",
						"          transferred_by_authentication_token = calls.transferred_by.authentication_token,",
						"          transferred_by_company_id = calls.transferred_by.company_id,",
						"          transferred_by_created_at = calls.transferred_by.created_at,",
						"          transferred_by_custom_price = calls.transferred_by.custom_price,",
						"          transferred_by_custom_twilio_edge = calls.transferred_by.custom_twilio_edge,",
						"          transferred_by_custom_twilio_jitter_buffer_size = calls.transferred_by.custom_twilio_jitter_buffer_size,",
						"          transferred_by_custom_twilio_region = calls.transferred_by.custom_twilio_region,",
						"          transferred_by_default_out_number_id = calls.transferred_by.default_out_number_id,",
						"          transferred_by_default_prefix = calls.transferred_by.default_prefix,",
						"          transferred_by_deleted_at = calls.transferred_by.deleted_at,",
						"          transferred_by_email = calls.transferred_by.email,",
						"          transferred_by_first_name = calls.transferred_by.first_name,",
						"          transferred_by_id = calls.transferred_by.id,",
						"          transferred_by_intercom_android_hash = calls.transferred_by.intercom_android_hash,",
						"          transferred_by_intercom_hash = calls.transferred_by.intercom_hash,",
						"          transferred_by_is_admin = calls.transferred_by.is_admin,",
						"          transferred_by_is_onboarded_for_teams_in_numbers = calls.transferred_by.is_onboarded_for_teams_in_numbers,",
						"          transferred_by_is_onboarded_on_app = calls.transferred_by.is_onboarded_on_app,",
						"          transferred_by_language = calls.transferred_by.language,",
						"          transferred_by_last_name = calls.transferred_by.last_name,",
						"          transferred_by_marked_for_deletion = calls.transferred_by.marked_for_deletion,",
						"          transferred_by_migrated_on_authentication_manager = calls.transferred_by.migrated_on_authentication_manager,",
						"          transferred_by_onboarding_step = calls.transferred_by.onboarding_step,",
						"          transferred_by_phone_numbers_count = calls.transferred_by.phone_numbers_count,",
						"          transferred_by_picture_url = calls.transferred_by.picture_url,",
						"          transferred_by_ring_timeout = calls.transferred_by.ring_timeout,",
						"          transferred_by_state = calls.transferred_by.state,",
						"          transferred_by_time_zone = calls.transferred_by.time_zone,",
						"          transferred_by_unavailable_until = calls.transferred_by.unavailable_until,",
						"          transferred_by_updated_at = calls.transferred_by.updated_at,",
						"          transferred_by_use_aircall_phonenumber_as_callerid = calls.transferred_by.use_aircall_phonenumber_as_callerid,",
						"          transferred_by_use_mobile_incoming_calls = calls.transferred_by.use_mobile_incoming_calls,",
						"          transferred_by_use_react_phone = calls.transferred_by.use_react_phone,",
						"          transferred_by_wrap_up_time = calls.transferred_by.wrap_up_time,",
						"          transferred_to = calls.transferred_to,",
						"          transferred_to_availability_status = calls.transferred_to.availability_status,",
						"          transferred_to_available = calls.transferred_to.available,",
						"          transferred_to_created_at = calls.transferred_to.created_at,",
						"          transferred_to_direct_link = calls.transferred_to.direct_link,",
						"          transferred_to_email = calls.transferred_to.email,",
						"          transferred_to_id = calls.transferred_to.id,",
						"          transferred_to_language = calls.transferred_to.language,",
						"          transferred_to_name = calls.transferred_to.name,",
						"          transferred_to_state = calls.transferred_to.state,",
						"          transferred_to_time_zone = calls.transferred_to.time_zone,",
						"          transferred_to_wrap_up_time = calls.transferred_to.wrap_up_time,",
						"          user = calls.user,",
						"          user_availability_status = calls.user.availability_status,",
						"          user_available = calls.user.available,",
						"          user_created_at = calls.user.created_at,",
						"          user_direct_link = calls.user.direct_link,",
						"          user_email = calls.user.email,",
						"          user_id = calls.user.id,",
						"          user_language = calls.user.language,",
						"          user_name = calls.user.name,",
						"          user_state = calls.user.state,",
						"          user_time_zone = calls.user.time_zone,",
						"          user_wrap_up_time = calls.user.wrap_up_time,",
						"          voicemail = calls.voicemail,",
						"          voicemail_short_url = calls.voicemail_short_url,",
						"          filepath",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenCalls",
						"flattenCalls select(mapColumn(",
						"          answered_at,",
						"          archived,",
						"          asset,",
						"          assigned_to_availability_status,",
						"          assigned_to_available,",
						"          assigned_to_created_at,",
						"          assigned_to_direct_link,",
						"          assigned_to_email,",
						"          assigned_to_id,",
						"          assigned_to_language,",
						"          assigned_to_name,",
						"          assigned_to_state,",
						"          assigned_to_time_zone,",
						"          assigned_to_wrap_up_time,",
						"          contact,",
						"          cost,",
						"          country_code_a2,",
						"          direct_link,",
						"          direction,",
						"          duration,",
						"          ended_at,",
						"          id,",
						"          missed_call_reason,",
						"          number_availability_status,",
						"          number_country,",
						"          number_created_at,",
						"          number_digits,",
						"          number_direct_link,",
						"          number_id,",
						"          number_is_ivr,",
						"          number_live_recording_activated,",
						"          number_name,",
						"          number_open,",
						"          number_priority,",
						"          number_time_zone,",
						"          number_msg_after_hours,",
						"          number_msg_callback_later,",
						"          number_msg_closed,",
						"          number_msg_ivr,",
						"          number_msg_ringing_tone,",
						"          number_msg_unanswered_call,",
						"          number_msg_voicemail,",
						"          number_msg_waiting,",
						"          number_msg_welcome,",
						"          pricing_type,",
						"          raw_digits,",
						"          recording,",
						"          recording_short_url,",
						"          sid,",
						"          started_at,",
						"          status,",
						"          transferred_by_authentication_token,",
						"          transferred_by_company_id,",
						"          transferred_by_created_at,",
						"          transferred_by_custom_price,",
						"          transferred_by_custom_twilio_edge,",
						"          transferred_by_custom_twilio_jitter_buffer_size,",
						"          transferred_by_custom_twilio_region,",
						"          transferred_by_default_out_number_id,",
						"          transferred_by_default_prefix,",
						"          transferred_by_deleted_at,",
						"          transferred_by_email,",
						"          transferred_by_first_name,",
						"          transferred_by_id,",
						"          transferred_by_intercom_android_hash,",
						"          transferred_by_intercom_hash,",
						"          transferred_by_is_admin,",
						"          transferred_by_is_onboarded_for_teams_in_numbers,",
						"          transferred_by_is_onboarded_on_app,",
						"          transferred_by_language,",
						"          transferred_by_last_name,",
						"          transferred_by_marked_for_deletion,",
						"          transferred_by_migrated_on_authentication_manager,",
						"          transferred_by_onboarding_step,",
						"          transferred_by_phone_numbers_count,",
						"          transferred_by_picture_url,",
						"          transferred_by_ring_timeout,",
						"          transferred_by_state,",
						"          transferred_by_time_zone,",
						"          transferred_by_unavailable_until,",
						"          transferred_by_updated_at,",
						"          transferred_by_use_aircall_phonenumber_as_callerid,",
						"          transferred_by_use_mobile_incoming_calls,",
						"          transferred_by_use_react_phone,",
						"          transferred_by_wrap_up_time,",
						"          transferred_to_availability_status,",
						"          transferred_to_available,",
						"          transferred_to_created_at,",
						"          transferred_to_direct_link,",
						"          transferred_to_email,",
						"          transferred_to_id,",
						"          transferred_to_language,",
						"          transferred_to_name,",
						"          transferred_to_state,",
						"          transferred_to_time_zone,",
						"          transferred_to_wrap_up_time,",
						"          user_availability_status,",
						"          user_available,",
						"          user_created_at,",
						"          user_direct_link,",
						"          user_email,",
						"          user_id,",
						"          user_language,",
						"          user_name,",
						"          user_state,",
						"          user_time_zone,",
						"          user_wrap_up_time,",
						"          voicemail,",
						"          voicemail_short_url,",
						"          filepath",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(started_at = toTimestamp((started_at)*1000l,\"yyyy-MM-dd HH:mm:ss\"),",
						"          ended_at = toTimestamp((ended_at)*1000l,\"yyyy-MM-dd HH:mm:ss\"),",
						"          processdate = currentUTC(),",
						"          duration = toInteger(duration),",
						"          id = toString(id),",
						"          transferred_by_ring_timeout = toInteger(transferred_by_ring_timeout),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/aircallcalls',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkAircallSilver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_BudgetDWHF0')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWHF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceBudgetGoldF0"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_PostgreSql",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "MapDrifted2",
							"description": "Crea una asignación explícita para cada columna de desfase."
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/budget') ~> sourceBudgetGoldF0",
						"MapDrifted2 alterRow(insertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"sourceBudgetGoldF0 derive(fecha = toDate(byName('fecha')),",
						"          escenario = toString(byName('escenario')),",
						"          titulacion = toString(byName('titulacion')),",
						"          centro = toString(byName('centro')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          num_leads_netos = toInteger(byName('num_leads_netos')),",
						"          num_leads_brutos = toInteger(byName('num_leads_brutos')),",
						"          new_enrollment = toInteger(byName('new_enrollment')),",
						"          importe_venta_neta = toDouble(byName('importe_venta_neta')),",
						"          importe_venta_bruta = toDouble(byName('importe_venta_bruta')),",
						"          importe_captacion = toDouble(byName('importe_captacion')),",
						"          filepath = toString(byName('filepath')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"     partitionBy('hash', 1)) ~> MapDrifted2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]",
				"[concat(variables('factoryId'), '/datasets/ds_PostgreSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_BudgetGoldF0')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adsl_parquet",
								"type": "DatasetReference"
							},
							"name": "sourceBudgetBronzeF0"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkBudgetGoldF0"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumnImportes"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Fecha as string,",
						"          Escenario as string,",
						"          Titulacion as string,",
						"          Centro as string,",
						"          Sede as string,",
						"          Modalidad as string,",
						"          numLeadsNetos as integer,",
						"          numLeadsBrutos as integer,",
						"          NewEnrollment as integer,",
						"          importeVentaNeta as string,",
						"          importeVentaBruta as string,",
						"          importeCaptacion as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'filepath',",
						"     format: 'parquet',",
						"     partitionBy('hash', 1)) ~> sourceBudgetBronzeF0",
						"select1 derive(processdate = currentUTC(),",
						"          fecha = toDate(fecha,'dd/MM/yyyy'),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumnImportes select(mapColumn(",
						"          fecha = Fecha,",
						"          escenario = Escenario,",
						"          titulacion = Titulacion,",
						"          centro = Centro,",
						"          sede = Sede,",
						"          modalidad = Modalidad,",
						"          num_leads_netos = numLeadsNetos,",
						"          num_leads_brutos = numLeadsBrutos,",
						"          new_enrollment = NewEnrollment,",
						"          importe_venta_neta = importeVentaNeta,",
						"          importe_venta_bruta = importeVentaBruta,",
						"          importe_captacion = importeCaptacion,",
						"          filepath",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"sourceBudgetBronzeF0 derive(importeVentaNeta = toDouble(replace(importeVentaNeta,',','.')),",
						"          importeVentaBruta = toDouble(replace(importeVentaBruta,',','.')),",
						"          importeCaptacion = toDouble(replace(importeCaptacion,',','.')),",
						"     partitionBy('hash', 1)) ~> derivedColumnImportes",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/budget',",
						"     deltaTruncate: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkBudgetGoldF0"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_BudgetGoldF0_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adsl_parquet",
								"type": "DatasetReference"
							},
							"name": "sourceBudgetBronzeF0"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkBudgetGoldF0"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Fecha as string,",
						"          Escenario as string,",
						"          Titulacion as string,",
						"          Centro as string,",
						"          Sede as string,",
						"          Modalidad as string,",
						"          numLeadsNetos as integer,",
						"          numLeadsBrutos as integer,",
						"          NewEnrollment as integer,",
						"          importeVentaNeta as double,",
						"          importeVentaBruta as double,",
						"          importeCaptacion as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'filepath',",
						"     format: 'parquet',",
						"     partitionBy('hash', 1)) ~> sourceBudgetBronzeF0",
						"select1 derive(processdate = currentUTC(),",
						"          fecha = toDate(fecha,'dd/MM/yyyy'),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"sourceBudgetBronzeF0 select(mapColumn(",
						"          fecha = Fecha,",
						"          escenario = Escenario,",
						"          titulacion = Titulacion,",
						"          centro = Centro,",
						"          sede = Sede,",
						"          modalidad = Modalidad,",
						"          num_leads_netos = numLeadsNetos,",
						"          num_leads_brutos = numLeadsBrutos,",
						"          new_enrollment = NewEnrollment,",
						"          importe_venta_neta = importeVentaNeta,",
						"          importe_venta_bruta = importeVentaBruta,",
						"          importe_captacion = importeCaptacion,",
						"          filepath",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/budget',",
						"     deltaTruncate: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkBudgetGoldF0"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_parquet')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CallsDWHF0')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWHF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceCallsGoldF0"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_PostgreSql",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "MapDrifted1",
							"description": "Crea una asignación explícita para cada columna de desfase."
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/calls') ~> sourceCallsGoldF0",
						"MapDrifted1 alterRow(insertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"sourceCallsGoldF0 derive(direction = toString(byName('direction')),",
						"          duration = toInteger(byName('duration')),",
						"          id = toString(byName('id')),",
						"          started_at = toTimestamp(byName('started_at')),",
						"          filepath = toString(byName('filepath')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"     partitionBy('hash', 1)) ~> MapDrifted1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]",
				"[concat(variables('factoryId'), '/datasets/ds_PostgreSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ClientifyDealsGoldF0')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceClientifyDealsSilverF0"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceVentasGoldF0"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkVentasGoldF0"
						}
					],
					"transformations": [
						{
							"name": "MapDriftedClientifyDealsSilverF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "selectClientifyDealsSilverF0"
						},
						{
							"name": "derivedColumnClientifyDealsSilverF0"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "filterVentasGoldF0"
						},
						{
							"name": "selectVentasGoldF0"
						},
						{
							"name": "aggregateMaxprocessdate"
						},
						{
							"name": "join1"
						},
						{
							"name": "filterFinal"
						},
						{
							"name": "selectFinal"
						},
						{
							"name": "sort1"
						},
						{
							"name": "MapDriftedVentasGoldF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/clientifydeals') ~> sourceClientifyDealsSilverF0",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceVentasGoldF0",
						"sourceClientifyDealsSilverF0 derive(actual_closed_date = toDate(byName('actual_closed_date')),",
						"          amount = toDouble(byName('amount')),",
						"          amount_user = toString(byName('amount_user')),",
						"          company = toString(byName('company')),",
						"          contact = toString(byName('contact')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_medium = toString(byName('contact_medium')),",
						"          contact_name = toString(byName('contact_name')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          contact_source = toString(byName('contact_source')),",
						"          created = toTimestamp(byName('created')),",
						"          currency = toString(byName('currency')),",
						"          expected_closed_date = toDate(byName('expected_closed_date')),",
						"          id = toString(byName('id')),",
						"          modified = toTimestamp(byName('modified')),",
						"          name = toString(byName('name')),",
						"          owner_name = toString(byName('owner_name')),",
						"          pipeline = toString(byName('pipeline')),",
						"          pipeline_desc = toString(byName('pipeline_desc')),",
						"          pipeline_stage = toString(byName('pipeline_stage')),",
						"          pipeline_stage_desc = toString(byName('pipeline_stage_desc')),",
						"          probability = toInteger(byName('probability')),",
						"          probability_desc = toString(byName('probability_desc')),",
						"          status = toInteger(byName('status')),",
						"          status_desc = toString(byName('status_desc')),",
						"          url = toString(byName('url')),",
						"          filepath = toString(byName('filepath')),",
						"          custom_fields_ByRatings_Rating = toString(byName('custom_fields_ByRatings_Rating')),",
						"          custom_fields_ByRatings_Score = toString(byName('custom_fields_ByRatings_Score')),",
						"          custom_fields_Estudio_Old = toString(byName('custom_fields_Estudio_Old')),",
						"          custom_fields_ID = toString(byName('custom_fields_ID')),",
						"          custom_fields_Modalidad_Old = toString(byName('custom_fields_Modalidad_Old')),",
						"          custom_fields_Sede_Old = toString(byName('custom_fields_Sede_Old')),",
						"          custom_fields_anio_academico = toString(byName('custom_fields_anio_academico')),",
						"          custom_fields_campaign_id = toString(byName('custom_fields_campaign_id')),",
						"          custom_fields_centro = toString(byName('custom_fields_centro')),",
						"          custom_fields_ciudad = toString(byName('custom_fields_ciudad')),",
						"          custom_fields_cp = toString(byName('custom_fields_cp')),",
						"          custom_fields_curso_anio = toString(byName('custom_fields_curso_anio')),",
						"          custom_fields_descuento = toDouble(byName('custom_fields_descuento')),",
						"          custom_fields_descuento_matricula = toDouble(byName('custom_fields_descuento_matricula')),",
						"          custom_fields_estudio = toString(byName('custom_fields_estudio')),",
						"          custom_fields_fecha_inscripcion = toDate(byName('custom_fields_fecha_inscripcion')),",
						"          custom_fields_gclid = toString(byName('custom_fields_gclid')),",
						"          custom_fields_gdpr = toString(byName('custom_fields_gdpr')),",
						"          custom_fields_google_id = toString(byName('custom_fields_google_id')),",
						"          custom_fields_linea_negocio = toString(byName('custom_fields_linea_negocio')),",
						"          custom_fields_matricula = toString(byName('custom_fields_matricula')),",
						"          custom_fields_mensualidad = toString(byName('custom_fields_mensualidad')),",
						"          custom_fields_modalidad = toString(byName('custom_fields_modalidad')),",
						"          custom_fields_pais = toString(byName('custom_fields_pais')),",
						"          custom_fields_ref = toString(byName('custom_fields_ref')),",
						"          custom_fields_sede = toString(byName('custom_fields_sede')),",
						"          custom_fields_tipo_conversion = toString(byName('custom_fields_tipo_conversion')),",
						"          custom_fields_turno = toString(byName('custom_fields_turno')),",
						"          custom_fields_ua = toString(byName('custom_fields_ua')),",
						"          custom_fields_url = toString(byName('custom_fields_url')),",
						"          custom_fields_utm_ad_id = toString(byName('custom_fields_utm_ad_id')),",
						"          custom_fields_utm_adset_id = toString(byName('custom_fields_utm_adset_id')),",
						"          custom_fields_utm_campaign = toString(byName('custom_fields_utm_campaign')),",
						"          custom_fields_utm_campaign_id = toString(byName('custom_fields_utm_campaign_id')),",
						"          custom_fields_utm_campaign_name = toString(byName('custom_fields_utm_campaign_name')),",
						"          custom_fields_utm_channel = toString(byName('custom_fields_utm_channel')),",
						"          custom_fields_utm_device = toString(byName('custom_fields_utm_device')),",
						"          custom_fields_utm_estrategia = toString(byName('custom_fields_utm_estrategia')),",
						"          custom_fields_utm_medium = toString(byName('custom_fields_utm_medium')),",
						"          custom_fields_utm_network = toString(byName('custom_fields_utm_network')),",
						"          custom_fields_utm_placement = toString(byName('custom_fields_utm_placement')),",
						"          custom_fields_utm_site_source_name = toString(byName('custom_fields_utm_site_source_name')),",
						"          custom_fields_utm_source = toString(byName('custom_fields_utm_source')),",
						"          custom_fields_utm_term = toString(byName('custom_fields_utm_term')),",
						"          custom_fields_utm_type = toString(byName('custom_fields_utm_type')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          created_tzh = toString(byName('created_tzh')),",
						"          modified_tzh = toString(byName('modified_tzh')),",
						"     partitionBy('hash', 1)) ~> MapDriftedClientifyDealsSilverF0",
						"MapDriftedClientifyDealsSilverF0 select(mapColumn(",
						"          amount,",
						"          created,",
						"          id,",
						"          name,",
						"          filepath,",
						"          descuento = custom_fields_descuento,",
						"          descuento_matricula = custom_fields_descuento_matricula,",
						"          fecha_inscripcion = custom_fields_fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro = custom_fields_centro,",
						"          source = custom_fields_utm_source,",
						"          date_closed = actual_closed_date,",
						"          owner_name,",
						"          estudio = custom_fields_estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value = pipeline_stage_desc,",
						"          status_desc,",
						"          byratings_rating = custom_fields_ByRatings_Rating,",
						"          sede = custom_fields_sede,",
						"          modalidad = custom_fields_modalidad",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectClientifyDealsSilverF0",
						"selectClientifyDealsSilverF0 derive(fecha_inscripcion = toTimestamp(fecha_inscripcion),",
						"          date_closed = toTimestamp(date_closed),",
						"          lost_reason_value = '',",
						"          tiempo_de_maduracion = toDouble(minus(toTimestamp(fecha_inscripcion),created)/(1000*60*60*24)),",
						"          new_enrollent = iif(isNull(fecha_inscripcion), 0, 1),",
						"          lead_neto = iif(stage_value=='Duplicado', 0, 1),",
						"          status_final = toString(iif(or(status_desc=='Lost',status_desc=='Expired'),'Perdida',toString(iif(stage_value=='Traslado a ERP','Ganada',toString(iif(and(and(stage_value=='Seguimiento Interesado',or(status_desc=='Won',status_desc=='Open')),!isNull(fecha_inscripcion)),'Pago Reserva',toString(iif(and(and(stage_value=='Seguimiento Interesado',or(status_desc=='Won',status_desc=='Open')),isNull(fecha_inscripcion)),'Interesado',toString(iif(and(or(or(stage_value=='Seguimiento Primer Contacto',stage_value=='No contesta'),stage_value=='Seguimiento Valorando'),or(status_desc=='Won',status_desc=='Open')),'Seguimiento',toString(iif(and(stage_value=='Sin Gestionar',or(status_desc=='Won',status_desc=='Open')),'Sin asignar')))))))))))),",
						"          created_date = toDate(created),",
						"          byratings_rating = iifNull(byratings_rating,''),",
						"          sede = iifNull(sede,''),",
						"          modalidad = iifNull(modalidad,''),",
						"          centro = 'CESIF',",
						"     partitionBy('hash', 1)) ~> derivedColumnClientifyDealsSilverF0",
						"selectFinal alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"selectVentasGoldF0 filter(sourcesystem=='Clientify',",
						"     partitionBy('hash', 1)) ~> filterVentasGoldF0",
						"MapDriftedVentasGoldF0 select(mapColumn(",
						"          id,",
						"          processdate,",
						"          sourcesystem",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectVentasGoldF0",
						"filterVentasGoldF0 aggregate(maxprocessdate = iifNull(max(processdate),toTimestamp('1900-01-01','yyyy-MM-dd')),",
						"     partitionBy('hash', 1)) ~> aggregateMaxprocessdate",
						"sort1, aggregateMaxprocessdate join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> join1",
						"join1 filter(processdate>maxprocessdate,",
						"     partitionBy('hash', 1)) ~> filterFinal",
						"filterFinal select(mapColumn(",
						"          amount,",
						"          created,",
						"          id,",
						"          name,",
						"          filepath,",
						"          descuento,",
						"          descuento_matricula,",
						"          fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          status_desc,",
						"          byratings_rating,",
						"          sede,",
						"          modalidad,",
						"          lost_reason_value,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinal",
						"derivedColumnClientifyDealsSilverF0 sort(desc(processdate, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"sourceVentasGoldF0 derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDriftedVentasGoldF0",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkVentasGoldF0"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ClientifyDealsGoldF0_IdForDelete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesGold"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceClientifyIdForDeleteSilver"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesGold2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkSalesGold"
						}
					],
					"transformations": [
						{
							"name": "MapDriftedSalesGold",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "filterClientify"
						},
						{
							"name": "MapDriftedSalesGold2",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "selectID"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "filterCount"
						},
						{
							"name": "joinCount"
						},
						{
							"name": "filterClientify2"
						},
						{
							"name": "select2"
						},
						{
							"name": "MapDriftedClientifyIdForDeleteSilver",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "exists1"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceSalesGold",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/clientifydealsidfordelete') ~> sourceClientifyIdForDeleteSilver",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceSalesGold2",
						"sourceSalesGold derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDriftedSalesGold",
						"exists1 alterRow(deleteIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"MapDriftedSalesGold filter(sourcesystem == \"Clientify\",",
						"     partitionBy('hash', 1)) ~> filterClientify",
						"sourceSalesGold2 derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDriftedSalesGold2",
						"filterClientify2 select(mapColumn(",
						"          id",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectID",
						"selectID aggregate(groupBy(id),",
						"     countID = count(id),",
						"     partitionBy('hash', 1)) ~> aggregate1",
						"aggregate1 sort(desc(countID, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"sort1 filter(countID==1,",
						"     partitionBy('hash', 1)) ~> filterCount",
						"filterClientify, filterCount join(MapDriftedSalesGold@id == aggregate1@id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinCount",
						"MapDriftedSalesGold2 filter(sourcesystem == \"Clientify\",",
						"     partitionBy('hash', 1)) ~> filterClientify2",
						"joinCount select(mapColumn(",
						"          amount,",
						"          created,",
						"          id = MapDriftedSalesGold@id,",
						"          name,",
						"          filepath,",
						"          descuento,",
						"          descuento_matricula,",
						"          fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          status_desc,",
						"          byratings_rating,",
						"          sede,",
						"          modalidad,",
						"          lost_reason_value,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"sourceClientifyIdForDeleteSilver derive(id = toString(byName('id')),",
						"     partitionBy('hash', 1)) ~> MapDriftedClientifyIdForDeleteSilver",
						"select2, MapDriftedClientifyIdForDeleteSilver exists(select2@id == MapDriftedClientifyIdForDeleteSilver@id,",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> exists1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: true,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: false,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkSalesGold"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ClientifyDealsGoldF0_LeadsNetosEmail')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesGoldF0"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkSalesGoldF0"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "MapDrifted1",
							"description": "Crea una asignación explícita para cada columna de desfase."
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceSalesGoldF0",
						"MapDrifted1 filter(sourcesystem=='Clientify' && stage_value=='Sin Gestionar' && lead_neto==1 && contact_email!='false'&& !isNull(contact_email),",
						"     partitionBy('hash', 1)) ~> filter1",
						"filter1 window(over(contact_email),",
						"     desc(created, true),",
						"     ranking = rank(),",
						"     partitionBy('hash', 1)) ~> window1",
						"window1 select(mapColumn(",
						"          amount,",
						"          created,",
						"          id,",
						"          name,",
						"          filepath,",
						"          descuento,",
						"          descuento_matricula,",
						"          fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          status_desc,",
						"          byratings_rating,",
						"          lost_reason_value,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date,",
						"          sede,",
						"          modalidad,",
						"          ranking",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(lead_neto = iif(ranking>1, 0, 1),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          amount,",
						"          created,",
						"          id,",
						"          name,",
						"          filepath,",
						"          descuento,",
						"          descuento_matricula,",
						"          fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          status_desc,",
						"          byratings_rating,",
						"          lost_reason_value,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date,",
						"          sede,",
						"          modalidad",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"sourceSalesGoldF0 derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDrifted1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkSalesGoldF0"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ClientifyDealsGoldF0_LeadsNetosPhone')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesGoldF0"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkSalesGoldF0"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "MapDrifted1",
							"description": "Crea una asignación explícita para cada columna de desfase."
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceSalesGoldF0",
						"MapDrifted1 filter(sourcesystem=='Clientify' && stage_value=='Sin Gestionar' && lead_neto==1 && contact_phone!='false'&& !isNull(contact_phone),",
						"     partitionBy('hash', 1)) ~> filter1",
						"filter1 window(over(contact_phone),",
						"     desc(created, true),",
						"     ranking = rank(),",
						"     partitionBy('hash', 1)) ~> window1",
						"window1 select(mapColumn(",
						"          amount,",
						"          created,",
						"          id,",
						"          name,",
						"          filepath,",
						"          descuento,",
						"          descuento_matricula,",
						"          fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          status_desc,",
						"          byratings_rating,",
						"          lost_reason_value,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date,",
						"          sede,",
						"          modalidad,",
						"          ranking",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(lead_neto = iif(ranking>1, 0, 1),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          amount,",
						"          created,",
						"          id,",
						"          name,",
						"          filepath,",
						"          descuento,",
						"          descuento_matricula,",
						"          fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          status_desc,",
						"          byratings_rating,",
						"          lost_reason_value,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date,",
						"          sede,",
						"          modalidad",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"sourceSalesGoldF0 derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDrifted1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkSalesGoldF0"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ClientifyDealsGoldF0_LostReason')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesGold"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceClientifyLostReasonSilver"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesGold2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkSalesGold"
						}
					],
					"transformations": [
						{
							"name": "MapDriftedSalesGold",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "joinLostReason"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "MapDriftedClientifyLostReasonSilver",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "derivedColumnNullValues"
						},
						{
							"name": "filterClientify"
						},
						{
							"name": "MapDriftedSalesGold2",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "selectID"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "filterCount"
						},
						{
							"name": "joinCount"
						},
						{
							"name": "filterClientify2"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceSalesGold",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/clientifydealslostreason') ~> sourceClientifyLostReasonSilver",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceSalesGold2",
						"sourceSalesGold derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDriftedSalesGold",
						"select2, derivedColumnNullValues join(select2@id == MapDriftedClientifyLostReasonSilver@id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinLostReason",
						"joinLostReason derive(lost_reason_value = lost_reason,",
						"          lead_neto = iif((lost_reason=='NV Datos erróneos' || lost_reason=='NV Duplicado' || lost_reason=='NV Busca empleo' || lost_reason=='NV Niño' || lost_reason=='NV Extranjero' || lost_reason=='NV Bot' || lost_reason=='NV Test' ||lost_reason=='NV Lista Robinson'), 0, lead_neto),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          amount,",
						"          created,",
						"          id = select2@id,",
						"          name,",
						"          filepath,",
						"          descuento,",
						"          descuento_matricula,",
						"          fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          status_desc,",
						"          byratings_rating,",
						"          sede,",
						"          modalidad,",
						"          lost_reason_value,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 alterRow(updateIf(!(lost_reason_value=='NV Bot'||lost_reason_value=='NV Test')),",
						"     deleteIf((lost_reason_value=='NV Bot'||lost_reason_value=='NV Test')),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"sourceClientifyLostReasonSilver derive(id = toString(byName('id')),",
						"          lost_reason = toString(byName('lost_reason')),",
						"     partitionBy('hash', 1)) ~> MapDriftedClientifyLostReasonSilver",
						"MapDriftedClientifyLostReasonSilver derive(lost_reason = iifNull(lost_reason,'',lost_reason),",
						"     partitionBy('hash', 1)) ~> derivedColumnNullValues",
						"MapDriftedSalesGold filter(sourcesystem == \"Clientify\",",
						"     partitionBy('hash', 1)) ~> filterClientify",
						"sourceSalesGold2 derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDriftedSalesGold2",
						"filterClientify2 select(mapColumn(",
						"          id",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectID",
						"selectID aggregate(groupBy(id),",
						"     countID = count(id),",
						"     partitionBy('hash', 1)) ~> aggregate1",
						"aggregate1 sort(desc(countID, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"sort1 filter(countID==1,",
						"     partitionBy('hash', 1)) ~> filterCount",
						"filterClientify, filterCount join(MapDriftedSalesGold@id == aggregate1@id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinCount",
						"MapDriftedSalesGold2 filter(sourcesystem == \"Clientify\",",
						"     partitionBy('hash', 1)) ~> filterClientify2",
						"joinCount select(mapColumn(",
						"          amount,",
						"          created,",
						"          id = MapDriftedSalesGold@id,",
						"          name,",
						"          filepath,",
						"          descuento,",
						"          descuento_matricula,",
						"          fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          status_desc,",
						"          byratings_rating,",
						"          sede,",
						"          modalidad,",
						"          lost_reason_value,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: true,",
						"     insertable: false,",
						"     updateable: true,",
						"     upsertable: false,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkSalesGold"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ClientifyDealsGoldF0_LostReason_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesGold"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceClientifyLostReasonSilver"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesGold2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkSalesGold"
						}
					],
					"transformations": [
						{
							"name": "MapDriftedSalesGold",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "joinLostReason"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "MapDriftedClientifyLostReasonSilver",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "derivedColumnNullValues"
						},
						{
							"name": "filterClientify"
						},
						{
							"name": "MapDriftedSalesGold2",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "selectID"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "filterCount"
						},
						{
							"name": "joinCount"
						},
						{
							"name": "filterClientify2"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceSalesGold",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/clientifydealslostreason') ~> sourceClientifyLostReasonSilver",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceSalesGold2",
						"sourceSalesGold derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDriftedSalesGold",
						"select2, derivedColumnNullValues join(select2@id == MapDriftedClientifyLostReasonSilver@id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinLostReason",
						"joinLostReason derive(lost_reason_value = lost_reason,",
						"          lead_neto = iif((lost_reason_value=='NV Datos erróneos' || lost_reason_value=='NV Duplicado' || lost_reason_value=='NV Busca empleo' || lost_reason_value=='NV Niño' || lost_reason_value=='NV Extranjero' || lost_reason_value=='NV Bot' || lost_reason_value=='NV Test'), 0, lead_neto),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          amount,",
						"          created,",
						"          id = select2@id,",
						"          name,",
						"          filepath,",
						"          descuento,",
						"          descuento_matricula,",
						"          fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          status_desc,",
						"          byratings_rating,",
						"          sede,",
						"          modalidad,",
						"          lost_reason_value,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 alterRow(updateIf(!(lost_reason_value=='NV Bot'||lost_reason_value=='NV Test')),",
						"     deleteIf((lost_reason_value=='NV Bot'||lost_reason_value=='NV Test')),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"sourceClientifyLostReasonSilver derive(id = toString(byName('id')),",
						"          lost_reason = toString(byName('lost_reason')),",
						"     partitionBy('hash', 1)) ~> MapDriftedClientifyLostReasonSilver",
						"MapDriftedClientifyLostReasonSilver derive(lost_reason = iifNull(lost_reason,'',lost_reason),",
						"     partitionBy('hash', 1)) ~> derivedColumnNullValues",
						"MapDriftedSalesGold filter(sourcesystem == \"Clientify\",",
						"     partitionBy('hash', 1)) ~> filterClientify",
						"sourceSalesGold2 derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDriftedSalesGold2",
						"filterClientify2 select(mapColumn(",
						"          id",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectID",
						"selectID aggregate(groupBy(id),",
						"     countID = count(id),",
						"     partitionBy('hash', 1)) ~> aggregate1",
						"aggregate1 sort(desc(countID, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"sort1 filter(countID==1,",
						"     partitionBy('hash', 1)) ~> filterCount",
						"filterClientify, filterCount join(MapDriftedSalesGold@id == aggregate1@id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinCount",
						"MapDriftedSalesGold2 filter(sourcesystem == \"Clientify\",",
						"     partitionBy('hash', 1)) ~> filterClientify2",
						"joinCount select(mapColumn(",
						"          amount,",
						"          created,",
						"          id = MapDriftedSalesGold@id,",
						"          name,",
						"          filepath,",
						"          descuento,",
						"          descuento_matricula,",
						"          fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          status_desc,",
						"          byratings_rating,",
						"          sede,",
						"          modalidad,",
						"          lost_reason_value,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: true,",
						"     insertable: false,",
						"     updateable: true,",
						"     upsertable: false,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkSalesGold"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ClientifyDealsGoldF0_LostReason_copy2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesGold"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceClientifyLostReasonSilver"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesGold2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkSalesGold"
						}
					],
					"transformations": [
						{
							"name": "MapDriftedSalesGold",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "joinLostReason"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "MapDriftedClientifyLostReasonSilver",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "derivedColumnNullValues"
						},
						{
							"name": "filterClientify"
						},
						{
							"name": "MapDriftedSalesGold2",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "selectID"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "filterCount"
						},
						{
							"name": "joinCount"
						},
						{
							"name": "filterClientify2"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceSalesGold",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/clientifydealslostreason') ~> sourceClientifyLostReasonSilver",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceSalesGold2",
						"sourceSalesGold derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDriftedSalesGold",
						"select2, derivedColumnNullValues join(select2@id == MapDriftedClientifyLostReasonSilver@id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinLostReason",
						"joinLostReason derive(lost_reason_value = lost_reason,",
						"          lead_neto = iif((lost_reason=='NV Datos erróneos' || lost_reason=='NV Duplicado' || lost_reason=='NV Busca empleo' || lost_reason=='NV Niño' || lost_reason=='NV Extranjero' || lost_reason=='NV Bot' || lost_reason=='NV Test'), 0, lead_neto),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          amount,",
						"          created,",
						"          id = select2@id,",
						"          name,",
						"          filepath,",
						"          descuento,",
						"          descuento_matricula,",
						"          fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          status_desc,",
						"          byratings_rating,",
						"          sede,",
						"          modalidad,",
						"          lost_reason_value,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 alterRow(updateIf(!(lost_reason_value=='NV Bot'||lost_reason_value=='NV Test')),",
						"     deleteIf((lost_reason_value=='NV Bot'||lost_reason_value=='NV Test')),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"sourceClientifyLostReasonSilver derive(id = toString(byName('id')),",
						"          lost_reason = toString(byName('lost_reason')),",
						"     partitionBy('hash', 1)) ~> MapDriftedClientifyLostReasonSilver",
						"MapDriftedClientifyLostReasonSilver derive(lost_reason = iifNull(lost_reason,'',lost_reason),",
						"     partitionBy('hash', 1)) ~> derivedColumnNullValues",
						"MapDriftedSalesGold filter(sourcesystem == \"Clientify\",",
						"     partitionBy('hash', 1)) ~> filterClientify",
						"sourceSalesGold2 derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDriftedSalesGold2",
						"filterClientify2 select(mapColumn(",
						"          id",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectID",
						"selectID aggregate(groupBy(id),",
						"     countID = count(id),",
						"     partitionBy('hash', 1)) ~> aggregate1",
						"aggregate1 sort(desc(countID, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"sort1 filter(countID==1,",
						"     partitionBy('hash', 1)) ~> filterCount",
						"filterClientify, filterCount join(MapDriftedSalesGold@id == aggregate1@id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinCount",
						"MapDriftedSalesGold2 filter(sourcesystem == \"Clientify\",",
						"     partitionBy('hash', 1)) ~> filterClientify2",
						"joinCount select(mapColumn(",
						"          amount,",
						"          created,",
						"          id = MapDriftedSalesGold@id,",
						"          name,",
						"          filepath,",
						"          descuento,",
						"          descuento_matricula,",
						"          fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          status_desc,",
						"          byratings_rating,",
						"          sede,",
						"          modalidad,",
						"          lost_reason_value,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: true,",
						"     insertable: false,",
						"     updateable: true,",
						"     upsertable: false,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkSalesGold"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ClientifyDealsGoldF0_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceClientifyDealsSilverF0"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceVentasGoldF0"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkVentasGoldF0"
						}
					],
					"transformations": [
						{
							"name": "MapDriftedClientifyDealsSilverF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "selectClientifyDealsSilverF0"
						},
						{
							"name": "derivedColumnClientifyDealsSilverF0"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "filterVentasGoldF0"
						},
						{
							"name": "selectVentasGoldF0"
						},
						{
							"name": "aggregateMaxprocessdate"
						},
						{
							"name": "join1"
						},
						{
							"name": "filterFinal"
						},
						{
							"name": "selectFinal"
						},
						{
							"name": "sort1"
						},
						{
							"name": "MapDriftedVentasGoldF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/clientifydeals') ~> sourceClientifyDealsSilverF0",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceVentasGoldF0",
						"sourceClientifyDealsSilverF0 derive(actual_closed_date = toDate(byName('actual_closed_date')),",
						"          amount = toDouble(byName('amount')),",
						"          amount_user = toString(byName('amount_user')),",
						"          company = toString(byName('company')),",
						"          contact = toString(byName('contact')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_medium = toString(byName('contact_medium')),",
						"          contact_name = toString(byName('contact_name')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          contact_source = toString(byName('contact_source')),",
						"          created = toTimestamp(byName('created')),",
						"          currency = toString(byName('currency')),",
						"          expected_closed_date = toDate(byName('expected_closed_date')),",
						"          id = toString(byName('id')),",
						"          modified = toTimestamp(byName('modified')),",
						"          name = toString(byName('name')),",
						"          owner_name = toString(byName('owner_name')),",
						"          pipeline = toString(byName('pipeline')),",
						"          pipeline_desc = toString(byName('pipeline_desc')),",
						"          pipeline_stage = toString(byName('pipeline_stage')),",
						"          pipeline_stage_desc = toString(byName('pipeline_stage_desc')),",
						"          probability = toInteger(byName('probability')),",
						"          probability_desc = toString(byName('probability_desc')),",
						"          status = toInteger(byName('status')),",
						"          status_desc = toString(byName('status_desc')),",
						"          url = toString(byName('url')),",
						"          filepath = toString(byName('filepath')),",
						"          custom_fields_ByRatings_Rating = toString(byName('custom_fields_ByRatings_Rating')),",
						"          custom_fields_ByRatings_Score = toString(byName('custom_fields_ByRatings_Score')),",
						"          custom_fields_Estudio_Old = toString(byName('custom_fields_Estudio_Old')),",
						"          custom_fields_ID = toString(byName('custom_fields_ID')),",
						"          custom_fields_Modalidad_Old = toString(byName('custom_fields_Modalidad_Old')),",
						"          custom_fields_Sede_Old = toString(byName('custom_fields_Sede_Old')),",
						"          custom_fields_anio_academico = toString(byName('custom_fields_anio_academico')),",
						"          custom_fields_campaign_id = toString(byName('custom_fields_campaign_id')),",
						"          custom_fields_centro = toString(byName('custom_fields_centro')),",
						"          custom_fields_ciudad = toString(byName('custom_fields_ciudad')),",
						"          custom_fields_cp = toString(byName('custom_fields_cp')),",
						"          custom_fields_curso_anio = toString(byName('custom_fields_curso_anio')),",
						"          custom_fields_descuento = toDouble(byName('custom_fields_descuento')),",
						"          custom_fields_descuento_matricula = toDouble(byName('custom_fields_descuento_matricula')),",
						"          custom_fields_estudio = toString(byName('custom_fields_estudio')),",
						"          custom_fields_fecha_inscripcion = toDate(byName('custom_fields_fecha_inscripcion')),",
						"          custom_fields_gclid = toString(byName('custom_fields_gclid')),",
						"          custom_fields_gdpr = toString(byName('custom_fields_gdpr')),",
						"          custom_fields_google_id = toString(byName('custom_fields_google_id')),",
						"          custom_fields_linea_negocio = toString(byName('custom_fields_linea_negocio')),",
						"          custom_fields_matricula = toString(byName('custom_fields_matricula')),",
						"          custom_fields_mensualidad = toString(byName('custom_fields_mensualidad')),",
						"          custom_fields_modalidad = toString(byName('custom_fields_modalidad')),",
						"          custom_fields_pais = toString(byName('custom_fields_pais')),",
						"          custom_fields_ref = toString(byName('custom_fields_ref')),",
						"          custom_fields_sede = toString(byName('custom_fields_sede')),",
						"          custom_fields_tipo_conversion = toString(byName('custom_fields_tipo_conversion')),",
						"          custom_fields_turno = toString(byName('custom_fields_turno')),",
						"          custom_fields_ua = toString(byName('custom_fields_ua')),",
						"          custom_fields_url = toString(byName('custom_fields_url')),",
						"          custom_fields_utm_ad_id = toString(byName('custom_fields_utm_ad_id')),",
						"          custom_fields_utm_adset_id = toString(byName('custom_fields_utm_adset_id')),",
						"          custom_fields_utm_campaign = toString(byName('custom_fields_utm_campaign')),",
						"          custom_fields_utm_campaign_id = toString(byName('custom_fields_utm_campaign_id')),",
						"          custom_fields_utm_campaign_name = toString(byName('custom_fields_utm_campaign_name')),",
						"          custom_fields_utm_channel = toString(byName('custom_fields_utm_channel')),",
						"          custom_fields_utm_device = toString(byName('custom_fields_utm_device')),",
						"          custom_fields_utm_estrategia = toString(byName('custom_fields_utm_estrategia')),",
						"          custom_fields_utm_medium = toString(byName('custom_fields_utm_medium')),",
						"          custom_fields_utm_network = toString(byName('custom_fields_utm_network')),",
						"          custom_fields_utm_placement = toString(byName('custom_fields_utm_placement')),",
						"          custom_fields_utm_site_source_name = toString(byName('custom_fields_utm_site_source_name')),",
						"          custom_fields_utm_source = toString(byName('custom_fields_utm_source')),",
						"          custom_fields_utm_term = toString(byName('custom_fields_utm_term')),",
						"          custom_fields_utm_type = toString(byName('custom_fields_utm_type')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          created_tzh = toString(byName('created_tzh')),",
						"          modified_tzh = toString(byName('modified_tzh')),",
						"     partitionBy('hash', 1)) ~> MapDriftedClientifyDealsSilverF0",
						"MapDriftedClientifyDealsSilverF0 select(mapColumn(",
						"          amount,",
						"          created,",
						"          id,",
						"          name,",
						"          filepath,",
						"          descuento = custom_fields_descuento,",
						"          descuento_matricula = custom_fields_descuento_matricula,",
						"          fecha_inscripcion = custom_fields_fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro = custom_fields_centro,",
						"          source = custom_fields_utm_source,",
						"          date_closed = actual_closed_date,",
						"          owner_name,",
						"          estudio = custom_fields_estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value = pipeline_stage_desc,",
						"          status_desc,",
						"          byratings_rating = custom_fields_ByRatings_Rating,",
						"          sede = custom_fields_sede,",
						"          modalidad = custom_fields_modalidad",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectClientifyDealsSilverF0",
						"selectClientifyDealsSilverF0 derive(fecha_inscripcion = toTimestamp(fecha_inscripcion),",
						"          date_closed = toTimestamp(date_closed),",
						"          lost_reason_value = '',",
						"          tiempo_de_maduracion = toDouble(minus(toTimestamp(fecha_inscripcion),created)/(1000*60*60*24)),",
						"          new_enrollent = iif(isNull(fecha_inscripcion), 0, 1),",
						"          lead_neto = iif(or(stage_value=='Duplicado',regexMatch(contact_email,'metrodoraeducation.com')), 0, 1),",
						"          status_final = toString(iif(or(status_desc=='Lost',status_desc=='Expired'),'Perdida',toString(iif(stage_value=='Traslado a ERP','Ganada',toString(iif(and(and(stage_value=='Seguimiento Interesado',or(status_desc=='Won',status_desc=='Open')),!isNull(fecha_inscripcion)),'Pago Reserva',toString(iif(and(and(stage_value=='Seguimiento Interesado',or(status_desc=='Won',status_desc=='Open')),isNull(fecha_inscripcion)),'Interesado',toString(iif(and(or(or(stage_value=='Seguimiento Primer Contacto',stage_value=='No contesta'),stage_value=='Seguimiento Valorando'),or(status_desc=='Won',status_desc=='Open')),'Seguimiento',toString(iif(and(stage_value=='Sin Gestionar',or(status_desc=='Won',status_desc=='Open')),'Sin asignar')))))))))))),",
						"          created_date = toDate(created),",
						"          byratings_rating = iifNull(byratings_rating,''),",
						"          sede = iifNull(sede,''),",
						"          modalidad = iifNull(modalidad,''),",
						"     partitionBy('hash', 1)) ~> derivedColumnClientifyDealsSilverF0",
						"selectFinal alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"selectVentasGoldF0 filter(sourcesystem=='Clientify',",
						"     partitionBy('hash', 1)) ~> filterVentasGoldF0",
						"MapDriftedVentasGoldF0 select(mapColumn(",
						"          id,",
						"          processdate,",
						"          sourcesystem",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectVentasGoldF0",
						"filterVentasGoldF0 aggregate(maxprocessdate = iifNull(max(processdate),toTimestamp('1900-01-01','yyyy-MM-dd')),",
						"     partitionBy('hash', 1)) ~> aggregateMaxprocessdate",
						"sort1, aggregateMaxprocessdate join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> join1",
						"join1 filter(processdate>maxprocessdate,",
						"     partitionBy('hash', 1)) ~> filterFinal",
						"filterFinal select(mapColumn(",
						"          amount,",
						"          created,",
						"          id,",
						"          name,",
						"          filepath,",
						"          descuento,",
						"          descuento_matricula,",
						"          fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          status_desc,",
						"          byratings_rating,",
						"          sede,",
						"          modalidad,",
						"          lost_reason_value,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinal",
						"derivedColumnClientifyDealsSilverF0 sort(desc(processdate, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"sourceVentasGoldF0 derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDriftedVentasGoldF0",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkVentasGoldF0"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ClientifyDealsSilverF0')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "SilverF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference"
							},
							"name": "sourceClientifyBronze"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkClientifySilver"
						}
					],
					"transformations": [
						{
							"name": "flattenResult"
						},
						{
							"name": "select1",
							"description": "quitado custumfields y tags porque array"
						},
						{
							"name": "selectCustomFields"
						},
						{
							"name": "flattenCustomFields"
						},
						{
							"name": "pivotCustomFields"
						},
						{
							"name": "join1"
						},
						{
							"name": "selectFinal",
							"description": "quitado id pivot"
						},
						{
							"name": "derivedColumnCustomFields"
						},
						{
							"name": "filterCustomFields"
						},
						{
							"name": "MapDriftedCustomFields",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          count as short,",
						"          next as string,",
						"          previous as string,",
						"          results as (actual_closed_date as date, amount as double, amount_user as string, company as string, contact as string, contact_email as string, contact_medium as string, contact_name as string, contact_phone as long, contact_source as string, created as string, currency as string, custom_fields as (field as string, id as integer, value as string)[], expected_closed_date as date, id as integer, modified as string, name as string, owner_name as string, pipeline as string, pipeline_desc as string, pipeline_stage as string, pipeline_stage_desc as string, probability as short, probability_desc as string, status as short, status_desc as string, tags as string[], url as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'filepath',",
						"     documentForm: 'documentPerLine') ~> sourceClientifyBronze",
						"sourceClientifyBronze foldDown(unroll(results),",
						"     mapColumn(",
						"          actual_closed_date = results.actual_closed_date,",
						"          amount = results.amount,",
						"          amount_user = results.amount_user,",
						"          company = results.company,",
						"          contact = results.contact,",
						"          contact_email = results.contact_email,",
						"          contact_medium = results.contact_medium,",
						"          contact_name = results.contact_name,",
						"          contact_phone = results.contact_phone,",
						"          contact_source = results.contact_source,",
						"          created = results.created,",
						"          currency = results.currency,",
						"          custom_fields = results.custom_fields,",
						"          expected_closed_date = results.expected_closed_date,",
						"          id = results.id,",
						"          modified = results.modified,",
						"          name = results.name,",
						"          owner_name = results.owner_name,",
						"          pipeline = results.pipeline,",
						"          pipeline_desc = results.pipeline_desc,",
						"          pipeline_stage = results.pipeline_stage,",
						"          pipeline_stage_desc = results.pipeline_stage_desc,",
						"          probability = results.probability,",
						"          probability_desc = results.probability_desc,",
						"          status = results.status,",
						"          status_desc = results.status_desc,",
						"          tags = results.tags,",
						"          url = results.url,",
						"          filepath",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenResult",
						"flattenResult select(mapColumn(",
						"          actual_closed_date,",
						"          amount,",
						"          amount_user,",
						"          company,",
						"          contact,",
						"          contact_email,",
						"          contact_medium,",
						"          contact_name,",
						"          contact_phone,",
						"          contact_source,",
						"          created,",
						"          currency,",
						"          expected_closed_date,",
						"          id,",
						"          modified,",
						"          name,",
						"          owner_name,",
						"          pipeline,",
						"          pipeline_desc,",
						"          pipeline_stage,",
						"          pipeline_stage_desc,",
						"          probability,",
						"          probability_desc,",
						"          status,",
						"          status_desc,",
						"          url,",
						"          filepath",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"flattenResult select(mapColumn(",
						"          custom_fields,",
						"          id",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCustomFields",
						"selectCustomFields foldDown(unroll(custom_fields),",
						"     mapColumn(",
						"          custom_fields_field = custom_fields.field,",
						"          custom_fields_id = custom_fields.id,",
						"          custom_fields_value = custom_fields.value,",
						"          id",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenCustomFields",
						"filterCustomFields pivot(groupBy(id),",
						"     pivotBy(custom_fields_field),",
						"     custom_fields_ = max(custom_fields_value),",
						"     columnNaming: '$N$V',",
						"     lateral: true,",
						"     partitionBy('hash', 1)) ~> pivotCustomFields",
						"select1, MapDriftedCustomFields join(select1@id == pivotCustomFields@id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> join1",
						"derivedColumn1 select(mapColumn(",
						"          actual_closed_date,",
						"          amount,",
						"          amount_user,",
						"          company,",
						"          contact,",
						"          contact_email,",
						"          contact_medium,",
						"          contact_name,",
						"          contact_phone,",
						"          contact_source,",
						"          created,",
						"          currency,",
						"          expected_closed_date,",
						"          id,",
						"          modified,",
						"          name,",
						"          owner_name,",
						"          pipeline,",
						"          pipeline_desc,",
						"          pipeline_stage,",
						"          pipeline_stage_desc,",
						"          probability,",
						"          probability_desc,",
						"          status,",
						"          status_desc,",
						"          url,",
						"          filepath,",
						"          custom_fields_ByRatings_Rating,",
						"          custom_fields_ByRatings_Score,",
						"          custom_fields_Estudio_Old,",
						"          custom_fields_ID,",
						"          custom_fields_Modalidad_Old,",
						"          custom_fields_Sede_Old,",
						"          custom_fields_anio_academico,",
						"          custom_fields_campaign_id,",
						"          custom_fields_centro,",
						"          custom_fields_ciudad,",
						"          custom_fields_cp,",
						"          custom_fields_curso_anio,",
						"          custom_fields_descuento,",
						"          custom_fields_descuento_matricula,",
						"          custom_fields_estudio,",
						"          custom_fields_fecha_inscripcion,",
						"          custom_fields_gclid,",
						"          custom_fields_gdpr,",
						"          custom_fields_google_id,",
						"          custom_fields_linea_negocio,",
						"          custom_fields_matricula,",
						"          custom_fields_mensualidad,",
						"          custom_fields_modalidad,",
						"          custom_fields_pais,",
						"          custom_fields_ref,",
						"          custom_fields_sede,",
						"          custom_fields_tipo_conversion,",
						"          custom_fields_turno,",
						"          custom_fields_ua,",
						"          custom_fields_url,",
						"          custom_fields_utm_ad_id,",
						"          custom_fields_utm_adset_id,",
						"          custom_fields_utm_campaign,",
						"          custom_fields_utm_campaign_id,",
						"          custom_fields_utm_campaign_name,",
						"          custom_fields_utm_channel,",
						"          custom_fields_utm_device,",
						"          custom_fields_utm_estrategia,",
						"          custom_fields_utm_medium,",
						"          custom_fields_utm_network,",
						"          custom_fields_utm_placement,",
						"          custom_fields_utm_site_source_name,",
						"          custom_fields_utm_source,",
						"          custom_fields_utm_term,",
						"          custom_fields_utm_type,",
						"          processdate,",
						"          sourcesystem,",
						"          created_tzh,",
						"          modified_tzh",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinal",
						"flattenCustomFields derive(custom_fields_field = replace(replace(custom_fields_field,' ','_'),'-','_'),",
						"     partitionBy('hash', 1)) ~> derivedColumnCustomFields",
						"derivedColumnCustomFields filter(custom_fields_field!='Año_Académico',",
						"     partitionBy('hash', 1)) ~> filterCustomFields",
						"pivotCustomFields derive(custom_fields_ByRatings_Rating = toString(byName('custom_fields_ByRatings_Rating')),",
						"          custom_fields_ByRatings_Score = toString(byName('custom_fields_ByRatings_Score')),",
						"          custom_fields_Estudio_Old = toString(byName('custom_fields_Estudio_Old')),",
						"          custom_fields_ID = toString(byName('custom_fields_ID')),",
						"          custom_fields_Modalidad_Old = toString(byName('custom_fields_Modalidad_Old')),",
						"          custom_fields_Sede_Old = toString(byName('custom_fields_Sede_Old')),",
						"          custom_fields_anio_academico = toString(byName('custom_fields_anio_academico')),",
						"          custom_fields_campaign_id = toString(byName('custom_fields_campaign_id')),",
						"          custom_fields_centro = toString(byName('custom_fields_centro')),",
						"          custom_fields_ciudad = toString(byName('custom_fields_ciudad')),",
						"          custom_fields_cp = toString(byName('custom_fields_cp')),",
						"          custom_fields_curso_anio = toString(byName('custom_fields_curso_anio')),",
						"          custom_fields_descuento = toString(byName('custom_fields_descuento')),",
						"          custom_fields_descuento_matricula = toString(byName('custom_fields_descuento_matricula')),",
						"          custom_fields_estudio = toString(byName('custom_fields_estudio')),",
						"          custom_fields_fecha_inscripcion = toString(byName('custom_fields_fecha_inscripcion')),",
						"          custom_fields_gclid = toString(byName('custom_fields_gclid')),",
						"          custom_fields_gdpr = toString(byName('custom_fields_gdpr')),",
						"          custom_fields_google_id = toString(byName('custom_fields_google_id')),",
						"          custom_fields_linea_negocio = toString(byName('custom_fields_linea_negocio')),",
						"          custom_fields_matricula = toString(byName('custom_fields_matricula')),",
						"          custom_fields_mensualidad = toString(byName('custom_fields_mensualidad')),",
						"          custom_fields_modalidad = toString(byName('custom_fields_modalidad')),",
						"          custom_fields_pais = toString(byName('custom_fields_pais')),",
						"          custom_fields_ref = toString(byName('custom_fields_ref')),",
						"          custom_fields_sede = toString(byName('custom_fields_sede')),",
						"          custom_fields_tipo_conversion = toString(byName('custom_fields_tipo_conversion')),",
						"          custom_fields_turno = toString(byName('custom_fields_turno')),",
						"          custom_fields_ua = toString(byName('custom_fields_ua')),",
						"          custom_fields_url = toString(byName('custom_fields_url')),",
						"          custom_fields_utm_ad_id = toString(byName('custom_fields_utm_ad_id')),",
						"          custom_fields_utm_adset_id = toString(byName('custom_fields_utm_adset_id')),",
						"          custom_fields_utm_campaign = toString(byName('custom_fields_utm_campaign')),",
						"          custom_fields_utm_campaign_id = toString(byName('custom_fields_utm_campaign_id')),",
						"          custom_fields_utm_campaign_name = toString(byName('custom_fields_utm_campaign_name')),",
						"          custom_fields_utm_channel = toString(byName('custom_fields_utm_channel')),",
						"          custom_fields_utm_device = toString(byName('custom_fields_utm_device')),",
						"          custom_fields_utm_estrategia = toString(byName('custom_fields_utm_estrategia')),",
						"          custom_fields_utm_medium = toString(byName('custom_fields_utm_medium')),",
						"          custom_fields_utm_network = toString(byName('custom_fields_utm_network')),",
						"          custom_fields_utm_placement = toString(byName('custom_fields_utm_placement')),",
						"          custom_fields_utm_site_source_name = toString(byName('custom_fields_utm_site_source_name')),",
						"          custom_fields_utm_source = toString(byName('custom_fields_utm_source')),",
						"          custom_fields_utm_term = toString(byName('custom_fields_utm_term')),",
						"          custom_fields_utm_type = toString(byName('custom_fields_utm_type')),",
						"     partitionBy('hash', 1)) ~> MapDriftedCustomFields",
						"join1 derive(processdate = currentUTC(),",
						"          sourcesystem = 'Clientify',",
						"          contact_phone = toString(contact_phone),",
						"          id = toString(select1@id),",
						"          probability = toInteger(probability),",
						"          status = toInteger(status),",
						"          created = toTimestamp(split(created,'+')[1],'yyyy-MM-dd\\'T\\'HH:mm:ss'),",
						"          created_tzh = split(created,'+')[2],",
						"          modified = toTimestamp(split(modified,'+')[1],'yyyy-MM-dd\\'T\\'HH:mm:ss'),",
						"          modified_tzh = split(modified,'+')[2],",
						"          custom_fields_fecha_inscripcion = toDate(custom_fields_fecha_inscripcion,'dd/MM/yyyy'),",
						"          custom_fields_descuento = toDouble(custom_fields_descuento),",
						"          custom_fields_descuento_matricula = toDouble(custom_fields_descuento_matricula),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"selectFinal alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/clientifydeals',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkClientifySilver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ClientifyDealsSilverF0_IdForDelete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "SilverF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference"
							},
							"name": "sourceClientifyIdForDeleteBronze"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkClientifyLostReasonSilver"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          count as integer,",
						"          next as string,",
						"          previous as string,",
						"          results as (id as integer)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> sourceClientifyIdForDeleteBronze",
						"flatten1 derive(id = toString(id),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 alterRow(insertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"sourceClientifyIdForDeleteBronze foldDown(unroll(results),",
						"     mapColumn(",
						"          id = results.id",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/clientifydealsidfordelete',",
						"     deltaTruncate: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkClientifyLostReasonSilver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ClientifyDealsSilverF0_LostReason')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "SilverF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference"
							},
							"name": "sourceClientifyLostReasonBronze"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkClientifyLostReasonSilver"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          count as integer,",
						"          next as string,",
						"          previous as string,",
						"          results as (id as integer, lost_reason as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> sourceClientifyLostReasonBronze",
						"flatten1 derive(id = toString(id),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 alterRow(insertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"sourceClientifyLostReasonBronze foldDown(unroll(results),",
						"     mapColumn(",
						"          id = results.id,",
						"          lost_reason = results.lost_reason",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/clientifydealslostreason',",
						"     deltaTruncate: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkClientifyLostReasonSilver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_OdooLeadGoldF0')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceOdooLeadSilverF0"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceVentasGoldF0"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkVentasGoldF0"
						}
					],
					"transformations": [
						{
							"name": "MapDriftedOdooLeadSilverF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "selectOdooLeadSilverF0"
						},
						{
							"name": "derivedColumnOdooLeadSilverF0"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "selectVentasGoldF0"
						},
						{
							"name": "filterVentasGoldF0"
						},
						{
							"name": "aggregateMaxprocessdate"
						},
						{
							"name": "sort1"
						},
						{
							"name": "join1"
						},
						{
							"name": "filterFinal"
						},
						{
							"name": "selectFinal"
						},
						{
							"name": "MapDriftedVentasGoldF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/odoolead') ~> sourceOdooLeadSilverF0",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceVentasGoldF0",
						"sourceOdooLeadSilverF0 derive(campaign_id = toBoolean(byName('campaign_id')),",
						"          city = toString(byName('city')),",
						"          company_id = toString(byName('company_id')),",
						"          contact_name = toString(byName('contact_name')),",
						"          country_id = toString(byName('country_id')),",
						"          create_date = toTimestamp(byName('create_date')),",
						"          date_action_last = toTimestamp(byName('date_action_last')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          date_conversion = toTimestamp(byName('date_conversion')),",
						"          date_last_stage_update = toTimestamp(byName('date_last_stage_update')),",
						"          email_cc = toBoolean(byName('email_cc')),",
						"          email_from = toString(byName('email_from')),",
						"          id = toString(byName('id')),",
						"          lost_reason_id = toString(byName('lost_reason_id')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          medium_id = toBoolean(byName('medium_id')),",
						"          mobile = toString(byName('mobile')),",
						"          name = toString(byName('name')),",
						"          partner_name = toBoolean(byName('partner_name')),",
						"          phone = toLong(byName('phone')),",
						"          planned_revenue = toDouble(byName('planned_revenue')),",
						"          probability = toDouble(byName('probability')),",
						"          sale_amount_total = toDouble(byName('sale_amount_total')),",
						"          source_id = toBoolean(byName('source_id')),",
						"          stage_id = toString(byName('stage_id')),",
						"          state_id = toString(byName('state_id')),",
						"          street = toString(byName('street')),",
						"          street2 = toBoolean(byName('street2')),",
						"          title = toBoolean(byName('title')),",
						"          user_id = toString(byName('user_id')),",
						"          write_date = toTimestamp(byName('write_date')),",
						"          x_codcurso = toString(byName('x_codcurso')),",
						"          x_codmodalidad = toString(byName('x_codmodalidad')),",
						"          x_curso = toBoolean(byName('x_curso')),",
						"          x_curso_id = toString(byName('x_curso_id')),",
						"          x_ga_campaign = toString(byName('x_ga_campaign')),",
						"          x_ga_medium = toString(byName('x_ga_medium')),",
						"          x_ga_source = toString(byName('x_ga_source')),",
						"          x_ga_utma = toString(byName('x_ga_utma')),",
						"          x_modalidad_id = toString(byName('x_modalidad_id')),",
						"          x_sede_id = toString(byName('x_sede_id')),",
						"          x_studio_field_FM3fX = toBoolean(byName('x_studio_field_FM3fX')),",
						"          zip = toString(byName('zip')),",
						"          filepath = toString(byName('filepath')),",
						"          country_value = toString(byName('country_value')),",
						"          state_value = toString(byName('state_value')),",
						"          user_value = toString(byName('user_value')),",
						"          x_curso_value = toString(byName('x_curso_value')),",
						"          x_modalidad_value = toString(byName('x_modalidad_value')),",
						"          x_sede_value = toString(byName('x_sede_value')),",
						"          company_value = toString(byName('company_value')),",
						"          stage_value = toString(byName('stage_value')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"     partitionBy('hash', 1)) ~> MapDriftedOdooLeadSilverF0",
						"MapDriftedOdooLeadSilverF0 select(mapColumn(",
						"          created = create_date,",
						"          fecha_inscripcion = date_conversion,",
						"          id,",
						"          amount = sale_amount_total,",
						"          processdate,",
						"          sourcesystem,",
						"          filepath,",
						"          name,",
						"          modified = write_date,",
						"          source = x_ga_source,",
						"          date_closed,",
						"          owner_name = user_value,",
						"          estudio = x_curso_value,",
						"          contact_email = email_from,",
						"          contact_phone = phone,",
						"          stage_value,",
						"          lost_reason_value,",
						"          sede = x_sede_value,",
						"          modalidad = x_modalidad_value",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOdooLeadSilverF0",
						"selectOdooLeadSilverF0 derive(descuento = toDouble('0'),",
						"          descuento_matricula = toDouble('0'),",
						"          centro = 'ISEP',",
						"          status_desc = '',",
						"          tiempo_de_maduracion = toDouble(minus(date_closed,created)/(1000*60*60*24)),",
						"          new_enrollent = iif(and(stage_value=='Won',!isNull(date_closed)), 1, 0),",
						"          lead_neto = iif(stage_value=='Duplicado', 0, 1),",
						"          status_final = toString(iif(or(!isNull(lost_reason_value),lost_reason_value!=''),'Perdida',toString(iif(stage_value=='Won','Ganada',toString(iif(and(and(or(stage_value=='Negociación',stage_value=='Proposition'),or(isNull(lost_reason_value),lost_reason_value=='')),!isNull(date_closed)),'Pago Reserva',toString(iif(and(and(or(stage_value=='Negociación',stage_value=='Proposition'),or(isNull(lost_reason_value),lost_reason_value=='')),isNull(date_closed)),'Interesado',toString(iif(or(stage_value=='Sin Contacto',stage_value=='Qualified'),'Seguimiento',toString(iif(or(stage_value=='New',stage_value=='Duplicado'),'Sin asignar')))))))))))),",
						"          created_date = toDate(created),",
						"          byratings_rating = '',",
						"          sede = iifNull(sede,'',sede),",
						"          modalidad = iifNull(modalidad,'',modalidad),",
						"     partitionBy('hash', 1)) ~> derivedColumnOdooLeadSilverF0",
						"selectFinal alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"MapDriftedVentasGoldF0 select(mapColumn(",
						"          id,",
						"          processdate,",
						"          sourcesystem",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectVentasGoldF0",
						"selectVentasGoldF0 filter(sourcesystem=='Odoo',",
						"     partitionBy('hash', 1)) ~> filterVentasGoldF0",
						"filterVentasGoldF0 aggregate(maxprocessdate = iifNull(max(processdate),toTimestamp('1900-01-01','yyyy-MM-dd')),",
						"     partitionBy('hash', 1)) ~> aggregateMaxprocessdate",
						"derivedColumnOdooLeadSilverF0 sort(desc(processdate, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"sort1, aggregateMaxprocessdate join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> join1",
						"join1 filter(processdate>maxprocessdate,",
						"     partitionBy('hash', 1)) ~> filterFinal",
						"filterFinal select(mapColumn(",
						"          created,",
						"          fecha_inscripcion,",
						"          id,",
						"          amount,",
						"          processdate,",
						"          sourcesystem,",
						"          filepath,",
						"          name,",
						"          modified,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          lost_reason_value,",
						"          sede,",
						"          modalidad,",
						"          descuento,",
						"          descuento_matricula,",
						"          centro,",
						"          status_desc,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date,",
						"          byratings_rating",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinal",
						"sourceVentasGoldF0 derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDriftedVentasGoldF0",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkVentasGoldF0"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_OdooLeadGoldF0_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceOdooLeadSilverF0"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceVentasGoldF0"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkVentasGoldF0"
						}
					],
					"transformations": [
						{
							"name": "MapDriftedOdooLeadSilverF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "selectOdooLeadSilverF0"
						},
						{
							"name": "derivedColumnOdooLeadSilverF0"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "selectVentasGoldF0"
						},
						{
							"name": "filterVentasGoldF0"
						},
						{
							"name": "aggregateMaxprocessdate"
						},
						{
							"name": "sort1"
						},
						{
							"name": "join1"
						},
						{
							"name": "filterFinal"
						},
						{
							"name": "selectFinal"
						},
						{
							"name": "MapDriftedVentasGoldF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/odoolead') ~> sourceOdooLeadSilverF0",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceVentasGoldF0",
						"sourceOdooLeadSilverF0 derive(campaign_id = toBoolean(byName('campaign_id')),",
						"          city = toString(byName('city')),",
						"          company_id = toString(byName('company_id')),",
						"          contact_name = toString(byName('contact_name')),",
						"          country_id = toString(byName('country_id')),",
						"          create_date = toTimestamp(byName('create_date')),",
						"          date_action_last = toTimestamp(byName('date_action_last')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          date_conversion = toTimestamp(byName('date_conversion')),",
						"          date_last_stage_update = toTimestamp(byName('date_last_stage_update')),",
						"          email_cc = toBoolean(byName('email_cc')),",
						"          email_from = toString(byName('email_from')),",
						"          id = toString(byName('id')),",
						"          lost_reason_id = toString(byName('lost_reason_id')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          medium_id = toBoolean(byName('medium_id')),",
						"          mobile = toString(byName('mobile')),",
						"          name = toString(byName('name')),",
						"          partner_name = toBoolean(byName('partner_name')),",
						"          phone = toLong(byName('phone')),",
						"          planned_revenue = toDouble(byName('planned_revenue')),",
						"          probability = toDouble(byName('probability')),",
						"          sale_amount_total = toDouble(byName('sale_amount_total')),",
						"          source_id = toBoolean(byName('source_id')),",
						"          stage_id = toString(byName('stage_id')),",
						"          state_id = toString(byName('state_id')),",
						"          street = toString(byName('street')),",
						"          street2 = toBoolean(byName('street2')),",
						"          title = toBoolean(byName('title')),",
						"          user_id = toString(byName('user_id')),",
						"          write_date = toTimestamp(byName('write_date')),",
						"          x_codcurso = toString(byName('x_codcurso')),",
						"          x_codmodalidad = toString(byName('x_codmodalidad')),",
						"          x_curso = toBoolean(byName('x_curso')),",
						"          x_curso_id = toString(byName('x_curso_id')),",
						"          x_ga_campaign = toString(byName('x_ga_campaign')),",
						"          x_ga_medium = toString(byName('x_ga_medium')),",
						"          x_ga_source = toString(byName('x_ga_source')),",
						"          x_ga_utma = toString(byName('x_ga_utma')),",
						"          x_modalidad_id = toString(byName('x_modalidad_id')),",
						"          x_sede_id = toString(byName('x_sede_id')),",
						"          x_studio_field_FM3fX = toBoolean(byName('x_studio_field_FM3fX')),",
						"          zip = toString(byName('zip')),",
						"          filepath = toString(byName('filepath')),",
						"          country_value = toString(byName('country_value')),",
						"          state_value = toString(byName('state_value')),",
						"          user_value = toString(byName('user_value')),",
						"          x_curso_value = toString(byName('x_curso_value')),",
						"          x_modalidad_value = toString(byName('x_modalidad_value')),",
						"          x_sede_value = toString(byName('x_sede_value')),",
						"          company_value = toString(byName('company_value')),",
						"          stage_value = toString(byName('stage_value')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"     partitionBy('hash', 1)) ~> MapDriftedOdooLeadSilverF0",
						"MapDriftedOdooLeadSilverF0 select(mapColumn(",
						"          created = create_date,",
						"          fecha_inscripcion = date_conversion,",
						"          id,",
						"          amount = sale_amount_total,",
						"          processdate,",
						"          sourcesystem,",
						"          filepath,",
						"          name,",
						"          modified = write_date,",
						"          source = x_ga_source,",
						"          date_closed,",
						"          owner_name = user_value,",
						"          estudio = x_curso_value,",
						"          contact_email = email_from,",
						"          contact_phone = phone,",
						"          stage_value,",
						"          lost_reason_value,",
						"          sede = x_sede_value,",
						"          modalidad = x_modalidad_value",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOdooLeadSilverF0",
						"selectOdooLeadSilverF0 derive(descuento = toDouble('0'),",
						"          descuento_matricula = toDouble('0'),",
						"          centro = 'ISEP',",
						"          status_desc = '',",
						"          tiempo_de_maduracion = toDouble(minus(date_closed,created)/(1000*60*60*24)),",
						"          new_enrollent = iif(and(stage_value=='Won',!isNull(date_closed)), 1, 0),",
						"          lead_neto = iif(or(stage_value=='Duplicado',regexMatch(contact_email,'metrodoraeducation.com')), 0, 1),",
						"          status_final = toString(iif(or(!isNull(lost_reason_value),lost_reason_value!=''),'Perdida',toString(iif(stage_value=='Won','Ganada',toString(iif(and(and(or(stage_value=='Negociación',stage_value=='Proposition'),or(isNull(lost_reason_value),lost_reason_value=='')),!isNull(date_closed)),'Pago Reserva',toString(iif(and(and(or(stage_value=='Negociación',stage_value=='Proposition'),or(isNull(lost_reason_value),lost_reason_value=='')),isNull(date_closed)),'Interesado',toString(iif(or(stage_value=='Sin Contacto',stage_value=='Qualified'),'Seguimiento',toString(iif(or(stage_value=='New',stage_value=='Duplicado'),'Sin asignar')))))))))))),",
						"          created_date = toDate(created),",
						"          byratings_rating = '',",
						"          sede = iifNull(sede,'',sede),",
						"          modalidad = iifNull(modalidad,'',modalidad),",
						"     partitionBy('hash', 1)) ~> derivedColumnOdooLeadSilverF0",
						"selectFinal alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"MapDriftedVentasGoldF0 select(mapColumn(",
						"          id,",
						"          processdate,",
						"          sourcesystem",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectVentasGoldF0",
						"selectVentasGoldF0 filter(sourcesystem=='Odoo',",
						"     partitionBy('hash', 1)) ~> filterVentasGoldF0",
						"filterVentasGoldF0 aggregate(maxprocessdate = iifNull(max(processdate),toTimestamp('1900-01-01','yyyy-MM-dd')),",
						"     partitionBy('hash', 1)) ~> aggregateMaxprocessdate",
						"derivedColumnOdooLeadSilverF0 sort(desc(processdate, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"sort1, aggregateMaxprocessdate join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> join1",
						"join1 filter(processdate>maxprocessdate,",
						"     partitionBy('hash', 1)) ~> filterFinal",
						"filterFinal select(mapColumn(",
						"          created,",
						"          fecha_inscripcion,",
						"          id,",
						"          amount,",
						"          processdate,",
						"          sourcesystem,",
						"          filepath,",
						"          name,",
						"          modified,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          lost_reason_value,",
						"          sede,",
						"          modalidad,",
						"          descuento,",
						"          descuento_matricula,",
						"          centro,",
						"          status_desc,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date,",
						"          byratings_rating",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinal",
						"sourceVentasGoldF0 derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDriftedVentasGoldF0",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkVentasGoldF0"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_OdooLeadSilverF0')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "SilverF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference"
							},
							"name": "sourceOdooBronze"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkOdooSilver"
						}
					],
					"transformations": [
						{
							"name": "select1",
							"description": "Quitado company_id y stage_id porque array"
						},
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          jsonrpc as double,",
						"          result as (campaign_id as boolean, city as string, company_id as string[], contact_name as string, country_id as string, create_date as timestamp, date_action_last as string, date_closed as string, date_conversion as string, date_last_stage_update as timestamp, email_cc as boolean, email_from as string, id as integer, lost_reason as string, medium_id as boolean, mobile as string, name as string, partner_name as boolean, phone as string, planned_revenue as double, probability as double, sale_amount_total as double, source_id as boolean, stage_id as string[], state_id as string, street as string, street2 as boolean, title as boolean, user_id as string, write_date as timestamp, x_codcurso as string, x_codmodalidad as string, x_curso as string, x_curso_id as string, x_ga_campaign as string, x_ga_medium as string, x_ga_source as string, x_ga_utma as string, x_modalidad_id as string, x_sede_id as string, x_studio_field_FM3fX as boolean, zip as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'filepath',",
						"     documentForm: 'documentPerLine',",
						"     partitionBy('hash', 1)) ~> sourceOdooBronze",
						"derivedColumn1 select(mapColumn(",
						"          campaign_id,",
						"          city,",
						"          company_id,",
						"          contact_name,",
						"          country_id,",
						"          create_date,",
						"          date_action_last,",
						"          date_closed,",
						"          date_conversion,",
						"          date_last_stage_update,",
						"          email_cc,",
						"          email_from,",
						"          id,",
						"          lost_reason_id,",
						"          lost_reason_value,",
						"          medium_id,",
						"          mobile,",
						"          name,",
						"          partner_name,",
						"          phone,",
						"          planned_revenue,",
						"          probability,",
						"          sale_amount_total,",
						"          source_id,",
						"          stage_id,",
						"          state_id,",
						"          street,",
						"          street2,",
						"          title,",
						"          user_id,",
						"          write_date,",
						"          x_codcurso,",
						"          x_codmodalidad,",
						"          x_curso,",
						"          x_curso_id,",
						"          x_ga_campaign,",
						"          x_ga_medium,",
						"          x_ga_source,",
						"          x_ga_utma,",
						"          x_modalidad_id,",
						"          x_sede_id,",
						"          x_studio_field_FM3fX,",
						"          zip,",
						"          filepath,",
						"          country_value,",
						"          state_value,",
						"          user_value,",
						"          x_curso_value,",
						"          x_modalidad_value,",
						"          x_sede_value,",
						"          company_value,",
						"          stage_value,",
						"          processdate,",
						"          sourcesystem",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"sourceOdooBronze foldDown(unroll(result),",
						"     mapColumn(",
						"          campaign_id = result.campaign_id,",
						"          city = result.city,",
						"          company_id = result.company_id,",
						"          contact_name = result.contact_name,",
						"          country_id = result.country_id,",
						"          create_date = result.create_date,",
						"          date_action_last = result.date_action_last,",
						"          date_closed = result.date_closed,",
						"          date_conversion = result.date_conversion,",
						"          date_last_stage_update = result.date_last_stage_update,",
						"          email_cc = result.email_cc,",
						"          email_from = result.email_from,",
						"          id = result.id,",
						"          lost_reason = result.lost_reason,",
						"          medium_id = result.medium_id,",
						"          mobile = result.mobile,",
						"          name = result.name,",
						"          partner_name = result.partner_name,",
						"          phone = result.phone,",
						"          planned_revenue = result.planned_revenue,",
						"          probability = result.probability,",
						"          sale_amount_total = result.sale_amount_total,",
						"          source_id = result.source_id,",
						"          stage_id = result.stage_id,",
						"          state_id = result.state_id,",
						"          street = result.street,",
						"          street2 = result.street2,",
						"          title = result.title,",
						"          user_id = result.user_id,",
						"          write_date = result.write_date,",
						"          x_codcurso = result.x_codcurso,",
						"          x_codmodalidad = result.x_codmodalidad,",
						"          x_curso = result.x_curso,",
						"          x_curso_id = result.x_curso_id,",
						"          x_ga_campaign = result.x_ga_campaign,",
						"          x_ga_medium = result.x_ga_medium,",
						"          x_ga_source = result.x_ga_source,",
						"          x_ga_utma = result.x_ga_utma,",
						"          x_modalidad_id = result.x_modalidad_id,",
						"          x_sede_id = result.x_sede_id,",
						"          x_studio_field_FM3fX = result.x_studio_field_FM3fX,",
						"          zip = result.zip,",
						"          filepath",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(country_id = replace(split(country_id,',')[1],'[',''),",
						"          country_value = regexExtract(split(country_id,',')[2],'\"([^\"]*)'),",
						"          state_id = replace(split(state_id,',')[1],'[',''),",
						"          state_value = regexExtract(split(state_id,',')[2],'\"([^\"]*)'),",
						"          user_id = replace(split(user_id,',')[1],'[',''),",
						"          user_value = regexExtract(split(user_id,',')[2],'\"([^\"]*)'),",
						"          x_curso_id = replace(split(x_curso_id,',')[1],'[',''),",
						"          x_curso_value = regexExtract(split(x_curso_id,',')[2],'\"([^\"]*)'),",
						"          x_modalidad_id = replace(split(x_modalidad_id,',')[1],'[',''),",
						"          x_modalidad_value = regexExtract(split(x_modalidad_id,',')[2],'\"([^\"]*)'),",
						"          x_sede_id = replace(split(x_sede_id,',')[1],'[',''),",
						"          x_sede_value = regexExtract(split(x_sede_id,',')[2],'\"([^\"]*)'),",
						"          company_id = regexExtract(split(toString(company_id),',')[1],'\"([^\"]*)'),",
						"          company_value = regexExtract(split(toString(company_id),',')[2],'\"([^\"]*)'),",
						"          stage_id = regexExtract(split(toString(stage_id),',')[1],'\"([^\"]*)'),",
						"          stage_value = regexExtract(split(toString(stage_id),',')[2],'\"([^\"]*)'),",
						"          processdate = currentUTC(),",
						"          sourcesystem = 'Odoo',",
						"          date_conversion = toTimestamp(date_conversion),",
						"          id = toString(id),",
						"          date_action_last = toTimestamp(date_action_last),",
						"          date_closed = toTimestamp(date_closed),",
						"          lost_reason_id = replace(split(lost_reason,',')[1],'[',''),",
						"          lost_reason_value = regexExtract(split(toString(lost_reason),',')[2],'\"([^\"]*)'),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"select1 alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/odoolead',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkOdooSilver"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adsl_json')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SalesDWHF0')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DWHF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesGoldF0"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_PostgreSql",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "MapDrifted1",
							"description": "Crea una asignación explícita para cada columna de desfase."
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceSalesGoldF0",
						"MapDrifted1 alterRow(insertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"sourceSalesGoldF0 derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDrifted1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]",
				"[concat(variables('factoryId'), '/datasets/ds_PostgreSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SalesGoldF0_Full')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceClientifyDealsSilverF0"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceOdooLeadSilverF0"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkVentasGoldF0"
						}
					],
					"transformations": [
						{
							"name": "MapDriftedClientifyDealsSilverF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "selectOdooLeadSilverF0"
						},
						{
							"name": "selectClientifyDealsSilverF0"
						},
						{
							"name": "derivedColumnOdooLeadSilverF0"
						},
						{
							"name": "union1"
						},
						{
							"name": "derivedColumnClientifyDealsSilverF0"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "MapDriftedOdooLeadSilverF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/clientifydeals') ~> sourceClientifyDealsSilverF0",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/odoolead') ~> sourceOdooLeadSilverF0",
						"sourceClientifyDealsSilverF0 derive(actual_closed_date = toDate(byName('actual_closed_date')),",
						"          amount = toDouble(byName('amount')),",
						"          amount_user = toString(byName('amount_user')),",
						"          company = toString(byName('company')),",
						"          contact = toString(byName('contact')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_medium = toString(byName('contact_medium')),",
						"          contact_name = toString(byName('contact_name')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          contact_source = toString(byName('contact_source')),",
						"          created = toTimestamp(byName('created')),",
						"          currency = toString(byName('currency')),",
						"          expected_closed_date = toDate(byName('expected_closed_date')),",
						"          id = toString(byName('id')),",
						"          modified = toTimestamp(byName('modified')),",
						"          name = toString(byName('name')),",
						"          owner_name = toString(byName('owner_name')),",
						"          pipeline = toString(byName('pipeline')),",
						"          pipeline_desc = toString(byName('pipeline_desc')),",
						"          pipeline_stage = toString(byName('pipeline_stage')),",
						"          pipeline_stage_desc = toString(byName('pipeline_stage_desc')),",
						"          probability = toInteger(byName('probability')),",
						"          probability_desc = toString(byName('probability_desc')),",
						"          status = toInteger(byName('status')),",
						"          status_desc = toString(byName('status_desc')),",
						"          url = toString(byName('url')),",
						"          filepath = toString(byName('filepath')),",
						"          custom_fields_ByRatings_Rating = toString(byName('custom_fields_ByRatings_Rating')),",
						"          custom_fields_ByRatings_Score = toString(byName('custom_fields_ByRatings_Score')),",
						"          custom_fields_Estudio_Old = toString(byName('custom_fields_Estudio_Old')),",
						"          custom_fields_ID = toString(byName('custom_fields_ID')),",
						"          custom_fields_Modalidad_Old = toString(byName('custom_fields_Modalidad_Old')),",
						"          custom_fields_Sede_Old = toString(byName('custom_fields_Sede_Old')),",
						"          custom_fields_anio_academico = toString(byName('custom_fields_anio_academico')),",
						"          custom_fields_campaign_id = toString(byName('custom_fields_campaign_id')),",
						"          custom_fields_centro = toString(byName('custom_fields_centro')),",
						"          custom_fields_ciudad = toString(byName('custom_fields_ciudad')),",
						"          custom_fields_cp = toString(byName('custom_fields_cp')),",
						"          custom_fields_curso_anio = toString(byName('custom_fields_curso_anio')),",
						"          custom_fields_descuento = toDouble(byName('custom_fields_descuento')),",
						"          custom_fields_descuento_matricula = toDouble(byName('custom_fields_descuento_matricula')),",
						"          custom_fields_estudio = toString(byName('custom_fields_estudio')),",
						"          custom_fields_fecha_inscripcion = toDate(byName('custom_fields_fecha_inscripcion')),",
						"          custom_fields_gclid = toString(byName('custom_fields_gclid')),",
						"          custom_fields_gdpr = toString(byName('custom_fields_gdpr')),",
						"          custom_fields_google_id = toString(byName('custom_fields_google_id')),",
						"          custom_fields_linea_negocio = toString(byName('custom_fields_linea_negocio')),",
						"          custom_fields_matricula = toString(byName('custom_fields_matricula')),",
						"          custom_fields_mensualidad = toString(byName('custom_fields_mensualidad')),",
						"          custom_fields_modalidad = toString(byName('custom_fields_modalidad')),",
						"          custom_fields_pais = toString(byName('custom_fields_pais')),",
						"          custom_fields_ref = toString(byName('custom_fields_ref')),",
						"          custom_fields_sede = toString(byName('custom_fields_sede')),",
						"          custom_fields_tipo_conversion = toString(byName('custom_fields_tipo_conversion')),",
						"          custom_fields_turno = toString(byName('custom_fields_turno')),",
						"          custom_fields_ua = toString(byName('custom_fields_ua')),",
						"          custom_fields_url = toString(byName('custom_fields_url')),",
						"          custom_fields_utm_ad_id = toString(byName('custom_fields_utm_ad_id')),",
						"          custom_fields_utm_adset_id = toString(byName('custom_fields_utm_adset_id')),",
						"          custom_fields_utm_campaign = toString(byName('custom_fields_utm_campaign')),",
						"          custom_fields_utm_campaign_id = toString(byName('custom_fields_utm_campaign_id')),",
						"          custom_fields_utm_campaign_name = toString(byName('custom_fields_utm_campaign_name')),",
						"          custom_fields_utm_channel = toString(byName('custom_fields_utm_channel')),",
						"          custom_fields_utm_device = toString(byName('custom_fields_utm_device')),",
						"          custom_fields_utm_estrategia = toString(byName('custom_fields_utm_estrategia')),",
						"          custom_fields_utm_medium = toString(byName('custom_fields_utm_medium')),",
						"          custom_fields_utm_network = toString(byName('custom_fields_utm_network')),",
						"          custom_fields_utm_placement = toString(byName('custom_fields_utm_placement')),",
						"          custom_fields_utm_site_source_name = toString(byName('custom_fields_utm_site_source_name')),",
						"          custom_fields_utm_source = toString(byName('custom_fields_utm_source')),",
						"          custom_fields_utm_term = toString(byName('custom_fields_utm_term')),",
						"          custom_fields_utm_type = toString(byName('custom_fields_utm_type')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          created_tzh = toString(byName('created_tzh')),",
						"          modified_tzh = toString(byName('modified_tzh')),",
						"     partitionBy('hash', 1)) ~> MapDriftedClientifyDealsSilverF0",
						"MapDriftedOdooLeadSilverF0 select(mapColumn(",
						"          created = create_date,",
						"          fecha_inscripcion = date_conversion,",
						"          id,",
						"          amount = sale_amount_total,",
						"          processdate,",
						"          sourcesystem,",
						"          filepath,",
						"          name,",
						"          modified = write_date,",
						"          source = x_ga_source,",
						"          date_closed,",
						"          owner_name = user_value,",
						"          estudio = x_curso_value,",
						"          contact_email = email_from,",
						"          contact_phone = phone,",
						"          stage_value,",
						"          lost_reason_value,",
						"          sede = x_sede_value,",
						"          modalidad = x_modalidad_value",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOdooLeadSilverF0",
						"MapDriftedClientifyDealsSilverF0 select(mapColumn(",
						"          amount,",
						"          created,",
						"          id,",
						"          name,",
						"          filepath,",
						"          descuento = custom_fields_descuento,",
						"          descuento_matricula = custom_fields_descuento_matricula,",
						"          fecha_inscripcion = custom_fields_fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro = custom_fields_centro,",
						"          source = custom_fields_utm_source,",
						"          date_closed = actual_closed_date,",
						"          owner_name,",
						"          estudio = custom_fields_estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value = pipeline_stage_desc,",
						"          status_desc,",
						"          byratings_rating = custom_fields_ByRatings_Rating,",
						"          sede = custom_fields_sede,",
						"          modalidad = custom_fields_modalidad",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectClientifyDealsSilverF0",
						"selectOdooLeadSilverF0 derive(descuento = toDouble('0'),",
						"          descuento_matricula = toDouble('0'),",
						"          centro = 'ISEP',",
						"          status_desc = '',",
						"          tiempo_de_maduracion = toDouble(minus(date_closed,created)/(1000*60*60*24)),",
						"          new_enrollent = iif(and(stage_value=='Won',!isNull(date_closed)), 1, 0),",
						"          lead_neto = iif(stage_value=='Duplicado', 0, 1),",
						"          status_final = toString(iif(or(!isNull(lost_reason_value),lost_reason_value!=''),'Perdida',toString(iif(stage_value=='Won','Ganada',toString(iif(and(and(or(stage_value=='Negociación',stage_value=='Proposition'),or(isNull(lost_reason_value),lost_reason_value=='')),!isNull(date_closed)),'Pago Reserva',toString(iif(and(and(or(stage_value=='Negociación',stage_value=='Proposition'),or(isNull(lost_reason_value),lost_reason_value=='')),isNull(date_closed)),'Interesado',toString(iif(or(stage_value=='Sin Contacto',stage_value=='Qualified'),'Seguimiento',toString(iif(or(stage_value=='New',stage_value=='Duplicado'),'Sin asignar')))))))))))),",
						"          created_date = toDate(created),",
						"          byratings_rating = '',",
						"          sede = iifNull(sede,'',sede),",
						"          modalidad = iifNull(modalidad,'',modalidad),",
						"     partitionBy('hash', 1)) ~> derivedColumnOdooLeadSilverF0",
						"derivedColumnClientifyDealsSilverF0, derivedColumnOdooLeadSilverF0 union(byName: true,",
						"     partitionBy('hash', 1))~> union1",
						"selectClientifyDealsSilverF0 derive(fecha_inscripcion = toTimestamp(fecha_inscripcion),",
						"          date_closed = toTimestamp(date_closed),",
						"          lost_reason_value = '',",
						"          tiempo_de_maduracion = toDouble(minus(toTimestamp(fecha_inscripcion),created)/(1000*60*60*24)),",
						"          new_enrollent = iif(isNull(fecha_inscripcion), 0, 1),",
						"          lead_neto = iif(stage_value=='Duplicado', 0, 1),",
						"          status_final = toString(iif(or(status_desc=='Lost',status_desc=='Expired'),'Perdida',toString(iif(stage_value=='Traslado a ERP','Ganada',toString(iif(and(and(stage_value=='Seguimiento Interesado',or(status_desc=='Won',status_desc=='Open')),!isNull(fecha_inscripcion)),'Pago Reserva',toString(iif(and(and(stage_value=='Seguimiento Interesado',or(status_desc=='Won',status_desc=='Open')),isNull(fecha_inscripcion)),'Interesado',toString(iif(and(or(or(stage_value=='Seguimiento Primer Contacto',stage_value=='No contesta'),stage_value=='Seguimiento Valorando'),or(status_desc=='Won',status_desc=='Open')),'Seguimiento',toString(iif(and(stage_value=='Sin Gestionar',or(status_desc=='Won',status_desc=='Open')),'Sin asignar')))))))))))),",
						"          created_date = toDate(created),",
						"          byratings_rating = iifNull(byratings_rating,''),",
						"          sede = iifNull(sede,'',sede),",
						"          modalidad = iifNull(modalidad,'',modalidad),",
						"          centro = 'CESIF',",
						"     partitionBy('hash', 1)) ~> derivedColumnClientifyDealsSilverF0",
						"union1 alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"sourceOdooLeadSilverF0 derive(campaign_id = toBoolean(byName('campaign_id')),",
						"          city = toString(byName('city')),",
						"          company_id = toString(byName('company_id')),",
						"          contact_name = toString(byName('contact_name')),",
						"          country_id = toString(byName('country_id')),",
						"          create_date = toTimestamp(byName('create_date')),",
						"          date_action_last = toTimestamp(byName('date_action_last')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          date_conversion = toTimestamp(byName('date_conversion')),",
						"          date_last_stage_update = toTimestamp(byName('date_last_stage_update')),",
						"          email_cc = toBoolean(byName('email_cc')),",
						"          email_from = toString(byName('email_from')),",
						"          id = toString(byName('id')),",
						"          lost_reason_id = toString(byName('lost_reason_id')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          medium_id = toBoolean(byName('medium_id')),",
						"          mobile = toString(byName('mobile')),",
						"          name = toString(byName('name')),",
						"          partner_name = toString(byName('partner_name')),",
						"          phone = toString(byName('phone')),",
						"          planned_revenue = toDouble(byName('planned_revenue')),",
						"          probability = toDouble(byName('probability')),",
						"          sale_amount_total = toDouble(byName('sale_amount_total')),",
						"          source_id = toBoolean(byName('source_id')),",
						"          stage_id = toString(byName('stage_id')),",
						"          state_id = toString(byName('state_id')),",
						"          street = toString(byName('street')),",
						"          street2 = toBoolean(byName('street2')),",
						"          title = toBoolean(byName('title')),",
						"          user_id = toString(byName('user_id')),",
						"          write_date = toTimestamp(byName('write_date')),",
						"          x_codcurso = toString(byName('x_codcurso')),",
						"          x_codmodalidad = toString(byName('x_codmodalidad')),",
						"          x_curso = toString(byName('x_curso')),",
						"          x_curso_id = toString(byName('x_curso_id')),",
						"          x_ga_campaign = toString(byName('x_ga_campaign')),",
						"          x_ga_medium = toString(byName('x_ga_medium')),",
						"          x_ga_source = toString(byName('x_ga_source')),",
						"          x_ga_utma = toString(byName('x_ga_utma')),",
						"          x_modalidad_id = toString(byName('x_modalidad_id')),",
						"          x_sede_id = toString(byName('x_sede_id')),",
						"          x_studio_field_FM3fX = toBoolean(byName('x_studio_field_FM3fX')),",
						"          zip = toString(byName('zip')),",
						"          filepath = toString(byName('filepath')),",
						"          country_value = toString(byName('country_value')),",
						"          state_value = toString(byName('state_value')),",
						"          user_value = toString(byName('user_value')),",
						"          x_curso_value = toString(byName('x_curso_value')),",
						"          x_modalidad_value = toString(byName('x_modalidad_value')),",
						"          x_sede_value = toString(byName('x_sede_value')),",
						"          company_value = toString(byName('company_value')),",
						"          stage_value = toString(byName('stage_value')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"     partitionBy('hash', 1)) ~> MapDriftedOdooLeadSilverF0",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkVentasGoldF0"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SalesGoldF0_Full_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceClientifyDealsSilverF0"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceOdooLeadSilverF0"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkVentasGoldF0"
						}
					],
					"transformations": [
						{
							"name": "MapDriftedClientifyDealsSilverF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "selectOdooLeadSilverF0"
						},
						{
							"name": "selectClientifyDealsSilverF0"
						},
						{
							"name": "derivedColumnOdooLeadSilverF0"
						},
						{
							"name": "union1"
						},
						{
							"name": "derivedColumnClientifyDealsSilverF0"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "MapDriftedOdooLeadSilverF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/clientifydeals') ~> sourceClientifyDealsSilverF0",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/odoolead') ~> sourceOdooLeadSilverF0",
						"sourceClientifyDealsSilverF0 derive(actual_closed_date = toDate(byName('actual_closed_date')),",
						"          amount = toDouble(byName('amount')),",
						"          amount_user = toString(byName('amount_user')),",
						"          company = toString(byName('company')),",
						"          contact = toString(byName('contact')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_medium = toString(byName('contact_medium')),",
						"          contact_name = toString(byName('contact_name')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          contact_source = toString(byName('contact_source')),",
						"          created = toTimestamp(byName('created')),",
						"          currency = toString(byName('currency')),",
						"          expected_closed_date = toDate(byName('expected_closed_date')),",
						"          id = toString(byName('id')),",
						"          modified = toTimestamp(byName('modified')),",
						"          name = toString(byName('name')),",
						"          owner_name = toString(byName('owner_name')),",
						"          pipeline = toString(byName('pipeline')),",
						"          pipeline_desc = toString(byName('pipeline_desc')),",
						"          pipeline_stage = toString(byName('pipeline_stage')),",
						"          pipeline_stage_desc = toString(byName('pipeline_stage_desc')),",
						"          probability = toInteger(byName('probability')),",
						"          probability_desc = toString(byName('probability_desc')),",
						"          status = toInteger(byName('status')),",
						"          status_desc = toString(byName('status_desc')),",
						"          url = toString(byName('url')),",
						"          filepath = toString(byName('filepath')),",
						"          custom_fields_ByRatings_Rating = toString(byName('custom_fields_ByRatings_Rating')),",
						"          custom_fields_ByRatings_Score = toString(byName('custom_fields_ByRatings_Score')),",
						"          custom_fields_Estudio_Old = toString(byName('custom_fields_Estudio_Old')),",
						"          custom_fields_ID = toString(byName('custom_fields_ID')),",
						"          custom_fields_Modalidad_Old = toString(byName('custom_fields_Modalidad_Old')),",
						"          custom_fields_Sede_Old = toString(byName('custom_fields_Sede_Old')),",
						"          custom_fields_anio_academico = toString(byName('custom_fields_anio_academico')),",
						"          custom_fields_campaign_id = toString(byName('custom_fields_campaign_id')),",
						"          custom_fields_centro = toString(byName('custom_fields_centro')),",
						"          custom_fields_ciudad = toString(byName('custom_fields_ciudad')),",
						"          custom_fields_cp = toString(byName('custom_fields_cp')),",
						"          custom_fields_curso_anio = toString(byName('custom_fields_curso_anio')),",
						"          custom_fields_descuento = toDouble(byName('custom_fields_descuento')),",
						"          custom_fields_descuento_matricula = toDouble(byName('custom_fields_descuento_matricula')),",
						"          custom_fields_estudio = toString(byName('custom_fields_estudio')),",
						"          custom_fields_fecha_inscripcion = toDate(byName('custom_fields_fecha_inscripcion')),",
						"          custom_fields_gclid = toString(byName('custom_fields_gclid')),",
						"          custom_fields_gdpr = toString(byName('custom_fields_gdpr')),",
						"          custom_fields_google_id = toString(byName('custom_fields_google_id')),",
						"          custom_fields_linea_negocio = toString(byName('custom_fields_linea_negocio')),",
						"          custom_fields_matricula = toString(byName('custom_fields_matricula')),",
						"          custom_fields_mensualidad = toString(byName('custom_fields_mensualidad')),",
						"          custom_fields_modalidad = toString(byName('custom_fields_modalidad')),",
						"          custom_fields_pais = toString(byName('custom_fields_pais')),",
						"          custom_fields_ref = toString(byName('custom_fields_ref')),",
						"          custom_fields_sede = toString(byName('custom_fields_sede')),",
						"          custom_fields_tipo_conversion = toString(byName('custom_fields_tipo_conversion')),",
						"          custom_fields_turno = toString(byName('custom_fields_turno')),",
						"          custom_fields_ua = toString(byName('custom_fields_ua')),",
						"          custom_fields_url = toString(byName('custom_fields_url')),",
						"          custom_fields_utm_ad_id = toString(byName('custom_fields_utm_ad_id')),",
						"          custom_fields_utm_adset_id = toString(byName('custom_fields_utm_adset_id')),",
						"          custom_fields_utm_campaign = toString(byName('custom_fields_utm_campaign')),",
						"          custom_fields_utm_campaign_id = toString(byName('custom_fields_utm_campaign_id')),",
						"          custom_fields_utm_campaign_name = toString(byName('custom_fields_utm_campaign_name')),",
						"          custom_fields_utm_channel = toString(byName('custom_fields_utm_channel')),",
						"          custom_fields_utm_device = toString(byName('custom_fields_utm_device')),",
						"          custom_fields_utm_estrategia = toString(byName('custom_fields_utm_estrategia')),",
						"          custom_fields_utm_medium = toString(byName('custom_fields_utm_medium')),",
						"          custom_fields_utm_network = toString(byName('custom_fields_utm_network')),",
						"          custom_fields_utm_placement = toString(byName('custom_fields_utm_placement')),",
						"          custom_fields_utm_site_source_name = toString(byName('custom_fields_utm_site_source_name')),",
						"          custom_fields_utm_source = toString(byName('custom_fields_utm_source')),",
						"          custom_fields_utm_term = toString(byName('custom_fields_utm_term')),",
						"          custom_fields_utm_type = toString(byName('custom_fields_utm_type')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          created_tzh = toString(byName('created_tzh')),",
						"          modified_tzh = toString(byName('modified_tzh')),",
						"     partitionBy('hash', 1)) ~> MapDriftedClientifyDealsSilverF0",
						"MapDriftedOdooLeadSilverF0 select(mapColumn(",
						"          created = create_date,",
						"          fecha_inscripcion = date_conversion,",
						"          id,",
						"          amount = sale_amount_total,",
						"          processdate,",
						"          sourcesystem,",
						"          filepath,",
						"          name,",
						"          modified = write_date,",
						"          source = x_ga_source,",
						"          date_closed,",
						"          owner_name = user_value,",
						"          estudio = x_curso_value,",
						"          contact_email = email_from,",
						"          contact_phone = phone,",
						"          stage_value,",
						"          lost_reason_value,",
						"          sede = x_sede_value,",
						"          modalidad = x_modalidad_value",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOdooLeadSilverF0",
						"MapDriftedClientifyDealsSilverF0 select(mapColumn(",
						"          amount,",
						"          created,",
						"          id,",
						"          name,",
						"          filepath,",
						"          descuento = custom_fields_descuento,",
						"          descuento_matricula = custom_fields_descuento_matricula,",
						"          fecha_inscripcion = custom_fields_fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro = custom_fields_centro,",
						"          source = custom_fields_utm_source,",
						"          date_closed = actual_closed_date,",
						"          owner_name,",
						"          estudio = custom_fields_estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value = pipeline_stage_desc,",
						"          status_desc,",
						"          byratings_rating = custom_fields_ByRatings_Rating,",
						"          sede = custom_fields_sede,",
						"          modalidad = custom_fields_modalidad",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectClientifyDealsSilverF0",
						"selectOdooLeadSilverF0 derive(descuento = toDouble('0'),",
						"          descuento_matricula = toDouble('0'),",
						"          centro = 'ISEP',",
						"          status_desc = '',",
						"          tiempo_de_maduracion = toDouble(minus(date_closed,created)/(1000*60*60*24)),",
						"          new_enrollent = iif(and(stage_value=='Won',!isNull(date_closed)), 1, 0),",
						"          lead_neto = iif(or(stage_value=='Duplicado',regexMatch(contact_email,'metrodoraeducation.com')), 0, 1),",
						"          status_final = toString(iif(or(!isNull(lost_reason_value),lost_reason_value!=''),'Perdida',toString(iif(stage_value=='Won','Ganada',toString(iif(and(and(or(stage_value=='Negociación',stage_value=='Proposition'),or(isNull(lost_reason_value),lost_reason_value=='')),!isNull(date_closed)),'Pago Reserva',toString(iif(and(and(or(stage_value=='Negociación',stage_value=='Proposition'),or(isNull(lost_reason_value),lost_reason_value=='')),isNull(date_closed)),'Interesado',toString(iif(or(stage_value=='Sin Contacto',stage_value=='Qualified'),'Seguimiento',toString(iif(or(stage_value=='New',stage_value=='Duplicado'),'Sin asignar')))))))))))),",
						"          created_date = toDate(created),",
						"          byratings_rating = '',",
						"          sede = iifNull(sede,'',sede),",
						"          modalidad = iifNull(modalidad,'',modalidad),",
						"     partitionBy('hash', 1)) ~> derivedColumnOdooLeadSilverF0",
						"derivedColumnClientifyDealsSilverF0, derivedColumnOdooLeadSilverF0 union(byName: true,",
						"     partitionBy('hash', 1))~> union1",
						"selectClientifyDealsSilverF0 derive(fecha_inscripcion = toTimestamp(fecha_inscripcion),",
						"          date_closed = toTimestamp(date_closed),",
						"          lost_reason_value = '',",
						"          tiempo_de_maduracion = toDouble(minus(toTimestamp(fecha_inscripcion),created)/(1000*60*60*24)),",
						"          new_enrollent = iif(isNull(fecha_inscripcion), 0, 1),",
						"          lead_neto = iif(or(stage_value=='Duplicado',regexMatch(contact_email,'metrodoraeducation.com')), 0, 1),",
						"          status_final = toString(iif(or(status_desc=='Lost',status_desc=='Expired'),'Perdida',toString(iif(stage_value=='Traslado a ERP','Ganada',toString(iif(and(and(stage_value=='Seguimiento Interesado',or(status_desc=='Won',status_desc=='Open')),!isNull(fecha_inscripcion)),'Pago Reserva',toString(iif(and(and(stage_value=='Seguimiento Interesado',or(status_desc=='Won',status_desc=='Open')),isNull(fecha_inscripcion)),'Interesado',toString(iif(and(or(or(stage_value=='Seguimiento Primer Contacto',stage_value=='No contesta'),stage_value=='Seguimiento Valorando'),or(status_desc=='Won',status_desc=='Open')),'Seguimiento',toString(iif(and(stage_value=='Sin Gestionar',or(status_desc=='Won',status_desc=='Open')),'Sin asignar')))))))))))),",
						"          created_date = toDate(created),",
						"          byratings_rating = iifNull(byratings_rating,''),",
						"          sede = iifNull(sede,'',sede),",
						"          modalidad = iifNull(modalidad,'',modalidad),",
						"     partitionBy('hash', 1)) ~> derivedColumnClientifyDealsSilverF0",
						"union1 alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"sourceOdooLeadSilverF0 derive(campaign_id = toBoolean(byName('campaign_id')),",
						"          city = toString(byName('city')),",
						"          company_id = toString(byName('company_id')),",
						"          contact_name = toString(byName('contact_name')),",
						"          country_id = toString(byName('country_id')),",
						"          create_date = toTimestamp(byName('create_date')),",
						"          date_action_last = toTimestamp(byName('date_action_last')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          date_conversion = toTimestamp(byName('date_conversion')),",
						"          date_last_stage_update = toTimestamp(byName('date_last_stage_update')),",
						"          email_cc = toBoolean(byName('email_cc')),",
						"          email_from = toString(byName('email_from')),",
						"          id = toString(byName('id')),",
						"          lost_reason_id = toString(byName('lost_reason_id')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          medium_id = toBoolean(byName('medium_id')),",
						"          mobile = toString(byName('mobile')),",
						"          name = toString(byName('name')),",
						"          partner_name = toString(byName('partner_name')),",
						"          phone = toString(byName('phone')),",
						"          planned_revenue = toDouble(byName('planned_revenue')),",
						"          probability = toDouble(byName('probability')),",
						"          sale_amount_total = toDouble(byName('sale_amount_total')),",
						"          source_id = toBoolean(byName('source_id')),",
						"          stage_id = toString(byName('stage_id')),",
						"          state_id = toString(byName('state_id')),",
						"          street = toString(byName('street')),",
						"          street2 = toBoolean(byName('street2')),",
						"          title = toBoolean(byName('title')),",
						"          user_id = toString(byName('user_id')),",
						"          write_date = toTimestamp(byName('write_date')),",
						"          x_codcurso = toString(byName('x_codcurso')),",
						"          x_codmodalidad = toString(byName('x_codmodalidad')),",
						"          x_curso = toString(byName('x_curso')),",
						"          x_curso_id = toString(byName('x_curso_id')),",
						"          x_ga_campaign = toString(byName('x_ga_campaign')),",
						"          x_ga_medium = toString(byName('x_ga_medium')),",
						"          x_ga_source = toString(byName('x_ga_source')),",
						"          x_ga_utma = toString(byName('x_ga_utma')),",
						"          x_modalidad_id = toString(byName('x_modalidad_id')),",
						"          x_sede_id = toString(byName('x_sede_id')),",
						"          x_studio_field_FM3fX = toBoolean(byName('x_studio_field_FM3fX')),",
						"          zip = toString(byName('zip')),",
						"          filepath = toString(byName('filepath')),",
						"          country_value = toString(byName('country_value')),",
						"          state_value = toString(byName('state_value')),",
						"          user_value = toString(byName('user_value')),",
						"          x_curso_value = toString(byName('x_curso_value')),",
						"          x_modalidad_value = toString(byName('x_modalidad_value')),",
						"          x_sede_value = toString(byName('x_sede_value')),",
						"          company_value = toString(byName('company_value')),",
						"          stage_value = toString(byName('stage_value')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"     partitionBy('hash', 1)) ~> MapDriftedOdooLeadSilverF0",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkVentasGoldF0"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adsl')]"
			]
		}
	]
}