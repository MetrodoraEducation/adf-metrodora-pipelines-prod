{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-metrodoralakehouse-pro"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/df_ClientifyDealsGoldF0_LostReason_copy2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesGold"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceClientifyLostReasonSilver"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesGold2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkSalesGold"
						}
					],
					"transformations": [
						{
							"name": "MapDriftedSalesGold",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "joinLostReason"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "MapDriftedClientifyLostReasonSilver",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "derivedColumnNullValues"
						},
						{
							"name": "filterClientify"
						},
						{
							"name": "MapDriftedSalesGold2",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "selectID"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "filterCount"
						},
						{
							"name": "joinCount"
						},
						{
							"name": "filterClientify2"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceSalesGold",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/clientifydealslostreason') ~> sourceClientifyLostReasonSilver",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceSalesGold2",
						"sourceSalesGold derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDriftedSalesGold",
						"select2, derivedColumnNullValues join(select2@id == MapDriftedClientifyLostReasonSilver@id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinLostReason",
						"joinLostReason derive(lost_reason_value = lost_reason,",
						"          lead_neto = iif((lost_reason=='NV Datos erróneos' || lost_reason=='NV Duplicado' || lost_reason=='NV Busca empleo' || lost_reason=='NV Niño' || lost_reason=='NV Extranjero' || lost_reason=='NV Bot' || lost_reason=='NV Test'), 0, lead_neto),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          amount,",
						"          created,",
						"          id = select2@id,",
						"          name,",
						"          filepath,",
						"          descuento,",
						"          descuento_matricula,",
						"          fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          status_desc,",
						"          byratings_rating,",
						"          sede,",
						"          modalidad,",
						"          lost_reason_value,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 alterRow(updateIf(!(lost_reason_value=='NV Bot'||lost_reason_value=='NV Test')),",
						"     deleteIf((lost_reason_value=='NV Bot'||lost_reason_value=='NV Test')),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"sourceClientifyLostReasonSilver derive(id = toString(byName('id')),",
						"          lost_reason = toString(byName('lost_reason')),",
						"     partitionBy('hash', 1)) ~> MapDriftedClientifyLostReasonSilver",
						"MapDriftedClientifyLostReasonSilver derive(lost_reason = iifNull(lost_reason,'',lost_reason),",
						"     partitionBy('hash', 1)) ~> derivedColumnNullValues",
						"MapDriftedSalesGold filter(sourcesystem == \"Clientify\",",
						"     partitionBy('hash', 1)) ~> filterClientify",
						"sourceSalesGold2 derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDriftedSalesGold2",
						"filterClientify2 select(mapColumn(",
						"          id",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectID",
						"selectID aggregate(groupBy(id),",
						"     countID = count(id),",
						"     partitionBy('hash', 1)) ~> aggregate1",
						"aggregate1 sort(desc(countID, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"sort1 filter(countID==1,",
						"     partitionBy('hash', 1)) ~> filterCount",
						"filterClientify, filterCount join(MapDriftedSalesGold@id == aggregate1@id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> joinCount",
						"MapDriftedSalesGold2 filter(sourcesystem == \"Clientify\",",
						"     partitionBy('hash', 1)) ~> filterClientify2",
						"joinCount select(mapColumn(",
						"          amount,",
						"          created,",
						"          id = MapDriftedSalesGold@id,",
						"          name,",
						"          filepath,",
						"          descuento,",
						"          descuento_matricula,",
						"          fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          status_desc,",
						"          byratings_rating,",
						"          sede,",
						"          modalidad,",
						"          lost_reason_value,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: true,",
						"     insertable: false,",
						"     updateable: true,",
						"     upsertable: false,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkSalesGold"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ClientifyDealsGoldF0_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceClientifyDealsSilverF0"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceVentasGoldF0"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkVentasGoldF0"
						}
					],
					"transformations": [
						{
							"name": "MapDriftedClientifyDealsSilverF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "selectClientifyDealsSilverF0"
						},
						{
							"name": "derivedColumnClientifyDealsSilverF0"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "filterVentasGoldF0"
						},
						{
							"name": "selectVentasGoldF0"
						},
						{
							"name": "aggregateMaxprocessdate"
						},
						{
							"name": "join1"
						},
						{
							"name": "filterFinal"
						},
						{
							"name": "selectFinal"
						},
						{
							"name": "sort1"
						},
						{
							"name": "MapDriftedVentasGoldF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/clientifydeals') ~> sourceClientifyDealsSilverF0",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceVentasGoldF0",
						"sourceClientifyDealsSilverF0 derive(actual_closed_date = toDate(byName('actual_closed_date')),",
						"          amount = toDouble(byName('amount')),",
						"          amount_user = toString(byName('amount_user')),",
						"          company = toString(byName('company')),",
						"          contact = toString(byName('contact')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_medium = toString(byName('contact_medium')),",
						"          contact_name = toString(byName('contact_name')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          contact_source = toString(byName('contact_source')),",
						"          created = toTimestamp(byName('created')),",
						"          currency = toString(byName('currency')),",
						"          expected_closed_date = toDate(byName('expected_closed_date')),",
						"          id = toString(byName('id')),",
						"          modified = toTimestamp(byName('modified')),",
						"          name = toString(byName('name')),",
						"          owner_name = toString(byName('owner_name')),",
						"          pipeline = toString(byName('pipeline')),",
						"          pipeline_desc = toString(byName('pipeline_desc')),",
						"          pipeline_stage = toString(byName('pipeline_stage')),",
						"          pipeline_stage_desc = toString(byName('pipeline_stage_desc')),",
						"          probability = toInteger(byName('probability')),",
						"          probability_desc = toString(byName('probability_desc')),",
						"          status = toInteger(byName('status')),",
						"          status_desc = toString(byName('status_desc')),",
						"          url = toString(byName('url')),",
						"          filepath = toString(byName('filepath')),",
						"          custom_fields_ByRatings_Rating = toString(byName('custom_fields_ByRatings_Rating')),",
						"          custom_fields_ByRatings_Score = toString(byName('custom_fields_ByRatings_Score')),",
						"          custom_fields_Estudio_Old = toString(byName('custom_fields_Estudio_Old')),",
						"          custom_fields_ID = toString(byName('custom_fields_ID')),",
						"          custom_fields_Modalidad_Old = toString(byName('custom_fields_Modalidad_Old')),",
						"          custom_fields_Sede_Old = toString(byName('custom_fields_Sede_Old')),",
						"          custom_fields_anio_academico = toString(byName('custom_fields_anio_academico')),",
						"          custom_fields_campaign_id = toString(byName('custom_fields_campaign_id')),",
						"          custom_fields_centro = toString(byName('custom_fields_centro')),",
						"          custom_fields_ciudad = toString(byName('custom_fields_ciudad')),",
						"          custom_fields_cp = toString(byName('custom_fields_cp')),",
						"          custom_fields_curso_anio = toString(byName('custom_fields_curso_anio')),",
						"          custom_fields_descuento = toDouble(byName('custom_fields_descuento')),",
						"          custom_fields_descuento_matricula = toDouble(byName('custom_fields_descuento_matricula')),",
						"          custom_fields_estudio = toString(byName('custom_fields_estudio')),",
						"          custom_fields_fecha_inscripcion = toDate(byName('custom_fields_fecha_inscripcion')),",
						"          custom_fields_gclid = toString(byName('custom_fields_gclid')),",
						"          custom_fields_gdpr = toString(byName('custom_fields_gdpr')),",
						"          custom_fields_google_id = toString(byName('custom_fields_google_id')),",
						"          custom_fields_linea_negocio = toString(byName('custom_fields_linea_negocio')),",
						"          custom_fields_matricula = toString(byName('custom_fields_matricula')),",
						"          custom_fields_mensualidad = toString(byName('custom_fields_mensualidad')),",
						"          custom_fields_modalidad = toString(byName('custom_fields_modalidad')),",
						"          custom_fields_pais = toString(byName('custom_fields_pais')),",
						"          custom_fields_ref = toString(byName('custom_fields_ref')),",
						"          custom_fields_sede = toString(byName('custom_fields_sede')),",
						"          custom_fields_tipo_conversion = toString(byName('custom_fields_tipo_conversion')),",
						"          custom_fields_turno = toString(byName('custom_fields_turno')),",
						"          custom_fields_ua = toString(byName('custom_fields_ua')),",
						"          custom_fields_url = toString(byName('custom_fields_url')),",
						"          custom_fields_utm_ad_id = toString(byName('custom_fields_utm_ad_id')),",
						"          custom_fields_utm_adset_id = toString(byName('custom_fields_utm_adset_id')),",
						"          custom_fields_utm_campaign = toString(byName('custom_fields_utm_campaign')),",
						"          custom_fields_utm_campaign_id = toString(byName('custom_fields_utm_campaign_id')),",
						"          custom_fields_utm_campaign_name = toString(byName('custom_fields_utm_campaign_name')),",
						"          custom_fields_utm_channel = toString(byName('custom_fields_utm_channel')),",
						"          custom_fields_utm_device = toString(byName('custom_fields_utm_device')),",
						"          custom_fields_utm_estrategia = toString(byName('custom_fields_utm_estrategia')),",
						"          custom_fields_utm_medium = toString(byName('custom_fields_utm_medium')),",
						"          custom_fields_utm_network = toString(byName('custom_fields_utm_network')),",
						"          custom_fields_utm_placement = toString(byName('custom_fields_utm_placement')),",
						"          custom_fields_utm_site_source_name = toString(byName('custom_fields_utm_site_source_name')),",
						"          custom_fields_utm_source = toString(byName('custom_fields_utm_source')),",
						"          custom_fields_utm_term = toString(byName('custom_fields_utm_term')),",
						"          custom_fields_utm_type = toString(byName('custom_fields_utm_type')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          created_tzh = toString(byName('created_tzh')),",
						"          modified_tzh = toString(byName('modified_tzh')),",
						"     partitionBy('hash', 1)) ~> MapDriftedClientifyDealsSilverF0",
						"MapDriftedClientifyDealsSilverF0 select(mapColumn(",
						"          amount,",
						"          created,",
						"          id,",
						"          name,",
						"          filepath,",
						"          descuento = custom_fields_descuento,",
						"          descuento_matricula = custom_fields_descuento_matricula,",
						"          fecha_inscripcion = custom_fields_fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro = custom_fields_centro,",
						"          source = custom_fields_utm_source,",
						"          date_closed = actual_closed_date,",
						"          owner_name,",
						"          estudio = custom_fields_estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value = pipeline_stage_desc,",
						"          status_desc,",
						"          byratings_rating = custom_fields_ByRatings_Rating,",
						"          sede = custom_fields_sede,",
						"          modalidad = custom_fields_modalidad",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectClientifyDealsSilverF0",
						"selectClientifyDealsSilverF0 derive(fecha_inscripcion = toTimestamp(fecha_inscripcion),",
						"          date_closed = toTimestamp(date_closed),",
						"          lost_reason_value = '',",
						"          tiempo_de_maduracion = toDouble(minus(toTimestamp(fecha_inscripcion),created)/(1000*60*60*24)),",
						"          new_enrollent = iif(isNull(fecha_inscripcion), 0, 1),",
						"          lead_neto = iif(or(stage_value=='Duplicado',regexMatch(contact_email,'metrodoraeducation.com')), 0, 1),",
						"          status_final = toString(iif(or(status_desc=='Lost',status_desc=='Expired'),'Perdida',toString(iif(stage_value=='Traslado a ERP','Ganada',toString(iif(and(and(stage_value=='Seguimiento Interesado',or(status_desc=='Won',status_desc=='Open')),!isNull(fecha_inscripcion)),'Pago Reserva',toString(iif(and(and(stage_value=='Seguimiento Interesado',or(status_desc=='Won',status_desc=='Open')),isNull(fecha_inscripcion)),'Interesado',toString(iif(and(or(or(stage_value=='Seguimiento Primer Contacto',stage_value=='No contesta'),stage_value=='Seguimiento Valorando'),or(status_desc=='Won',status_desc=='Open')),'Seguimiento',toString(iif(and(stage_value=='Sin Gestionar',or(status_desc=='Won',status_desc=='Open')),'Sin asignar')))))))))))),",
						"          created_date = toDate(created),",
						"          byratings_rating = iifNull(byratings_rating,''),",
						"          sede = iifNull(sede,''),",
						"          modalidad = iifNull(modalidad,''),",
						"     partitionBy('hash', 1)) ~> derivedColumnClientifyDealsSilverF0",
						"selectFinal alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"selectVentasGoldF0 filter(sourcesystem=='Clientify',",
						"     partitionBy('hash', 1)) ~> filterVentasGoldF0",
						"MapDriftedVentasGoldF0 select(mapColumn(",
						"          id,",
						"          processdate,",
						"          sourcesystem",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectVentasGoldF0",
						"filterVentasGoldF0 aggregate(maxprocessdate = iifNull(max(processdate),toTimestamp('1900-01-01','yyyy-MM-dd')),",
						"     partitionBy('hash', 1)) ~> aggregateMaxprocessdate",
						"sort1, aggregateMaxprocessdate join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> join1",
						"join1 filter(processdate>maxprocessdate,",
						"     partitionBy('hash', 1)) ~> filterFinal",
						"filterFinal select(mapColumn(",
						"          amount,",
						"          created,",
						"          id,",
						"          name,",
						"          filepath,",
						"          descuento,",
						"          descuento_matricula,",
						"          fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          status_desc,",
						"          byratings_rating,",
						"          sede,",
						"          modalidad,",
						"          lost_reason_value,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinal",
						"derivedColumnClientifyDealsSilverF0 sort(desc(processdate, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"sourceVentasGoldF0 derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDriftedVentasGoldF0",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkVentasGoldF0"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_OdooLeadGoldF0')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceOdooLeadSilverF0"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceVentasGoldF0"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkVentasGoldF0"
						}
					],
					"transformations": [
						{
							"name": "MapDriftedOdooLeadSilverF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "selectOdooLeadSilverF0"
						},
						{
							"name": "derivedColumnOdooLeadSilverF0"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "selectVentasGoldF0"
						},
						{
							"name": "filterVentasGoldF0"
						},
						{
							"name": "aggregateMaxprocessdate"
						},
						{
							"name": "sort1"
						},
						{
							"name": "join1"
						},
						{
							"name": "filterFinal"
						},
						{
							"name": "selectFinal"
						},
						{
							"name": "MapDriftedVentasGoldF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/odoolead') ~> sourceOdooLeadSilverF0",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceVentasGoldF0",
						"sourceOdooLeadSilverF0 derive(campaign_id = toBoolean(byName('campaign_id')),",
						"          city = toString(byName('city')),",
						"          company_id = toString(byName('company_id')),",
						"          contact_name = toString(byName('contact_name')),",
						"          country_id = toString(byName('country_id')),",
						"          create_date = toTimestamp(byName('create_date')),",
						"          date_action_last = toTimestamp(byName('date_action_last')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          date_conversion = toTimestamp(byName('date_conversion')),",
						"          date_last_stage_update = toTimestamp(byName('date_last_stage_update')),",
						"          email_cc = toBoolean(byName('email_cc')),",
						"          email_from = toString(byName('email_from')),",
						"          id = toString(byName('id')),",
						"          lost_reason_id = toString(byName('lost_reason_id')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          medium_id = toBoolean(byName('medium_id')),",
						"          mobile = toString(byName('mobile')),",
						"          name = toString(byName('name')),",
						"          partner_name = toBoolean(byName('partner_name')),",
						"          phone = toLong(byName('phone')),",
						"          planned_revenue = toDouble(byName('planned_revenue')),",
						"          probability = toDouble(byName('probability')),",
						"          sale_amount_total = toDouble(byName('sale_amount_total')),",
						"          source_id = toBoolean(byName('source_id')),",
						"          stage_id = toString(byName('stage_id')),",
						"          state_id = toString(byName('state_id')),",
						"          street = toString(byName('street')),",
						"          street2 = toBoolean(byName('street2')),",
						"          title = toBoolean(byName('title')),",
						"          user_id = toString(byName('user_id')),",
						"          write_date = toTimestamp(byName('write_date')),",
						"          x_codcurso = toString(byName('x_codcurso')),",
						"          x_codmodalidad = toString(byName('x_codmodalidad')),",
						"          x_curso = toBoolean(byName('x_curso')),",
						"          x_curso_id = toString(byName('x_curso_id')),",
						"          x_ga_campaign = toString(byName('x_ga_campaign')),",
						"          x_ga_medium = toString(byName('x_ga_medium')),",
						"          x_ga_source = toString(byName('x_ga_source')),",
						"          x_ga_utma = toString(byName('x_ga_utma')),",
						"          x_modalidad_id = toString(byName('x_modalidad_id')),",
						"          x_sede_id = toString(byName('x_sede_id')),",
						"          x_studio_field_FM3fX = toBoolean(byName('x_studio_field_FM3fX')),",
						"          zip = toString(byName('zip')),",
						"          filepath = toString(byName('filepath')),",
						"          country_value = toString(byName('country_value')),",
						"          state_value = toString(byName('state_value')),",
						"          user_value = toString(byName('user_value')),",
						"          x_curso_value = toString(byName('x_curso_value')),",
						"          x_modalidad_value = toString(byName('x_modalidad_value')),",
						"          x_sede_value = toString(byName('x_sede_value')),",
						"          company_value = toString(byName('company_value')),",
						"          stage_value = toString(byName('stage_value')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"     partitionBy('hash', 1)) ~> MapDriftedOdooLeadSilverF0",
						"MapDriftedOdooLeadSilverF0 select(mapColumn(",
						"          created = create_date,",
						"          fecha_inscripcion = date_conversion,",
						"          id,",
						"          amount = sale_amount_total,",
						"          processdate,",
						"          sourcesystem,",
						"          filepath,",
						"          name,",
						"          modified = write_date,",
						"          source = x_ga_source,",
						"          date_closed,",
						"          owner_name = user_value,",
						"          estudio = x_curso_value,",
						"          contact_email = email_from,",
						"          contact_phone = phone,",
						"          stage_value,",
						"          lost_reason_value,",
						"          sede = x_sede_value,",
						"          modalidad = x_modalidad_value",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOdooLeadSilverF0",
						"selectOdooLeadSilverF0 derive(descuento = toDouble('0'),",
						"          descuento_matricula = toDouble('0'),",
						"          centro = 'ISEP',",
						"          status_desc = '',",
						"          tiempo_de_maduracion = toDouble(minus(date_closed,created)/(1000*60*60*24)),",
						"          new_enrollent = iif(and(stage_value=='Won',!isNull(date_closed)), 1, 0),",
						"          lead_neto = iif(stage_value=='Duplicado', 0, 1),",
						"          status_final = toString(iif(or(!isNull(lost_reason_value),lost_reason_value!=''),'Perdida',toString(iif(stage_value=='Won','Ganada',toString(iif(and(and(or(stage_value=='Negociación',stage_value=='Proposition'),or(isNull(lost_reason_value),lost_reason_value=='')),!isNull(date_closed)),'Pago Reserva',toString(iif(and(and(or(stage_value=='Negociación',stage_value=='Proposition'),or(isNull(lost_reason_value),lost_reason_value=='')),isNull(date_closed)),'Interesado',toString(iif(or(stage_value=='Sin Contacto',stage_value=='Qualified'),'Seguimiento',toString(iif(or(stage_value=='New',stage_value=='Duplicado'),'Sin asignar')))))))))))),",
						"          created_date = toDate(created),",
						"          byratings_rating = '',",
						"          sede = iifNull(sede,'',sede),",
						"          modalidad = iifNull(modalidad,'',modalidad),",
						"     partitionBy('hash', 1)) ~> derivedColumnOdooLeadSilverF0",
						"selectFinal alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"MapDriftedVentasGoldF0 select(mapColumn(",
						"          id,",
						"          processdate,",
						"          sourcesystem",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectVentasGoldF0",
						"selectVentasGoldF0 filter(sourcesystem=='Odoo',",
						"     partitionBy('hash', 1)) ~> filterVentasGoldF0",
						"filterVentasGoldF0 aggregate(maxprocessdate = iifNull(max(processdate),toTimestamp('1900-01-01','yyyy-MM-dd')),",
						"     partitionBy('hash', 1)) ~> aggregateMaxprocessdate",
						"derivedColumnOdooLeadSilverF0 sort(desc(processdate, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"sort1, aggregateMaxprocessdate join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> join1",
						"join1 filter(processdate>maxprocessdate,",
						"     partitionBy('hash', 1)) ~> filterFinal",
						"filterFinal select(mapColumn(",
						"          created,",
						"          fecha_inscripcion,",
						"          id,",
						"          amount,",
						"          processdate,",
						"          sourcesystem,",
						"          filepath,",
						"          name,",
						"          modified,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          lost_reason_value,",
						"          sede,",
						"          modalidad,",
						"          descuento,",
						"          descuento_matricula,",
						"          centro,",
						"          status_desc,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date,",
						"          byratings_rating",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinal",
						"sourceVentasGoldF0 derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDriftedVentasGoldF0",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkVentasGoldF0"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_OdooLeadGoldF0_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceOdooLeadSilverF0"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceVentasGoldF0"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkVentasGoldF0"
						}
					],
					"transformations": [
						{
							"name": "MapDriftedOdooLeadSilverF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "selectOdooLeadSilverF0"
						},
						{
							"name": "derivedColumnOdooLeadSilverF0"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "selectVentasGoldF0"
						},
						{
							"name": "filterVentasGoldF0"
						},
						{
							"name": "aggregateMaxprocessdate"
						},
						{
							"name": "sort1"
						},
						{
							"name": "join1"
						},
						{
							"name": "filterFinal"
						},
						{
							"name": "selectFinal"
						},
						{
							"name": "MapDriftedVentasGoldF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/odoolead') ~> sourceOdooLeadSilverF0",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales') ~> sourceVentasGoldF0",
						"sourceOdooLeadSilverF0 derive(campaign_id = toBoolean(byName('campaign_id')),",
						"          city = toString(byName('city')),",
						"          company_id = toString(byName('company_id')),",
						"          contact_name = toString(byName('contact_name')),",
						"          country_id = toString(byName('country_id')),",
						"          create_date = toTimestamp(byName('create_date')),",
						"          date_action_last = toTimestamp(byName('date_action_last')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          date_conversion = toTimestamp(byName('date_conversion')),",
						"          date_last_stage_update = toTimestamp(byName('date_last_stage_update')),",
						"          email_cc = toBoolean(byName('email_cc')),",
						"          email_from = toString(byName('email_from')),",
						"          id = toString(byName('id')),",
						"          lost_reason_id = toString(byName('lost_reason_id')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          medium_id = toBoolean(byName('medium_id')),",
						"          mobile = toString(byName('mobile')),",
						"          name = toString(byName('name')),",
						"          partner_name = toBoolean(byName('partner_name')),",
						"          phone = toLong(byName('phone')),",
						"          planned_revenue = toDouble(byName('planned_revenue')),",
						"          probability = toDouble(byName('probability')),",
						"          sale_amount_total = toDouble(byName('sale_amount_total')),",
						"          source_id = toBoolean(byName('source_id')),",
						"          stage_id = toString(byName('stage_id')),",
						"          state_id = toString(byName('state_id')),",
						"          street = toString(byName('street')),",
						"          street2 = toBoolean(byName('street2')),",
						"          title = toBoolean(byName('title')),",
						"          user_id = toString(byName('user_id')),",
						"          write_date = toTimestamp(byName('write_date')),",
						"          x_codcurso = toString(byName('x_codcurso')),",
						"          x_codmodalidad = toString(byName('x_codmodalidad')),",
						"          x_curso = toBoolean(byName('x_curso')),",
						"          x_curso_id = toString(byName('x_curso_id')),",
						"          x_ga_campaign = toString(byName('x_ga_campaign')),",
						"          x_ga_medium = toString(byName('x_ga_medium')),",
						"          x_ga_source = toString(byName('x_ga_source')),",
						"          x_ga_utma = toString(byName('x_ga_utma')),",
						"          x_modalidad_id = toString(byName('x_modalidad_id')),",
						"          x_sede_id = toString(byName('x_sede_id')),",
						"          x_studio_field_FM3fX = toBoolean(byName('x_studio_field_FM3fX')),",
						"          zip = toString(byName('zip')),",
						"          filepath = toString(byName('filepath')),",
						"          country_value = toString(byName('country_value')),",
						"          state_value = toString(byName('state_value')),",
						"          user_value = toString(byName('user_value')),",
						"          x_curso_value = toString(byName('x_curso_value')),",
						"          x_modalidad_value = toString(byName('x_modalidad_value')),",
						"          x_sede_value = toString(byName('x_sede_value')),",
						"          company_value = toString(byName('company_value')),",
						"          stage_value = toString(byName('stage_value')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"     partitionBy('hash', 1)) ~> MapDriftedOdooLeadSilverF0",
						"MapDriftedOdooLeadSilverF0 select(mapColumn(",
						"          created = create_date,",
						"          fecha_inscripcion = date_conversion,",
						"          id,",
						"          amount = sale_amount_total,",
						"          processdate,",
						"          sourcesystem,",
						"          filepath,",
						"          name,",
						"          modified = write_date,",
						"          source = x_ga_source,",
						"          date_closed,",
						"          owner_name = user_value,",
						"          estudio = x_curso_value,",
						"          contact_email = email_from,",
						"          contact_phone = phone,",
						"          stage_value,",
						"          lost_reason_value,",
						"          sede = x_sede_value,",
						"          modalidad = x_modalidad_value",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOdooLeadSilverF0",
						"selectOdooLeadSilverF0 derive(descuento = toDouble('0'),",
						"          descuento_matricula = toDouble('0'),",
						"          centro = 'ISEP',",
						"          status_desc = '',",
						"          tiempo_de_maduracion = toDouble(minus(date_closed,created)/(1000*60*60*24)),",
						"          new_enrollent = iif(and(stage_value=='Won',!isNull(date_closed)), 1, 0),",
						"          lead_neto = iif(or(stage_value=='Duplicado',regexMatch(contact_email,'metrodoraeducation.com')), 0, 1),",
						"          status_final = toString(iif(or(!isNull(lost_reason_value),lost_reason_value!=''),'Perdida',toString(iif(stage_value=='Won','Ganada',toString(iif(and(and(or(stage_value=='Negociación',stage_value=='Proposition'),or(isNull(lost_reason_value),lost_reason_value=='')),!isNull(date_closed)),'Pago Reserva',toString(iif(and(and(or(stage_value=='Negociación',stage_value=='Proposition'),or(isNull(lost_reason_value),lost_reason_value=='')),isNull(date_closed)),'Interesado',toString(iif(or(stage_value=='Sin Contacto',stage_value=='Qualified'),'Seguimiento',toString(iif(or(stage_value=='New',stage_value=='Duplicado'),'Sin asignar')))))))))))),",
						"          created_date = toDate(created),",
						"          byratings_rating = '',",
						"          sede = iifNull(sede,'',sede),",
						"          modalidad = iifNull(modalidad,'',modalidad),",
						"     partitionBy('hash', 1)) ~> derivedColumnOdooLeadSilverF0",
						"selectFinal alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"MapDriftedVentasGoldF0 select(mapColumn(",
						"          id,",
						"          processdate,",
						"          sourcesystem",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectVentasGoldF0",
						"selectVentasGoldF0 filter(sourcesystem=='Odoo',",
						"     partitionBy('hash', 1)) ~> filterVentasGoldF0",
						"filterVentasGoldF0 aggregate(maxprocessdate = iifNull(max(processdate),toTimestamp('1900-01-01','yyyy-MM-dd')),",
						"     partitionBy('hash', 1)) ~> aggregateMaxprocessdate",
						"derivedColumnOdooLeadSilverF0 sort(desc(processdate, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"sort1, aggregateMaxprocessdate join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> join1",
						"join1 filter(processdate>maxprocessdate,",
						"     partitionBy('hash', 1)) ~> filterFinal",
						"filterFinal select(mapColumn(",
						"          created,",
						"          fecha_inscripcion,",
						"          id,",
						"          amount,",
						"          processdate,",
						"          sourcesystem,",
						"          filepath,",
						"          name,",
						"          modified,",
						"          source,",
						"          date_closed,",
						"          owner_name,",
						"          estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value,",
						"          lost_reason_value,",
						"          sede,",
						"          modalidad,",
						"          descuento,",
						"          descuento_matricula,",
						"          centro,",
						"          status_desc,",
						"          tiempo_de_maduracion,",
						"          new_enrollent,",
						"          lead_neto,",
						"          status_final,",
						"          created_date,",
						"          byratings_rating",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinal",
						"sourceVentasGoldF0 derive(amount = toDouble(byName('amount')),",
						"          created = toTimestamp(byName('created')),",
						"          id = toString(byName('id')),",
						"          name = toString(byName('name')),",
						"          filepath = toString(byName('filepath')),",
						"          descuento = toDouble(byName('descuento')),",
						"          descuento_matricula = toDouble(byName('descuento_matricula')),",
						"          fecha_inscripcion = toTimestamp(byName('fecha_inscripcion')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          modified = toTimestamp(byName('modified')),",
						"          centro = toString(byName('centro')),",
						"          source = toString(byName('source')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          owner_name = toString(byName('owner_name')),",
						"          estudio = toString(byName('estudio')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          stage_value = toString(byName('stage_value')),",
						"          status_desc = toString(byName('status_desc')),",
						"          byratings_rating = toString(byName('byratings_rating')),",
						"          sede = toString(byName('sede')),",
						"          modalidad = toString(byName('modalidad')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          tiempo_de_maduracion = toDouble(byName('tiempo_de_maduracion')),",
						"          new_enrollent = toInteger(byName('new_enrollent')),",
						"          lead_neto = toInteger(byName('lead_neto')),",
						"          status_final = toString(byName('status_final')),",
						"          created_date = toDate(byName('created_date')),",
						"     partitionBy('hash', 1)) ~> MapDriftedVentasGoldF0",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkVentasGoldF0"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SalesGoldF0_Full')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceClientifyDealsSilverF0"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceOdooLeadSilverF0"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkVentasGoldF0"
						}
					],
					"transformations": [
						{
							"name": "MapDriftedClientifyDealsSilverF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "selectOdooLeadSilverF0"
						},
						{
							"name": "selectClientifyDealsSilverF0"
						},
						{
							"name": "derivedColumnOdooLeadSilverF0"
						},
						{
							"name": "union1"
						},
						{
							"name": "derivedColumnClientifyDealsSilverF0"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "MapDriftedOdooLeadSilverF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/clientifydeals') ~> sourceClientifyDealsSilverF0",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/odoolead') ~> sourceOdooLeadSilverF0",
						"sourceClientifyDealsSilverF0 derive(actual_closed_date = toDate(byName('actual_closed_date')),",
						"          amount = toDouble(byName('amount')),",
						"          amount_user = toString(byName('amount_user')),",
						"          company = toString(byName('company')),",
						"          contact = toString(byName('contact')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_medium = toString(byName('contact_medium')),",
						"          contact_name = toString(byName('contact_name')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          contact_source = toString(byName('contact_source')),",
						"          created = toTimestamp(byName('created')),",
						"          currency = toString(byName('currency')),",
						"          expected_closed_date = toDate(byName('expected_closed_date')),",
						"          id = toString(byName('id')),",
						"          modified = toTimestamp(byName('modified')),",
						"          name = toString(byName('name')),",
						"          owner_name = toString(byName('owner_name')),",
						"          pipeline = toString(byName('pipeline')),",
						"          pipeline_desc = toString(byName('pipeline_desc')),",
						"          pipeline_stage = toString(byName('pipeline_stage')),",
						"          pipeline_stage_desc = toString(byName('pipeline_stage_desc')),",
						"          probability = toInteger(byName('probability')),",
						"          probability_desc = toString(byName('probability_desc')),",
						"          status = toInteger(byName('status')),",
						"          status_desc = toString(byName('status_desc')),",
						"          url = toString(byName('url')),",
						"          filepath = toString(byName('filepath')),",
						"          custom_fields_ByRatings_Rating = toString(byName('custom_fields_ByRatings_Rating')),",
						"          custom_fields_ByRatings_Score = toString(byName('custom_fields_ByRatings_Score')),",
						"          custom_fields_Estudio_Old = toString(byName('custom_fields_Estudio_Old')),",
						"          custom_fields_ID = toString(byName('custom_fields_ID')),",
						"          custom_fields_Modalidad_Old = toString(byName('custom_fields_Modalidad_Old')),",
						"          custom_fields_Sede_Old = toString(byName('custom_fields_Sede_Old')),",
						"          custom_fields_anio_academico = toString(byName('custom_fields_anio_academico')),",
						"          custom_fields_campaign_id = toString(byName('custom_fields_campaign_id')),",
						"          custom_fields_centro = toString(byName('custom_fields_centro')),",
						"          custom_fields_ciudad = toString(byName('custom_fields_ciudad')),",
						"          custom_fields_cp = toString(byName('custom_fields_cp')),",
						"          custom_fields_curso_anio = toString(byName('custom_fields_curso_anio')),",
						"          custom_fields_descuento = toDouble(byName('custom_fields_descuento')),",
						"          custom_fields_descuento_matricula = toDouble(byName('custom_fields_descuento_matricula')),",
						"          custom_fields_estudio = toString(byName('custom_fields_estudio')),",
						"          custom_fields_fecha_inscripcion = toDate(byName('custom_fields_fecha_inscripcion')),",
						"          custom_fields_gclid = toString(byName('custom_fields_gclid')),",
						"          custom_fields_gdpr = toString(byName('custom_fields_gdpr')),",
						"          custom_fields_google_id = toString(byName('custom_fields_google_id')),",
						"          custom_fields_linea_negocio = toString(byName('custom_fields_linea_negocio')),",
						"          custom_fields_matricula = toString(byName('custom_fields_matricula')),",
						"          custom_fields_mensualidad = toString(byName('custom_fields_mensualidad')),",
						"          custom_fields_modalidad = toString(byName('custom_fields_modalidad')),",
						"          custom_fields_pais = toString(byName('custom_fields_pais')),",
						"          custom_fields_ref = toString(byName('custom_fields_ref')),",
						"          custom_fields_sede = toString(byName('custom_fields_sede')),",
						"          custom_fields_tipo_conversion = toString(byName('custom_fields_tipo_conversion')),",
						"          custom_fields_turno = toString(byName('custom_fields_turno')),",
						"          custom_fields_ua = toString(byName('custom_fields_ua')),",
						"          custom_fields_url = toString(byName('custom_fields_url')),",
						"          custom_fields_utm_ad_id = toString(byName('custom_fields_utm_ad_id')),",
						"          custom_fields_utm_adset_id = toString(byName('custom_fields_utm_adset_id')),",
						"          custom_fields_utm_campaign = toString(byName('custom_fields_utm_campaign')),",
						"          custom_fields_utm_campaign_id = toString(byName('custom_fields_utm_campaign_id')),",
						"          custom_fields_utm_campaign_name = toString(byName('custom_fields_utm_campaign_name')),",
						"          custom_fields_utm_channel = toString(byName('custom_fields_utm_channel')),",
						"          custom_fields_utm_device = toString(byName('custom_fields_utm_device')),",
						"          custom_fields_utm_estrategia = toString(byName('custom_fields_utm_estrategia')),",
						"          custom_fields_utm_medium = toString(byName('custom_fields_utm_medium')),",
						"          custom_fields_utm_network = toString(byName('custom_fields_utm_network')),",
						"          custom_fields_utm_placement = toString(byName('custom_fields_utm_placement')),",
						"          custom_fields_utm_site_source_name = toString(byName('custom_fields_utm_site_source_name')),",
						"          custom_fields_utm_source = toString(byName('custom_fields_utm_source')),",
						"          custom_fields_utm_term = toString(byName('custom_fields_utm_term')),",
						"          custom_fields_utm_type = toString(byName('custom_fields_utm_type')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          created_tzh = toString(byName('created_tzh')),",
						"          modified_tzh = toString(byName('modified_tzh')),",
						"     partitionBy('hash', 1)) ~> MapDriftedClientifyDealsSilverF0",
						"MapDriftedOdooLeadSilverF0 select(mapColumn(",
						"          created = create_date,",
						"          fecha_inscripcion = date_conversion,",
						"          id,",
						"          amount = sale_amount_total,",
						"          processdate,",
						"          sourcesystem,",
						"          filepath,",
						"          name,",
						"          modified = write_date,",
						"          source = x_ga_source,",
						"          date_closed,",
						"          owner_name = user_value,",
						"          estudio = x_curso_value,",
						"          contact_email = email_from,",
						"          contact_phone = phone,",
						"          stage_value,",
						"          lost_reason_value,",
						"          sede = x_sede_value,",
						"          modalidad = x_modalidad_value",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOdooLeadSilverF0",
						"MapDriftedClientifyDealsSilverF0 select(mapColumn(",
						"          amount,",
						"          created,",
						"          id,",
						"          name,",
						"          filepath,",
						"          descuento = custom_fields_descuento,",
						"          descuento_matricula = custom_fields_descuento_matricula,",
						"          fecha_inscripcion = custom_fields_fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro = custom_fields_centro,",
						"          source = custom_fields_utm_source,",
						"          date_closed = actual_closed_date,",
						"          owner_name,",
						"          estudio = custom_fields_estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value = pipeline_stage_desc,",
						"          status_desc,",
						"          byratings_rating = custom_fields_ByRatings_Rating,",
						"          sede = custom_fields_sede,",
						"          modalidad = custom_fields_modalidad",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectClientifyDealsSilverF0",
						"selectOdooLeadSilverF0 derive(descuento = toDouble('0'),",
						"          descuento_matricula = toDouble('0'),",
						"          centro = 'ISEP',",
						"          status_desc = '',",
						"          tiempo_de_maduracion = toDouble(minus(date_closed,created)/(1000*60*60*24)),",
						"          new_enrollent = iif(and(stage_value=='Won',!isNull(date_closed)), 1, 0),",
						"          lead_neto = iif(stage_value=='Duplicado', 0, 1),",
						"          status_final = toString(iif(or(!isNull(lost_reason_value),lost_reason_value!=''),'Perdida',toString(iif(stage_value=='Won','Ganada',toString(iif(and(and(or(stage_value=='Negociación',stage_value=='Proposition'),or(isNull(lost_reason_value),lost_reason_value=='')),!isNull(date_closed)),'Pago Reserva',toString(iif(and(and(or(stage_value=='Negociación',stage_value=='Proposition'),or(isNull(lost_reason_value),lost_reason_value=='')),isNull(date_closed)),'Interesado',toString(iif(or(stage_value=='Sin Contacto',stage_value=='Qualified'),'Seguimiento',toString(iif(or(stage_value=='New',stage_value=='Duplicado'),'Sin asignar')))))))))))),",
						"          created_date = toDate(created),",
						"          byratings_rating = '',",
						"          sede = iifNull(sede,'',sede),",
						"          modalidad = iifNull(modalidad,'',modalidad),",
						"     partitionBy('hash', 1)) ~> derivedColumnOdooLeadSilverF0",
						"derivedColumnClientifyDealsSilverF0, derivedColumnOdooLeadSilverF0 union(byName: true,",
						"     partitionBy('hash', 1))~> union1",
						"selectClientifyDealsSilverF0 derive(fecha_inscripcion = toTimestamp(fecha_inscripcion),",
						"          date_closed = toTimestamp(date_closed),",
						"          lost_reason_value = '',",
						"          tiempo_de_maduracion = toDouble(minus(toTimestamp(fecha_inscripcion),created)/(1000*60*60*24)),",
						"          new_enrollent = iif(isNull(fecha_inscripcion), 0, 1),",
						"          lead_neto = iif(stage_value=='Duplicado', 0, 1),",
						"          status_final = toString(iif(or(status_desc=='Lost',status_desc=='Expired'),'Perdida',toString(iif(stage_value=='Traslado a ERP','Ganada',toString(iif(and(and(stage_value=='Seguimiento Interesado',or(status_desc=='Won',status_desc=='Open')),!isNull(fecha_inscripcion)),'Pago Reserva',toString(iif(and(and(stage_value=='Seguimiento Interesado',or(status_desc=='Won',status_desc=='Open')),isNull(fecha_inscripcion)),'Interesado',toString(iif(and(or(or(stage_value=='Seguimiento Primer Contacto',stage_value=='No contesta'),stage_value=='Seguimiento Valorando'),or(status_desc=='Won',status_desc=='Open')),'Seguimiento',toString(iif(and(stage_value=='Sin Gestionar',or(status_desc=='Won',status_desc=='Open')),'Sin asignar')))))))))))),",
						"          created_date = toDate(created),",
						"          byratings_rating = iifNull(byratings_rating,''),",
						"          sede = iifNull(sede,'',sede),",
						"          modalidad = iifNull(modalidad,'',modalidad),",
						"          centro = 'CESIF',",
						"     partitionBy('hash', 1)) ~> derivedColumnClientifyDealsSilverF0",
						"union1 alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"sourceOdooLeadSilverF0 derive(campaign_id = toBoolean(byName('campaign_id')),",
						"          city = toString(byName('city')),",
						"          company_id = toString(byName('company_id')),",
						"          contact_name = toString(byName('contact_name')),",
						"          country_id = toString(byName('country_id')),",
						"          create_date = toTimestamp(byName('create_date')),",
						"          date_action_last = toTimestamp(byName('date_action_last')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          date_conversion = toTimestamp(byName('date_conversion')),",
						"          date_last_stage_update = toTimestamp(byName('date_last_stage_update')),",
						"          email_cc = toBoolean(byName('email_cc')),",
						"          email_from = toString(byName('email_from')),",
						"          id = toString(byName('id')),",
						"          lost_reason_id = toString(byName('lost_reason_id')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          medium_id = toBoolean(byName('medium_id')),",
						"          mobile = toString(byName('mobile')),",
						"          name = toString(byName('name')),",
						"          partner_name = toString(byName('partner_name')),",
						"          phone = toString(byName('phone')),",
						"          planned_revenue = toDouble(byName('planned_revenue')),",
						"          probability = toDouble(byName('probability')),",
						"          sale_amount_total = toDouble(byName('sale_amount_total')),",
						"          source_id = toBoolean(byName('source_id')),",
						"          stage_id = toString(byName('stage_id')),",
						"          state_id = toString(byName('state_id')),",
						"          street = toString(byName('street')),",
						"          street2 = toBoolean(byName('street2')),",
						"          title = toBoolean(byName('title')),",
						"          user_id = toString(byName('user_id')),",
						"          write_date = toTimestamp(byName('write_date')),",
						"          x_codcurso = toString(byName('x_codcurso')),",
						"          x_codmodalidad = toString(byName('x_codmodalidad')),",
						"          x_curso = toString(byName('x_curso')),",
						"          x_curso_id = toString(byName('x_curso_id')),",
						"          x_ga_campaign = toString(byName('x_ga_campaign')),",
						"          x_ga_medium = toString(byName('x_ga_medium')),",
						"          x_ga_source = toString(byName('x_ga_source')),",
						"          x_ga_utma = toString(byName('x_ga_utma')),",
						"          x_modalidad_id = toString(byName('x_modalidad_id')),",
						"          x_sede_id = toString(byName('x_sede_id')),",
						"          x_studio_field_FM3fX = toBoolean(byName('x_studio_field_FM3fX')),",
						"          zip = toString(byName('zip')),",
						"          filepath = toString(byName('filepath')),",
						"          country_value = toString(byName('country_value')),",
						"          state_value = toString(byName('state_value')),",
						"          user_value = toString(byName('user_value')),",
						"          x_curso_value = toString(byName('x_curso_value')),",
						"          x_modalidad_value = toString(byName('x_modalidad_value')),",
						"          x_sede_value = toString(byName('x_sede_value')),",
						"          company_value = toString(byName('company_value')),",
						"          stage_value = toString(byName('stage_value')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"     partitionBy('hash', 1)) ~> MapDriftedOdooLeadSilverF0",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkVentasGoldF0"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SalesGoldF0_Full_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "GoldF0"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceClientifyDealsSilverF0"
						},
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sourceOdooLeadSilverF0"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_adsl",
								"type": "LinkedServiceReference"
							},
							"name": "sinkVentasGoldF0"
						}
					],
					"transformations": [
						{
							"name": "MapDriftedClientifyDealsSilverF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						},
						{
							"name": "selectOdooLeadSilverF0"
						},
						{
							"name": "selectClientifyDealsSilverF0"
						},
						{
							"name": "derivedColumnOdooLeadSilverF0"
						},
						{
							"name": "union1"
						},
						{
							"name": "derivedColumnClientifyDealsSilverF0"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "MapDriftedOdooLeadSilverF0",
							"description": "Crea una asignación explícita para cada columna de desfase."
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/clientifydeals') ~> sourceClientifyDealsSilverF0",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'lakehousef0/odoolead') ~> sourceOdooLeadSilverF0",
						"sourceClientifyDealsSilverF0 derive(actual_closed_date = toDate(byName('actual_closed_date')),",
						"          amount = toDouble(byName('amount')),",
						"          amount_user = toString(byName('amount_user')),",
						"          company = toString(byName('company')),",
						"          contact = toString(byName('contact')),",
						"          contact_email = toString(byName('contact_email')),",
						"          contact_medium = toString(byName('contact_medium')),",
						"          contact_name = toString(byName('contact_name')),",
						"          contact_phone = toString(byName('contact_phone')),",
						"          contact_source = toString(byName('contact_source')),",
						"          created = toTimestamp(byName('created')),",
						"          currency = toString(byName('currency')),",
						"          expected_closed_date = toDate(byName('expected_closed_date')),",
						"          id = toString(byName('id')),",
						"          modified = toTimestamp(byName('modified')),",
						"          name = toString(byName('name')),",
						"          owner_name = toString(byName('owner_name')),",
						"          pipeline = toString(byName('pipeline')),",
						"          pipeline_desc = toString(byName('pipeline_desc')),",
						"          pipeline_stage = toString(byName('pipeline_stage')),",
						"          pipeline_stage_desc = toString(byName('pipeline_stage_desc')),",
						"          probability = toInteger(byName('probability')),",
						"          probability_desc = toString(byName('probability_desc')),",
						"          status = toInteger(byName('status')),",
						"          status_desc = toString(byName('status_desc')),",
						"          url = toString(byName('url')),",
						"          filepath = toString(byName('filepath')),",
						"          custom_fields_ByRatings_Rating = toString(byName('custom_fields_ByRatings_Rating')),",
						"          custom_fields_ByRatings_Score = toString(byName('custom_fields_ByRatings_Score')),",
						"          custom_fields_Estudio_Old = toString(byName('custom_fields_Estudio_Old')),",
						"          custom_fields_ID = toString(byName('custom_fields_ID')),",
						"          custom_fields_Modalidad_Old = toString(byName('custom_fields_Modalidad_Old')),",
						"          custom_fields_Sede_Old = toString(byName('custom_fields_Sede_Old')),",
						"          custom_fields_anio_academico = toString(byName('custom_fields_anio_academico')),",
						"          custom_fields_campaign_id = toString(byName('custom_fields_campaign_id')),",
						"          custom_fields_centro = toString(byName('custom_fields_centro')),",
						"          custom_fields_ciudad = toString(byName('custom_fields_ciudad')),",
						"          custom_fields_cp = toString(byName('custom_fields_cp')),",
						"          custom_fields_curso_anio = toString(byName('custom_fields_curso_anio')),",
						"          custom_fields_descuento = toDouble(byName('custom_fields_descuento')),",
						"          custom_fields_descuento_matricula = toDouble(byName('custom_fields_descuento_matricula')),",
						"          custom_fields_estudio = toString(byName('custom_fields_estudio')),",
						"          custom_fields_fecha_inscripcion = toDate(byName('custom_fields_fecha_inscripcion')),",
						"          custom_fields_gclid = toString(byName('custom_fields_gclid')),",
						"          custom_fields_gdpr = toString(byName('custom_fields_gdpr')),",
						"          custom_fields_google_id = toString(byName('custom_fields_google_id')),",
						"          custom_fields_linea_negocio = toString(byName('custom_fields_linea_negocio')),",
						"          custom_fields_matricula = toString(byName('custom_fields_matricula')),",
						"          custom_fields_mensualidad = toString(byName('custom_fields_mensualidad')),",
						"          custom_fields_modalidad = toString(byName('custom_fields_modalidad')),",
						"          custom_fields_pais = toString(byName('custom_fields_pais')),",
						"          custom_fields_ref = toString(byName('custom_fields_ref')),",
						"          custom_fields_sede = toString(byName('custom_fields_sede')),",
						"          custom_fields_tipo_conversion = toString(byName('custom_fields_tipo_conversion')),",
						"          custom_fields_turno = toString(byName('custom_fields_turno')),",
						"          custom_fields_ua = toString(byName('custom_fields_ua')),",
						"          custom_fields_url = toString(byName('custom_fields_url')),",
						"          custom_fields_utm_ad_id = toString(byName('custom_fields_utm_ad_id')),",
						"          custom_fields_utm_adset_id = toString(byName('custom_fields_utm_adset_id')),",
						"          custom_fields_utm_campaign = toString(byName('custom_fields_utm_campaign')),",
						"          custom_fields_utm_campaign_id = toString(byName('custom_fields_utm_campaign_id')),",
						"          custom_fields_utm_campaign_name = toString(byName('custom_fields_utm_campaign_name')),",
						"          custom_fields_utm_channel = toString(byName('custom_fields_utm_channel')),",
						"          custom_fields_utm_device = toString(byName('custom_fields_utm_device')),",
						"          custom_fields_utm_estrategia = toString(byName('custom_fields_utm_estrategia')),",
						"          custom_fields_utm_medium = toString(byName('custom_fields_utm_medium')),",
						"          custom_fields_utm_network = toString(byName('custom_fields_utm_network')),",
						"          custom_fields_utm_placement = toString(byName('custom_fields_utm_placement')),",
						"          custom_fields_utm_site_source_name = toString(byName('custom_fields_utm_site_source_name')),",
						"          custom_fields_utm_source = toString(byName('custom_fields_utm_source')),",
						"          custom_fields_utm_term = toString(byName('custom_fields_utm_term')),",
						"          custom_fields_utm_type = toString(byName('custom_fields_utm_type')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"          created_tzh = toString(byName('created_tzh')),",
						"          modified_tzh = toString(byName('modified_tzh')),",
						"     partitionBy('hash', 1)) ~> MapDriftedClientifyDealsSilverF0",
						"MapDriftedOdooLeadSilverF0 select(mapColumn(",
						"          created = create_date,",
						"          fecha_inscripcion = date_conversion,",
						"          id,",
						"          amount = sale_amount_total,",
						"          processdate,",
						"          sourcesystem,",
						"          filepath,",
						"          name,",
						"          modified = write_date,",
						"          source = x_ga_source,",
						"          date_closed,",
						"          owner_name = user_value,",
						"          estudio = x_curso_value,",
						"          contact_email = email_from,",
						"          contact_phone = phone,",
						"          stage_value,",
						"          lost_reason_value,",
						"          sede = x_sede_value,",
						"          modalidad = x_modalidad_value",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOdooLeadSilverF0",
						"MapDriftedClientifyDealsSilverF0 select(mapColumn(",
						"          amount,",
						"          created,",
						"          id,",
						"          name,",
						"          filepath,",
						"          descuento = custom_fields_descuento,",
						"          descuento_matricula = custom_fields_descuento_matricula,",
						"          fecha_inscripcion = custom_fields_fecha_inscripcion,",
						"          processdate,",
						"          sourcesystem,",
						"          modified,",
						"          centro = custom_fields_centro,",
						"          source = custom_fields_utm_source,",
						"          date_closed = actual_closed_date,",
						"          owner_name,",
						"          estudio = custom_fields_estudio,",
						"          contact_email,",
						"          contact_phone,",
						"          stage_value = pipeline_stage_desc,",
						"          status_desc,",
						"          byratings_rating = custom_fields_ByRatings_Rating,",
						"          sede = custom_fields_sede,",
						"          modalidad = custom_fields_modalidad",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectClientifyDealsSilverF0",
						"selectOdooLeadSilverF0 derive(descuento = toDouble('0'),",
						"          descuento_matricula = toDouble('0'),",
						"          centro = 'ISEP',",
						"          status_desc = '',",
						"          tiempo_de_maduracion = toDouble(minus(date_closed,created)/(1000*60*60*24)),",
						"          new_enrollent = iif(and(stage_value=='Won',!isNull(date_closed)), 1, 0),",
						"          lead_neto = iif(or(stage_value=='Duplicado',regexMatch(contact_email,'metrodoraeducation.com')), 0, 1),",
						"          status_final = toString(iif(or(!isNull(lost_reason_value),lost_reason_value!=''),'Perdida',toString(iif(stage_value=='Won','Ganada',toString(iif(and(and(or(stage_value=='Negociación',stage_value=='Proposition'),or(isNull(lost_reason_value),lost_reason_value=='')),!isNull(date_closed)),'Pago Reserva',toString(iif(and(and(or(stage_value=='Negociación',stage_value=='Proposition'),or(isNull(lost_reason_value),lost_reason_value=='')),isNull(date_closed)),'Interesado',toString(iif(or(stage_value=='Sin Contacto',stage_value=='Qualified'),'Seguimiento',toString(iif(or(stage_value=='New',stage_value=='Duplicado'),'Sin asignar')))))))))))),",
						"          created_date = toDate(created),",
						"          byratings_rating = '',",
						"          sede = iifNull(sede,'',sede),",
						"          modalidad = iifNull(modalidad,'',modalidad),",
						"     partitionBy('hash', 1)) ~> derivedColumnOdooLeadSilverF0",
						"derivedColumnClientifyDealsSilverF0, derivedColumnOdooLeadSilverF0 union(byName: true,",
						"     partitionBy('hash', 1))~> union1",
						"selectClientifyDealsSilverF0 derive(fecha_inscripcion = toTimestamp(fecha_inscripcion),",
						"          date_closed = toTimestamp(date_closed),",
						"          lost_reason_value = '',",
						"          tiempo_de_maduracion = toDouble(minus(toTimestamp(fecha_inscripcion),created)/(1000*60*60*24)),",
						"          new_enrollent = iif(isNull(fecha_inscripcion), 0, 1),",
						"          lead_neto = iif(or(stage_value=='Duplicado',regexMatch(contact_email,'metrodoraeducation.com')), 0, 1),",
						"          status_final = toString(iif(or(status_desc=='Lost',status_desc=='Expired'),'Perdida',toString(iif(stage_value=='Traslado a ERP','Ganada',toString(iif(and(and(stage_value=='Seguimiento Interesado',or(status_desc=='Won',status_desc=='Open')),!isNull(fecha_inscripcion)),'Pago Reserva',toString(iif(and(and(stage_value=='Seguimiento Interesado',or(status_desc=='Won',status_desc=='Open')),isNull(fecha_inscripcion)),'Interesado',toString(iif(and(or(or(stage_value=='Seguimiento Primer Contacto',stage_value=='No contesta'),stage_value=='Seguimiento Valorando'),or(status_desc=='Won',status_desc=='Open')),'Seguimiento',toString(iif(and(stage_value=='Sin Gestionar',or(status_desc=='Won',status_desc=='Open')),'Sin asignar')))))))))))),",
						"          created_date = toDate(created),",
						"          byratings_rating = iifNull(byratings_rating,''),",
						"          sede = iifNull(sede,'',sede),",
						"          modalidad = iifNull(modalidad,'',modalidad),",
						"     partitionBy('hash', 1)) ~> derivedColumnClientifyDealsSilverF0",
						"union1 alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"sourceOdooLeadSilverF0 derive(campaign_id = toBoolean(byName('campaign_id')),",
						"          city = toString(byName('city')),",
						"          company_id = toString(byName('company_id')),",
						"          contact_name = toString(byName('contact_name')),",
						"          country_id = toString(byName('country_id')),",
						"          create_date = toTimestamp(byName('create_date')),",
						"          date_action_last = toTimestamp(byName('date_action_last')),",
						"          date_closed = toTimestamp(byName('date_closed')),",
						"          date_conversion = toTimestamp(byName('date_conversion')),",
						"          date_last_stage_update = toTimestamp(byName('date_last_stage_update')),",
						"          email_cc = toBoolean(byName('email_cc')),",
						"          email_from = toString(byName('email_from')),",
						"          id = toString(byName('id')),",
						"          lost_reason_id = toString(byName('lost_reason_id')),",
						"          lost_reason_value = toString(byName('lost_reason_value')),",
						"          medium_id = toBoolean(byName('medium_id')),",
						"          mobile = toString(byName('mobile')),",
						"          name = toString(byName('name')),",
						"          partner_name = toString(byName('partner_name')),",
						"          phone = toString(byName('phone')),",
						"          planned_revenue = toDouble(byName('planned_revenue')),",
						"          probability = toDouble(byName('probability')),",
						"          sale_amount_total = toDouble(byName('sale_amount_total')),",
						"          source_id = toBoolean(byName('source_id')),",
						"          stage_id = toString(byName('stage_id')),",
						"          state_id = toString(byName('state_id')),",
						"          street = toString(byName('street')),",
						"          street2 = toBoolean(byName('street2')),",
						"          title = toBoolean(byName('title')),",
						"          user_id = toString(byName('user_id')),",
						"          write_date = toTimestamp(byName('write_date')),",
						"          x_codcurso = toString(byName('x_codcurso')),",
						"          x_codmodalidad = toString(byName('x_codmodalidad')),",
						"          x_curso = toString(byName('x_curso')),",
						"          x_curso_id = toString(byName('x_curso_id')),",
						"          x_ga_campaign = toString(byName('x_ga_campaign')),",
						"          x_ga_medium = toString(byName('x_ga_medium')),",
						"          x_ga_source = toString(byName('x_ga_source')),",
						"          x_ga_utma = toString(byName('x_ga_utma')),",
						"          x_modalidad_id = toString(byName('x_modalidad_id')),",
						"          x_sede_id = toString(byName('x_sede_id')),",
						"          x_studio_field_FM3fX = toBoolean(byName('x_studio_field_FM3fX')),",
						"          zip = toString(byName('zip')),",
						"          filepath = toString(byName('filepath')),",
						"          country_value = toString(byName('country_value')),",
						"          state_value = toString(byName('state_value')),",
						"          user_value = toString(byName('user_value')),",
						"          x_curso_value = toString(byName('x_curso_value')),",
						"          x_modalidad_value = toString(byName('x_modalidad_value')),",
						"          x_sede_value = toString(byName('x_sede_value')),",
						"          company_value = toString(byName('company_value')),",
						"          stage_value = toString(byName('stage_value')),",
						"          processdate = toTimestamp(byName('processdate')),",
						"          sourcesystem = toString(byName('sourcesystem')),",
						"     partitionBy('hash', 1)) ~> MapDriftedOdooLeadSilverF0",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'lakehousef0/sales',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id','sourcesystem'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkVentasGoldF0"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_AircallCallsBronze')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataAircallToBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetVariableDateToLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:50",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.meta.next_page_link"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Aircall",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/calls?per_page=50&from=',variables('unix'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/aircall/calls/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))\n\n\n\n",
										"type": "Expression"
									},
									"filename": "aircallcalls.json"
								}
							}
						]
					},
					{
						"name": "SetVariableDateToLoad",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "unix",
							"value": {
								"value": "@{div(sub(ticks(addDays(utcnow(),int(concat('-',string(pipeline().parameters.dayToLoad))))), ticks('1970-01-01')),10000000)}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"variables": {
					"unix": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Old"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_AircallCallsBronzeF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataAircallToBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetVariableDateToLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.meta.next_page_link"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Aircall",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/calls?per_page=50&from=',variables('unix'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehousef0/aircall/calls/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))\n\n\n\n",
										"type": "Expression"
									},
									"filename": "aircallcalls.json"
								}
							}
						]
					},
					{
						"name": "SetVariableDateToLoad",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "unix",
							"value": {
								"value": "@{div(sub(ticks(addDays(utcnow(),int(concat('-',string(pipeline().parameters.dayToLoad))))), ticks('1970-01-01')),10000000)}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"variables": {
					"unix": {
						"type": "String"
					}
				},
				"folder": {
					"name": "LakehouseF0/BronzeF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_AircallCallsBronzeF0_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataAircallToBronze",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetVariableDateToLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.meta.next_page_link"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_Aircall",
								"type": "DatasetReference",
								"parameters": {
									"relativeurl": {
										"value": "@concat('v1/calls?per_page=50&from=',variables('unix'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_json",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehousef0/aircall/calls/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))\n\n\n\n",
										"type": "Expression"
									},
									"filename": "aircallcalls.json"
								}
							}
						]
					},
					{
						"name": "SetVariableDateToLoad",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "unix",
							"value": {
								"value": "@{div(sub(ticks('2024-09-01'), ticks('1970-01-01')),10000000)}\t",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"unix": {
						"type": "String"
					}
				},
				"folder": {
					"name": "LakehouseF0/BronzeF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_AircallCallsBronzeSilver_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('startdate'),string(formatDateTime(utcnow(),'yyyy-MM-dd')))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyDataAircallToBronze",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetVariableDateToLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"AbsoluteUrl": "$.meta.next_page_link"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Aircall",
											"type": "DatasetReference",
											"parameters": {
												"relativeurl": {
													"value": "@concat('v1/calls?per_page=50&from=',variables('unix'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/aircall/calls/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))\n\n\n\n",
													"type": "Expression"
												},
												"filename": "aircallcalls.json"
											}
										}
									]
								},
								{
									"name": "SetVariableDateToLoad",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "unix",
										"value": {
											"value": "@{div(sub(ticks(variables('startdate')), ticks('1970-01-01')),10000000)}\t",
											"type": "Expression"
										}
									}
								},
								{
									"name": "NotebookAircallCallsSilver",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "CopyDataAircallToBronze",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Lakehouse/Silver/AircallCallsSilver"
									},
									"linkedServiceName": {
										"referenceName": "ls_AzureDatabricks",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "NotebookAircallMaxDate",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "NotebookAircallCallsSilver",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Lakehouse/Silver/AircallMaxDate"
									},
									"linkedServiceName": {
										"referenceName": "ls_AzureDatabricks",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SetVariableMaxDate",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "NotebookAircallMaxDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "startdate",
										"value": {
											"value": "@activity('NotebookAircallMaxDate').output.runOutput",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"unix": {
						"type": "String"
					},
					"startdate": {
						"type": "String",
						"defaultValue": "2024-09-01"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Old"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_AircallCallsGoldF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlowAircallCallsGoldF0",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_AircallCallsGoldF0",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceAircallCallsSilver": {},
									"sourceCallsGoldF0": {},
									"sinkCallsGoldF0": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/GoldF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Auxiliar_periodificacion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "aux periodificacion gold",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.gold_storage_databricks, 'aux_periodificacion_gold')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "aux periodificacion DWH",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "DELETE FROM auxiliar_periodificacion",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.dwh_storage_databricks, 'auxiliar_periodificacion')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DELETE FROM auxiliar_periodificacion",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "aux periodificacion gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "DELETE FROM public.auxiliar_periodificacion;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_PostgreSql",
								"type": "DatasetReference",
								"parameters": {
									"schema": "public",
									"table": "auxiliar_periodificacion"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"gold_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Gold/"
					},
					"dwh_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/DWH/"
					}
				},
				"folder": {
					"name": "Lakehouse/Gold"
				},
				"annotations": [],
				"lastPublishTime": "2025-04-24T20:17:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_BudgetBronze')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataBudgetBronze",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adsl_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": "master",
									"folder": "Budget",
									"filename": "masterbudget.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/budget/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "masterbudget.parquet"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_BudgetBronzeF0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataBudgetBronzeF0",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_adsl_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": "master",
									"folder": "Budget",
									"filename": "masterbudget.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adsl_parquet",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehousef0/budget/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
										"type": "Expression"
									},
									"filename": "masterbudget.parquet"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "LakehouseF0/BronzeF0"
				},
				"annotations": [],
				"lastPublishTime": "2025-03-22T17:50:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Child_Contacts_38b')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PageCounterParent",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable Users Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@pipeline().parameters.PageCounter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "NextPageTokenParent",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable Users Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NextPageToken",
							"value": {
								"value": "@pipeline().parameters.NextPageToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UntilContacts",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "NextPageTokenParent",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "PageCounterParent",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(\n  or(\n    equals(variables('NextPageToken'), null),\n    equals(trim(variables('NextPageToken')), '')\n  ),\n  greater(\n    div(sub(ticks(utcnow()), ticks(pipeline().parameters.TokenStartTime)), 10000000),\n    3300\n  )\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopydataZohoDeals",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"Authorization": {
													"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
													"type": "Expression"
												},
												"If-Modified-Since": {
													"value": "@pipeline().parameters.IfModifiedSince",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Zoho_API",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@if(\n    or(\n        equals(variables('NextPageToken'), null),\n        equals(variables('NextPageToken'), '')\n    ),\n    concat(\n        'https://www.zohoapis.eu/crm/v7/Contacts?per_page=200&page=',\n        string(variables('PageCounter')),\n        '&fields=Email,Mailing_Zip,Other_Zip,Mailing_Street,Other_State,woztellplatformintegration__WhatsApp_Opt_Out,Other_Country,Sexo,Profesion,First_Name,Phone,Estudios,Mailing_Country,recibir_comunicacion,id,Apellidos_2,Provincia,ID_Classlife,Date_of_Birth,Tipo_de_contacto,Mailing_City,Other_City,Home_Phone1,Other_Street,Mobile,Residencia,Nacionalidad,Secondary_Email,Tipo_de_cliente,DNI,ltima_L_nea_de_negocio,Created_time,Modified_Time'\n    ),\n    concat(\n        'https://www.zohoapis.eu/crm/v7/Contacts?per_page=200&page_token=',\n        variables('NextPageToken'),\n        '&fields=Email,Mailing_Zip,Other_Zip,Mailing_Street,Other_State,woztellplatformintegration__WhatsApp_Opt_Out,Other_Country,Sexo,Profesion,First_Name,Phone,Estudios,Mailing_Country,recibir_comunicacion,id,Apellidos_2,Provincia,ID_Classlife,Date_of_Birth,Tipo_de_contacto,Mailing_City,Other_City,Home_Phone1,Other_Street,Mobile,Residencia,Nacionalidad,Secondary_Email,Tipo_de_cliente,DNI,ltima_L_nea_de_negocio,Created_time,Modified_Time'\n    )\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Contacts/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoContacts_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "GetNextPageTokenDeals",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopydataZohoDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Contacts/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoContacts_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Set NextPageTokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextPageToken",
										"value": {
											"value": "@activity('GetNextPageTokenDeals').output.firstRow.info.next_page_token",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LogtokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set NextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Log_Token",
										"value": {
											"value": "@string(variables('NextPageToken'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PageCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "WebZohoAPI",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://accounts.zoho.eu/oauth/v2/token",
							"body": {
								"value": "@concat('client_id=', pipeline().parameters.client_id, \n        '&client_secret=', pipeline().parameters.client_secret,\n        '&refresh_token=', pipeline().parameters.refresh_token,\n        '&grant_type=refresh_token')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set variable Users Leads",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "WebActivityName",
							"value": {
								"value": "@activity('WebZohoAPI').output.access_token\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@pipeline().parameters.TokenStartTime",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Page Counter and NextpageToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "UntilContacts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "PageCounter",
									"value": {
										"type": "Expression",
										"content": "@variables('PageCounter')"
									}
								},
								{
									"key": "NextPageToken",
									"value": {
										"type": "Expression",
										"content": "@variables('NextPageToken')"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "7"
					},
					"AccessToken": {
						"type": "string"
					},
					"PageCounter": {
						"type": "string"
					},
					"IfModifiedSince": {
						"type": "string"
					},
					"NextPageToken": {
						"type": "string"
					},
					"TokenStartTime": {
						"type": "string"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					},
					"TokenStartTime": {
						"type": "String"
					},
					"AccessToken": {
						"type": "String"
					},
					"NextPageTokenParent": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Child_Deals_38b')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PageCounterParent",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable Users Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@pipeline().parameters.PageCounter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "NextPageTokenParent",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable Users Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NextPageToken",
							"value": {
								"value": "@pipeline().parameters.NextPageToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UntilDeals",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "NextPageTokenParent",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "PageCounterParent",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(\n  or(\n    equals(variables('NextPageToken'), null),\n    equals(trim(variables('NextPageToken')), '')\n  ),\n  greater(\n    div(sub(ticks(utcnow()), ticks(pipeline().parameters.TokenStartTime)), 10000000),\n    3300\n  )\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopydataZohoDeals",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"Authorization": {
													"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
													"type": "Expression"
												},
												"If-Modified-Since": {
													"value": "@pipeline().parameters.IfModifiedSince",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Zoho_API",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@if(\n    or(\n        equals(variables('NextPageToken'), null),\n        equals(variables('NextPageToken'), '')\n    ),\n    concat(\n        'https://www.zohoapis.eu/crm/v7/Deals?per_page=200&page=',\n        string(variables('PageCounter')),\n        '&fields=Motivo_p_rdida_B2C,ID_Producto,Owner,Motivo_p_rdida_B2B,Residencia1,utm_type,utm_medium,utm_campaign_name,br_rating,Deal_Name,Exchange_Rate,Currency,Stage,id,utm_ad_id,ID_Classlife,utm_campaign_id,Importe_pagado,br_score,utm_perfil,C_digo_descuento,L_nea_de_Negocio,utm_source,Descuento,Closing_Date,utm_adset_id,utm_estrategia,tipo_conversion,Amount,Probability,Contact_Name.id,Pipeline,Competencia,utm_term,utm_channel,Tipolog_a_de_cliente,Created_Date,Modified_Time,ID_Lead,Fecha_hora_Pagado_NE,Fecha_hora_Anulaci_n,Nacionalidad1,lead_correlation_id,id_unico,Tipolog_a_del_alumno1,Contact_Name,Created_Time,ID_clientify,Modalidad_de_curso'\n    ),\n    concat(\n        'https://www.zohoapis.eu/crm/v7/Deals?per_page=200&page_token=',\n        variables('NextPageToken'),\n        '&fields=Motivo_p_rdida_B2C,ID_Producto,Owner,Motivo_p_rdida_B2B,Residencia1,utm_type,utm_medium,utm_campaign_name,br_rating,Deal_Name,Exchange_Rate,Currency,Stage,id,utm_ad_id,ID_Classlife,utm_campaign_id,Importe_pagado,br_score,utm_perfil,C_digo_descuento,L_nea_de_Negocio,utm_source,Descuento,Closing_Date,utm_adset_id,utm_estrategia,tipo_conversion,Amount,Probability,Contact_Name.id,Pipeline,Competencia,utm_term,utm_channel,Tipolog_a_de_cliente,Created_Date,Modified_Time,ID_Lead,Fecha_hora_Pagado_NE,Fecha_hora_Anulaci_n,Nacionalidad1,lead_correlation_id,id_unico,Tipolog_a_del_alumno1,Contact_Name,Created_Time,ID_clientify,Modalidad_de_curso'\n    )\n)\n",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Deals/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": "@concat('JsaZohoDeals_', string(variables('PageCounter')), '.json')"
											}
										}
									]
								},
								{
									"name": "GetNextPageTokenDeals",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopydataZohoDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Deals/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": "@concat('JsaZohoDeals_', string(variables('PageCounter')), '.json')"
											}
										}
									}
								},
								{
									"name": "Set NextPageTokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextPageToken",
										"value": {
											"value": "@activity('GetNextPageTokenDeals').output.firstRow.info.next_page_token",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LogtokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set NextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Log_Token",
										"value": {
											"value": "@string(variables('NextPageToken'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PageCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "WebZohoAPI",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://accounts.zoho.eu/oauth/v2/token",
							"body": {
								"value": "@concat('client_id=', pipeline().parameters.client_id, \n        '&client_secret=', pipeline().parameters.client_secret,\n        '&refresh_token=', pipeline().parameters.refresh_token,\n        '&grant_type=refresh_token')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set variable Users Leads",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "WebActivityName",
							"value": {
								"value": "@activity('WebZohoAPI').output.access_token\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@pipeline().parameters.TokenStartTime",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Page Counter and NextpageToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "UntilDeals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "PageCounter",
									"value": {
										"type": "Expression",
										"content": "@variables('PageCounter')"
									}
								},
								{
									"key": "NextPageToken",
									"value": {
										"type": "Expression",
										"content": "@variables('NextPageToken')"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "7"
					},
					"AccessToken": {
						"type": "string"
					},
					"PageCounter": {
						"type": "string"
					},
					"IfModifiedSince": {
						"type": "string"
					},
					"NextPageToken": {
						"type": "string"
					},
					"TokenStartTime": {
						"type": "string"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					},
					"TokenStartTime": {
						"type": "String"
					},
					"AccessToken": {
						"type": "String"
					},
					"NextPageTokenParent": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Child_Leads_38b')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PageCounterParent",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable Users Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@pipeline().parameters.PageCounter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "NextPageTokenParent",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable Users Leads",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NextPageToken",
							"value": {
								"value": "@pipeline().parameters.NextPageToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UntilLeads",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "NextPageTokenParent",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "PageCounterParent",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(\n  or(\n    equals(variables('NextPageToken'), null),\n    equals(trim(variables('NextPageToken')), '')\n  ),\n  greater(\n    div(sub(ticks(utcnow()), ticks(pipeline().parameters.TokenStartTime)), 10000000),\n    3300\n  )\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopydataZohoDeals",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"Authorization": {
													"value": "@concat('Bearer ', activity('WebZohoAPI').output.access_token)",
													"type": "Expression"
												},
												"If-Modified-Since": {
													"value": "@pipeline().parameters.IfModifiedSince",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Zoho_API",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@if(\n    or(\n        equals(variables('NextPageToken'), null),\n        equals(variables('NextPageToken'), '')\n    ),\n    concat(\n        'https://www.zohoapis.eu/crm/v7/Leads?per_page=200&page=',\n        string(variables('PageCounter')),\n        '&fields=Created_Date,Apellido_2,Description,device,Email,First_Name,id,id_producto,id_programa,Last_Name,lead_correlation_id,lead_rating,lead_scoring,Lead_Source,Lead_Status,Mobile,Motivos_de_perdida,Nacionalidad,Owner,Phone,Provincia,Residencia,Sexo,source,Tipolog_a_de_cliente,Typo_Conversion,utm_ad_id,utm_adset_id,utm_campaign_id,utm_campaign_name,utm_channel,utm_estrategia,utm_medium,utm_perfil,utm_source,utm_term,utm_type,Modified_Time,Created_Time,L_nea_de_Negocio,Oportunidad_Asociada,ID_Clientify,Modalidad_de_curso,Sede'\n    ),\n    concat(\n        'https://www.zohoapis.eu/crm/v7/Leads?per_page=200&page_token=',\n        variables('NextPageToken'),\n        '&fields=Created_Date,Apellido_2,Description,device,Email,First_Name,id,id_producto,id_programa,Last_Name,lead_correlation_id,lead_rating,lead_scoring,Lead_Source,Lead_Status,Mobile,Motivos_de_perdida,Nacionalidad,Owner,Phone,Provincia,Residencia,Sexo,source,Tipolog_a_de_cliente,Typo_Conversion,utm_ad_id,utm_adset_id,utm_campaign_id,utm_campaign_name,utm_channel,utm_estrategia,utm_medium,utm_perfil,utm_source,utm_term,utm_type,Modified_Time,Created_Time,L_nea_de_Negocio,Oportunidad_Asociada,ID_Clientify,Modalidad_de_curso,Sede'\n    )\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Leads/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoLeads_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "GetNextPageTokenDeals",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopydataZohoDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/Leads/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaZohoLeads_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Set NextPageTokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextPageToken",
										"value": {
											"value": "@activity('GetNextPageTokenDeals').output.firstRow.info.next_page_token",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LogtokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set NextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Log_Token",
										"value": {
											"value": "@string(variables('NextPageToken'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PageCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "WebZohoAPI",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://accounts.zoho.eu/oauth/v2/token",
							"body": {
								"value": "@concat('client_id=', pipeline().parameters.client_id, \n        '&client_secret=', pipeline().parameters.client_secret,\n        '&refresh_token=', pipeline().parameters.refresh_token,\n        '&grant_type=refresh_token')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set variable Users Leads",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "WebActivityName",
							"value": {
								"value": "@activity('WebZohoAPI').output.access_token\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "WebZohoAPI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@pipeline().parameters.TokenStartTime",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Page Counter and NextpageToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "UntilLeads",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "PageCounter",
									"value": {
										"type": "Expression",
										"content": "@variables('PageCounter')"
									}
								},
								{
									"key": "NextPageToken",
									"value": {
										"type": "Expression",
										"content": "@variables('NextPageToken')"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "7"
					},
					"AccessToken": {
						"type": "string"
					},
					"PageCounter": {
						"type": "string"
					},
					"IfModifiedSince": {
						"type": "string"
					},
					"NextPageToken": {
						"type": "string"
					},
					"TokenStartTime": {
						"type": "string"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					},
					"TokenStartTime": {
						"type": "String"
					},
					"AccessToken": {
						"type": "String"
					},
					"NextPageTokenParent": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Child_Zoho_Deals_38b')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PageCounterParent",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@pipeline().parameters.PageCounter",
								"type": "Expression"
							}
						}
					},
					{
						"name": "NextPageTokenParent",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NextPageToken",
							"value": {
								"value": "@pipeline().parameters.NextPageToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UntilDeals",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "NextPageTokenParent",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "PageCounterParent",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(\n  equals(pipeline().parameters.NextPageToken, null),\n  equals(trim(variables('NextPageToken')), '')\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopydataZohoDeals",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"Authorization": {
													"value": "@concat('Bearer ', pipeline().parameters.AccessToken)",
													"type": "Expression"
												},
												"If-Modified-Since": {
													"value": "@pipeline().parameters.IfModifiedSince",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Zoho_API",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@if(\n    or(equals(variables('NextPageToken'), null), equals(variables('NextPageToken'), '')),\n    'https://www.zohoapis.eu/crm/v7/Deals?per_page=200&fields=Motivo_p_rdida_B2C,ID_Producto,Owner,Motivo_p_rdida_B2B,Residencia1,utm_type,utm_medium,utm_campaign_name,br_rating,Deal_Name,Exchange_Rate,Currency,Stage,id,utm_ad_id,ID_Classlife,utm_campaign_id,Importe_pagado,br_score,utm_perfil,C_digo_descuento,L_nea_de_Negocio,utm_source,Descuento,Closing_Date,utm_adset_id,utm_estrategia,tipo_conversion,Amount,Probability,Contact_Name.id,Pipeline,Competencia,utm_term,utm_channel,Tipolog_a_de_cliente,Created_Date,Modified_Time,ID_Lead,Fecha_hora_Pagado_NE,Fecha_hora_Anulaci_n,Nacionalidad1,lead_correlation_id,id_unico,Tipolog_a_del_alumno1,Contact_Name,Created_Time,ID_clientify,Modalidad_de_curso',\n    concat('https://www.zohoapis.eu/crm/v7/Deals?per_page=200&page_token=', variables('NextPageToken'), '&fields=Motivo_p_rdida_B2C,ID_Producto,Owner,Motivo_p_rdida_B2B,Residencia1,utm_type,utm_medium,utm_campaign_name,br_rating,Deal_Name,Exchange_Rate,Currency,Stage,id,utm_ad_id,ID_Classlife,utm_campaign_id,Importe_pagado,br_score,utm_perfil,C_digo_descuento,L_nea_de_Negocio,utm_source,Descuento,Closing_Date,utm_adset_id,utm_estrategia,tipo_conversion,Amount,Probability,Contact_Name.id,Pipeline,Competencia,utm_term,utm_channel,Tipolog_a_de_cliente,Created_Date,Modified_Time,ID_Lead,Fecha_hora_Pagado_NE,Fecha_hora_Anulaci_n,Nacionalidad1,lead_correlation_id,id_unico,Tipolog_a_del_alumno1,Contact_Name,Created_Time,ID_clientify,Modalidad_de_curso')\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": "@concat('JsaZohoDeals_', string(variables('PageCounter')), '.json')"
											}
										}
									]
								},
								{
									"name": "GetNextPageTokenDeals",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "CopydataZohoDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/zoho_38b/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": "@concat('JsaZohoDeals_', string(variables('PageCounter')), '.json')"
											}
										}
									}
								},
								{
									"name": "Set NextPageTokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextPageToken",
										"value": {
											"value": "@activity('GetNextPageTokenDeals').output.firstRow.info.next_page_token",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LogtokenDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set NextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Log_Token",
										"value": {
											"value": "@string(variables('NextPageToken'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNextPageTokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "PageCounterDeals",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounterDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "NextPageToken",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "LogtokenDeals",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pipelineReturnValue",
										"value": [
											{
												"key": "NextPageToken",
												"value": {
													"type": "Expression",
													"content": "@variables('NextPageToken')"
												}
											}
										],
										"setSystemVariable": true
									}
								},
								{
									"name": "PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "NextPageToken",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pipelineReturnValue",
										"value": [
											{
												"key": "PageCounter",
												"value": {
													"type": "Expression",
													"content": "@variables('PageCounter')"
												}
											}
										],
										"setSystemVariable": true
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"client_id": {
						"type": "string",
						"defaultValue": "1000.1F4VDBCZ89HIY80175SZZF595HBSNO"
					},
					"client_secret": {
						"type": "string",
						"defaultValue": "d3743dfd871d30ac90d12b3e6ac02de1111c51076e"
					},
					"refresh_token": {
						"type": "string",
						"defaultValue": "1000.38b38aaaa19f9e17d7228903a78f2220.44022c9409dbc53987bcc273e18eb666"
					},
					"reprocessDate": {
						"type": "string",
						"defaultValue": "7"
					},
					"AccessToken": {
						"type": "string"
					},
					"PageCounter": {
						"type": "string"
					},
					"IfModifiedSince": {
						"type": "string"
					},
					"NextPageToken": {
						"type": "string"
					}
				},
				"variables": {
					"WebActivityName": {
						"type": "String"
					},
					"If-Modified-Since": {
						"type": "String"
					},
					"NextPageToken": {
						"type": "String"
					},
					"Log_Token": {
						"type": "String"
					},
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					},
					"TokenStartTime": {
						"type": "String"
					},
					"AccessToken": {
						"type": "String"
					},
					"NextPageTokenParent": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze/Zoho"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-23T12:54:36Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Classlife919')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until Enroll groups",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "If Condition Delete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "WebClasslifeEnroll_groups",
									"description": "Activity web that calls the endpoint enroll_groups",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/enroll_groups?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ClasslifeProductos",
									"description": "ClasslifeEnrollGroups",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeEnroll_groups",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('enroll_groups?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/enroll_groups/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeProductos_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ClasslifeProductos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeEnroll_groups').output.data.items)\n",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "CheckFolderExists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adsl_json_delete",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/classlife/')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Condition Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('CheckFolderExists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Files Enroll Groups",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/enroll_groups/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files Enrollments",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/enrollments/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files Admissions",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/admissions/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files Receipts",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/receipts/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files students",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/students/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Until Admissions",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "2 Reboot PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "1 PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "1 TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "1 TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Admissions",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "1 Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "1 PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeAdmissions').output.data.items)\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebClasslifeAdmissions",
									"description": "Activity web that calls the endpoint Admissions",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/admissions?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Admissions",
									"description": "Admissions",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeAdmissions",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('admissions?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/admissions/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeAdmissions_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Until Enrollments",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Reboot PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "2 PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "2 TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "2 TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Enrollments",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "2 Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "2 PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeEnrollments').output.data.items)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebClasslifeEnrollments",
									"description": "Activity web that calls the endpoint Enrollments",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/enrollments?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Enrollments",
									"description": "Enrollments",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeEnrollments",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('enrollments?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/enrollments/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeEnrollments_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Until Students",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "1 Reboot PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "3 PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "3 TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "3 TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ClasslifeStudents",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "3 Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "3 PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeStudents').output.data.items)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebClasslifeStudents",
									"description": "Activity web that calls the endpoint Students",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/students?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ClasslifeStudents",
									"description": "ClasslifeStudents",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeStudents",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('students?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/students/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeStudents_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Until Receipts",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "3 Reboot PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "4 PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "4 TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "4 TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Receipts",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "4 Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "4 PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeReceipts').output.data.items)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebClasslifeReceipts",
									"description": "Activity web that calls the endpoint Receipts",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/receipts?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Receipts",
									"description": "Receipts",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeReceipts",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('receipts?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife/receipts/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeReceipts_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Reboot PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until Enroll groups",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@int(1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "1 Reboot PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until Enrollments",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@int(1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "2 Reboot PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until Students",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@int(1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "3 Reboot PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until Admissions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@int(1)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"API_CLIENT": {
						"type": "string",
						"defaultValue": "919"
					},
					"API_KEY": {
						"type": "string",
						"defaultValue": "C!Fd4e045d16e5544"
					},
					"limit": {
						"type": "string",
						"defaultValue": "200"
					}
				},
				"variables": {
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					},
					"NextItem": {
						"type": "Integer"
					},
					"WebActivityRequest": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-03T16:56:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Classlife931')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until Admissions",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "1 Reboot PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "1 PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "1 TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "1 TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Admissions",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "1 Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "1 PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeAdmissions').output.data.items)\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebClasslifeAdmissions",
									"description": "Activity web that calls the endpoint Admissions",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": true,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/admissions?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Admissions",
									"description": "Admissions",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeAdmissions",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('admissions?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/admissions/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeAdmissions_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "1 Reboot PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until Enrollments",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@int(1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Until Enroll groups",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "If Condition Delete",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "WebClasslifeEnroll_groups",
									"description": "Activity web that calls the endpoint enroll_groups",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/enroll_groups?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ClasslifeProductos",
									"description": "ClasslifeEnrollGroups",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeEnroll_groups",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('enroll_groups?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/enroll_groups/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeProductos_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ClasslifeProductos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeEnroll_groups').output.data.items)\n",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "CheckFolderExists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_adsl_json_delete",
								"type": "DatasetReference",
								"parameters": {
									"container": "bronze",
									"folder": {
										"value": "@concat('lakehouse/classlife_931/')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If Condition Delete",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckFolderExists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('CheckFolderExists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete Files Enroll Groups",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/enroll_groups/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files Enrollments",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/enrollments/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files Admissions",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/admissions/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files Receipts",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/receipts/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files students",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/students/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Delete Files students Cleaned",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Delete Files students",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl_json_delete",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/students/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'),'/','student_cleaned')",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": false,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Until Enrollments",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Reboot PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "2 PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "2 TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "2 TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Enrollments",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "2 Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "2 PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeEnrollments').output.data.items)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebClasslifeEnrollments",
									"description": "Activity web that calls the endpoint Enrollments",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/enrollments?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Enrollments",
									"description": "Enrollments",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeEnrollments",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('enrollments?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/enrollments/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeEnrollments_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Reboot PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until Enroll groups",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@int(1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Until Receipts",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "2 Reboot PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "4 PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "4 TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "4 TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Receipts",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "4 Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "4 PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeReceipts').output.data.items)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebClasslifeReceipts",
									"description": "Activity web that calls the endpoint Receipts",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/receipts?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Receipts",
									"description": "Receipts",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeReceipts",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('receipts?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/receipts/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeReceipts_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "2 Reboot PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until Admissions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@int(1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Until Students",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "3 Reboot PageCounter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NextItem'), 0)\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "3 PageCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "3 TempCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PageCounter",
										"value": {
											"value": "@variables('TempCounter')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "3 TempCounter",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "ClasslifeStudents_931_cleaned",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCounter",
										"value": {
											"value": "@add(variables('PageCounter'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "3 Set Items",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "3 PageCounter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NextItem",
										"value": {
											"value": "@length(activity('WebClasslifeStudents').output.data.items)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "WebClasslifeStudents",
									"description": "Activity web that calls the endpoint Students",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"apiKey": {
												"value": "@pipeline().parameters.API_KEY",
												"type": "Expression"
											},
											"clientId": {
												"value": "@pipeline().parameters.API_CLIENT",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://api.classlife.io/api/v1/students?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ClasslifeStudents_931",
									"description": "ClasslifeStudents",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "WebClasslifeStudents",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Content-Type": "application/json",
												"apiKey": {
													"value": "@pipeline().parameters.API_KEY",
													"type": "Expression"
												},
												"clientId": {
													"value": "@pipeline().parameters.API_CLIENT",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_Classlife",
											"type": "DatasetReference",
											"parameters": {
												"relativeUrl": {
													"value": "@concat('students?showMetas=1&limit=', pipeline().parameters.limit, '&page=', variables('PageCounter'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/students/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeStudents_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "ClasslifeStudents_931_cleaned",
									"description": "ClasslifeStudents",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ClasslifeStudents_931",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['student_id']"
													},
													"sink": {
														"path": "student_id"
													}
												},
												{
													"source": {
														"path": "[['student_full_name']"
													},
													"sink": {
														"path": "student_full_name"
													}
												},
												{
													"source": {
														"path": "[['student_email']"
													},
													"sink": {
														"path": "student_email"
													}
												},
												{
													"source": {
														"path": "[['student_phone']"
													},
													"sink": {
														"path": "student_phone"
													}
												},
												{
													"source": {
														"path": "[['student_registration_date']"
													},
													"sink": {
														"path": "student_registration_date"
													}
												},
												{
													"source": {
														"path": "[['student_active']"
													},
													"sink": {
														"path": "student_active"
													}
												},
												{
													"source": {
														"path": "[['metas']['zoho_id']"
													},
													"sink": {
														"path": "zoho_id"
													}
												},
												{
													"source": {
														"path": "[['metas']['ciudad']"
													},
													"sink": {
														"path": "ciudad"
													}
												},
												{
													"source": {
														"path": "[['metas']['codigo']"
													},
													"sink": {
														"path": "codigo"
													}
												},
												{
													"source": {
														"path": "[['metas']['pais']"
													},
													"sink": {
														"path": "pais"
													}
												},
												{
													"source": {
														"path": "[['metas']['edad']"
													},
													"sink": {
														"path": "edad"
													}
												},
												{
													"source": {
														"path": "[['metas']['direccion']"
													},
													"sink": {
														"path": "direccion"
													}
												},
												{
													"source": {
														"path": "[['metas']['nacimiento']"
													},
													"sink": {
														"path": "nacimiento"
													}
												},
												{
													"source": {
														"path": "[['metas']['libres_expediente_alexia']"
													},
													"sink": {
														"path": "libres_expediente_alexia"
													}
												},
												{
													"source": {
														"path": "[['metas']['libres_grupo_curso_anterior']"
													},
													"sink": {
														"path": "libres_grupo_curso_anterior"
													}
												},
												{
													"source": {
														"path": "[['metas']['libres_titulacion_curso_anterior']"
													},
													"sink": {
														"path": "libres_titulacion_curso_anterior"
													}
												}
											],
											"collectionReference": "$['data']['items']"
										}
									},
									"inputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/students/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeStudents_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl_json",
											"type": "DatasetReference",
											"parameters": {
												"container": "bronze",
												"folder": {
													"value": "@concat('lakehouse/classlife_931/students/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'),'/','student_cleaned')",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('JsaClassLifeStudents_', string(variables('PageCounter')), '.json')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "3 Reboot PageCounter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until Receipts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PageCounter",
							"value": {
								"value": "@int(1)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"API_CLIENT": {
						"type": "string",
						"defaultValue": "931"
					},
					"API_KEY": {
						"type": "string",
						"defaultValue": "C!F5ec7888d40c7e8"
					},
					"limit": {
						"type": "string",
						"defaultValue": "500"
					}
				},
				"variables": {
					"PageCounter": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCounter": {
						"type": "Integer",
						"defaultValue": 0
					},
					"NextItem": {
						"type": "Integer"
					},
					"WebActivityRequest": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Bronze"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-09T17:21:05Z"
			},
			"dependsOn": []
		}
	]
}