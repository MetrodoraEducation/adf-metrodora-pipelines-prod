{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-metrodoralakehouse-pro"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/p_General_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecutePipelineBudgetGeneral",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_Budget_old",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipelineCallsSalesBronzeSilver_Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_CallsSalesBronzeSilver_Full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipeline_dim_gold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipelineCallsSalesBronzeSilver_Full",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_dim_gold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ExecutePipeline_fct_gold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecutePipeline_dim_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_fct_gold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Notebook_DWH",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExecutePipeline_fct_gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Lakehouse/DWH/master_execute_notebooks"
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Lakehouse/DWH"
				},
				"annotations": [],
				"lastPublishTime": "2025-05-14T10:11:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_General_Metrodora')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dim gold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Tablon_Leads_and_DealsSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_dim_gold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"gold_storage_databricks": {
									"value": "@pipeline().parameters.gold_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Fct gold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Dim gold",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_fct_gold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"gold_storage_databricks": {
									"value": "@pipeline().parameters.gold_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Notebook_DWH",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.dwh_storage_databricks, 'master_execute_notebooks')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Zoho_Fisiofocus_Full",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Modified Since",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_Zoho_Fisiofocus",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"reprocessDate": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								},
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Classlife919Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General919_Classlife",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"reprocessDate": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								},
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Dim Fijas",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Tablon_Leads_and_DealsSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_dimFijas_Mapeo",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								},
								"gold_storage_databricks": {
									"value": "@pipeline().parameters.gold_storage_databricks",
									"type": "Expression"
								},
								"dwh_storage_databricks": {
									"value": "@pipeline().parameters.dwh_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Wait",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Fct gold",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Budget General_FF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 15
						}
					},
					{
						"name": "Auxiliar Periodificacion",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Notebook_DWH",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_Auxiliar_periodificacion",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"gold_storage_databricks": {
									"value": "@pipeline().parameters.gold_storage_databricks",
									"type": "Expression"
								},
								"dwh_storage_databricks": {
									"value": "@pipeline().parameters.dwh_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Budget General_FF",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Dim Fijas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_Budget_FF",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								},
								"gold_storage_databricks": {
									"value": "@pipeline().parameters.gold_storage_databricks",
									"type": "Expression"
								},
								"dwh_storage_databricks": {
									"value": "@pipeline().parameters.dwh_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Classlife931Full",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General931_Classlife",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Zoho_FP_38b_Full",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If Modified Since",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetTokenStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_Zoho_FP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"reprocessDate": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								},
								"silver_storage_databricks": {
									"value": "@pipeline().parameters.silver_storage_databricks",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Tablon_Leads_and_DealsSilver",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Zoho_Fisiofocus_Full",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Classlife919Full",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Zoho_FP_38b_Full",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Classlife931Full",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat(pipeline().parameters.silver_storage_databricks, 'Tablon_Leads_and_Deals')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "If Modified Since",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "If-Modified-Since",
							"value": {
								"value": "@formatDateTime(addDays(utcnow(), if(equals(pipeline().parameters.dayToLoad, ''), -7, sub(0, int(pipeline().parameters.dayToLoad)))), 'yyyy-MM-ddTHH:mm:ssZ')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetTokenStartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TokenStartTime",
							"value": {
								"value": "@utcNow()\n",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					},
					"silver_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Silver/"
					},
					"gold_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Gold/"
					},
					"dwh_storage_databricks": {
						"type": "string",
						"defaultValue": "/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/DWH/"
					}
				},
				"variables": {
					"If-Modified-Since": {
						"type": "String"
					},
					"TokenStartTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Master"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-03T16:56:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_Master_Metrodora')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute p_General_Metrodora",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEach_Previous_Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "p_General_Metrodora",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"dayToLoad": {
									"value": "@pipeline().parameters.dayToLoad",
									"type": "Expression"
								},
								"silver_storage_databricks": {
									"value": "@concat('/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Silver/')",
									"type": "Expression"
								},
								"gold_storage_databricks": {
									"value": "@concat('/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/Gold/')",
									"type": "Expression"
								},
								"dwh_storage_databricks": {
									"value": "@concat('/Workspace/Repos/production_repository/notebooks-databricks-prod/Lakehouse/DWH/')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Succesfully Email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ForEach_After_Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-96.westeurope.logic.azure.com:443/workflows/421b78d3946b475d962d9cfbea4c0899/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=A1vnMT0ZUVltAWLpmQ4qU6Z3ggPqz0MSz-O0hrdjHn8",
							"body": {
								"value": "{\n  \"title\": \"PIPELINE RUN METRODORA MASTER FINISHED\",\n  \"message\": \"PIPELINE FINISHED RUNNING SUCCESSFULLY!\",\n  \"color\": \"Green\",\n  \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n  \"pipelineName\": \"@{pipeline().Pipeline}\",\n  \"pipelineRunId\": \"@{pipeline().RunId}\",\n  \"time\": \"@{utcNow()}\",\n  \"details\": {\n    \"tables\": [\n      {\n        \"table\": \"fctventa\",\n        \"previous_count\": \"@{variables('previous_counts_ventas')}\",\n        \"after_count\": \"@{variables('after_counts_ventas')}\",\n        \"inserted_records\": \"@{variables('inserted_records_ventas')}\"\n      },\n      {\n        \"table\": \"fct_matricula\",\n        \"previous_count\": \"@{variables('previous_counts_matricula')}\",\n        \"after_count\": \"@{variables('after_counts_matricula')}\",\n        \"inserted_records\": \"@{variables('inserted_records_matricula')}\"\n      },\n      {\n        \"table\": \"fct_recibos\",\n        \"previous_count\": \"@{variables('previous_counts_fct_recibos')}\",\n        \"after_count\": \"@{variables('after_counts_fct_recibos')}\",\n        \"inserted_records\": \"@{variables('inserted_records_fct_recibos')}\"\n      }\n    ],\n    \"duplicated_cod_leads\": @{json(variables('Count_cod_lead_duplicates_fct_ventas'))},\n    \"duplicated_cod_oportunidad\": @{json(variables('Count_cod_oportunidad_duplicates_fct_ventas'))}\n  }\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Failed Email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute p_General_Metrodora",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-40.westeurope.logic.azure.com:443/workflows/2bb0d801093b433a99faf68a321f80fb/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=XkPD-LLEMVO2gpxBWggav7Z1z9XUNdXndtJTos6uWLc",
							"body": {
								"value": "{\n  \"title\": \"PIPELINE RUN METRODORA MASTER FAILED\",\n  \"message\": \"El pipeline 'p_General_Metrodora' ha fallado. \n  Actividad con error: @{activity('Execute p_General_Metrodora').error.message}. \n  Revisa los logs en ADF.\",\n  \"color\": \"Red\",\n  \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n  \"pipelineName\": \"@{pipeline().Pipeline}\",\n  \"pipelineRunId\": \"@{pipeline().RunId}\",\n  \"time\": \"@{utcNow()}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach_Previous_Count",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('table_list')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get_Previous_Count_Ventas",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select count(*) from public.fctventa",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										}
									}
								},
								{
									"name": "previous_counts_ventas",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get_Previous_Count_Ventas",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "previous_counts_ventas",
										"value": {
											"value": "@string(activity('Get_Previous_Count_Ventas').output.firstRow.count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get_Previous_Count_Matricula",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select count(*) from public.fct_matricula",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										}
									}
								},
								{
									"name": "previous_counts_matricula",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get_Previous_Count_Matricula",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "previous_counts_matricula",
										"value": {
											"value": "@string(activity('Get_Previous_Count_Matricula').output.firstRow.count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get_Previous_Count_fct_ventas",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select count(*) from public.fct_venta",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										}
									}
								},
								{
									"name": "previous_counts_fct_ventas",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get_Previous_Count_fct_ventas",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "previous_counts_fct_ventas",
										"value": {
											"value": "@string(activity('Get_Previous_Count_fct_ventas').output.firstRow.count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get_Previous_Count_fct_recibos",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select count(*) from public.fct_recibos",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										}
									}
								},
								{
									"name": "previous_counts_fct_recibos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get_Previous_Count_fct_recibos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "previous_counts_fct_recibos",
										"value": {
											"value": "@string(activity('Get_Previous_Count_fct_recibos').output.firstRow.count)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "ForEach_After_Count",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute p_General_Metrodora",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('table_list')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get_After_Count_Ventas",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select count(*) from public.fctventa",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										}
									}
								},
								{
									"name": "After_counts_ventas",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get_After_Count_Ventas",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "after_counts_ventas",
										"value": {
											"value": "@string(activity('Get_After_Count_Ventas').output.firstRow.count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "inserted_records_ventas",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "After_counts_ventas",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inserted_records_ventas",
										"value": {
											"value": "@string(\n    max(\n        0,\n        sub(\n            int(if(empty(variables('after_counts_ventas')), '0', variables('after_counts_ventas'))), \n            int(if(empty(variables('previous_counts_ventas')), '0', variables('previous_counts_ventas')))\n        )\n    )\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get_After_Count_Matricula",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select count(*) from public.fct_matricula",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										}
									}
								},
								{
									"name": "After_counts_Matricula",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get_After_Count_Matricula",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "after_counts_matricula",
										"value": {
											"value": "@string(activity('Get_After_Count_Matricula').output.firstRow.count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "inserted_records_Matricula",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "After_counts_Matricula",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inserted_records_matricula",
										"value": {
											"value": "@string(\n    max(\n        0,\n        sub(\n            int(if(empty(variables('after_counts_matricula')), '0', variables('after_counts_matricula'))), \n            int(if(empty(variables('previous_counts_matricula')), '0', variables('previous_counts_matricula')))\n        )\n    )\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get_After_Count_fct_ventas",
									"type": "Lookup",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select count(*) from public.fct_venta",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										}
									}
								},
								{
									"name": "After_counts_fct_ventas",
									"type": "SetVariable",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "Get_After_Count_fct_ventas",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "after_counts_fct_ventas",
										"value": {
											"value": "@string(activity('Get_After_Count_fct_ventas').output.firstRow.count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "inserted_records_fct_ventas",
									"type": "SetVariable",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "After_counts_fct_ventas",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inserted_records_fct_ventas",
										"value": {
											"value": "@string(\n    max(\n        0,\n        sub(\n            int(if(empty(variables('after_counts_fct_ventas')), '0', variables('after_counts_fct_ventas'))), \n            int(if(empty(variables('previous_counts_fct_ventas')), '0', variables('previous_counts_fct_ventas')))\n        )\n    )\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get_After_Count_fct_recibos",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "select count(*) from public.fct_recibos",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										}
									}
								},
								{
									"name": "After_counts_fct_recibos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get_After_Count_fct_recibos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "after_counts_fct_recibos",
										"value": {
											"value": "@string(activity('Get_After_Count_fct_recibos').output.firstRow.count)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "inserted_records_fct_recibos",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "After_counts_fct_recibos",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "inserted_records_fct_recibos",
										"value": {
											"value": "@string(\n    max(\n        0,\n        sub(\n            int(if(empty(variables('after_counts_fct_recibos')), '0', variables('after_counts_fct_recibos'))), \n            int(if(empty(variables('previous_counts_fct_recibos')), '0', variables('previous_counts_fct_recibos')))\n        )\n    )\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Count_cod_lead_duplicates_fct_ventas",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "SELECT cod_lead, COUNT(*)\nFROM fctventa\nWHERE cod_lead IS NOT NULL\nGROUP BY cod_lead\nHAVING COUNT(*) > 1;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Count_cod_lead_duplicates",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Count_cod_lead_duplicates_fct_ventas",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Count_cod_lead_duplicates_fct_ventas",
										"value": {
											"value": "@string(activity('Count_cod_lead_duplicates_fct_ventas').output.value)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Count_cod_oportunidad_duplicates_fct_ventas",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzurePostgreSqlSource",
											"query": {
												"value": "SELECT cod_oportunidad, COUNT(*)\nFROM fctventa\nWHERE cod_oportunidad IS NOT NULL\nGROUP BY cod_oportunidad\nHAVING COUNT(*) > 1;\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_PostgreSql",
											"type": "DatasetReference",
											"parameters": {
												"schema": "public",
												"table": "f0calls"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Count_cod_oportunidad_duplicates",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Count_cod_oportunidad_duplicates_fct_ventas",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Count_cod_oportunidad_duplicates_fct_ventas",
										"value": {
											"value": "@string(activity('Count_cod_oportunidad_duplicates_fct_ventas').output.value)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dayToLoad": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"variables": {
					"previous_counts_ventas": {
						"type": "String"
					},
					"after_counts_ventas": {
						"type": "String"
					},
					"inserted_records_ventas": {
						"type": "String"
					},
					"previous_counts_matricula": {
						"type": "String"
					},
					"after_counts_matricula": {
						"type": "String"
					},
					"inserted_records_matricula": {
						"type": "String"
					},
					"table_list": {
						"type": "Array",
						"defaultValue": [
							"dummy_value"
						]
					},
					"previous_counts_fct_ventas": {
						"type": "String"
					},
					"after_counts_fct_ventas": {
						"type": "String"
					},
					"inserted_records_fct_ventas": {
						"type": "String"
					},
					"previous_counts_fct_recibos": {
						"type": "String"
					},
					"after_counts_fct_recibos": {
						"type": "String"
					},
					"inserted_records_fct_recibos": {
						"type": "String"
					},
					"Count_cod_lead_duplicates_fct_ventas": {
						"type": "String"
					},
					"Count_cod_oportunidad_duplicates_fct_ventas": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Lakehouse/Master"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-18T12:05:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_General_Metrodora')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger_master')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Executed trigger master",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "p_Master_Metrodora",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2025-03-24T15:15:00",
						"timeZone": "Romance Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								4
							],
							"weekDays": [
								"Sunday",
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday",
								"Saturday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/p_Master_Metrodora')]"
			]
		}
	]
}